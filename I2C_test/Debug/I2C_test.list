
I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003040  08003040  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000018  08003060  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003060  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d57  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001156  00000000  00000000  00026d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00027ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  00028598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000144cd  00000000  00000000  00028bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005acb  00000000  00000000  0003d08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fab5  00000000  00000000  00042b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c260d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  000c2688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003008 	.word	0x08003008

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08003008 	.word	0x08003008

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b972 	b.w	8000d10 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14b      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4615      	mov	r5, r2
 8000a56:	d967      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0720 	rsb	r7, r2, #32
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	fa20 f707 	lsr.w	r7, r0, r7
 8000a6a:	4095      	lsls	r5, r2
 8000a6c:	ea47 0803 	orr.w	r8, r7, r3
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a7c:	fa1f fc85 	uxth.w	ip, r5
 8000a80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a88:	fb07 f10c 	mul.w	r1, r7, ip
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18eb      	adds	r3, r5, r3
 8000a92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a96:	f080 811b 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8118 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000aa0:	3f02      	subs	r7, #2
 8000aa2:	442b      	add	r3, r5
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab8:	45a4      	cmp	ip, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	192c      	adds	r4, r5, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8107 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	f240 8104 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000acc:	3802      	subs	r0, #2
 8000ace:	442c      	add	r4, r5
 8000ad0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	2700      	movs	r7, #0
 8000ada:	b11e      	cbz	r6, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0xbe>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80eb 	beq.w	8000cca <__udivmoddi4+0x286>
 8000af4:	2700      	movs	r7, #0
 8000af6:	e9c6 0100 	strd	r0, r1, [r6]
 8000afa:	4638      	mov	r0, r7
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f783 	clz	r7, r3
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d147      	bne.n	8000b9a <__udivmoddi4+0x156>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xd0>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80fa 	bhi.w	8000d08 <__udivmoddi4+0x2c4>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d0e0      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b22:	e9c6 4800 	strd	r4, r8, [r6]
 8000b26:	e7dd      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b28:	b902      	cbnz	r2, 8000b2c <__udivmoddi4+0xe8>
 8000b2a:	deff      	udf	#255	; 0xff
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	f040 808f 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b36:	1b49      	subs	r1, r1, r5
 8000b38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3c:	fa1f f885 	uxth.w	r8, r5
 8000b40:	2701      	movs	r7, #1
 8000b42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb08 f10c 	mul.w	r1, r8, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b66:	4684      	mov	ip, r0
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b78:	fb08 f800 	mul.w	r8, r8, r0
 8000b7c:	45a0      	cmp	r8, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x14c>
 8000b80:	192c      	adds	r4, r5, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x14a>
 8000b88:	45a0      	cmp	r8, r4
 8000b8a:	f200 80b6 	bhi.w	8000cfa <__udivmoddi4+0x2b6>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b98:	e79f      	b.n	8000ada <__udivmoddi4+0x96>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb8:	4325      	orrs	r5, r4
 8000bba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bbe:	0c2c      	lsrs	r4, r5, #16
 8000bc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc4:	fa1f fa8e 	uxth.w	sl, lr
 8000bc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bcc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000be0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be4:	f080 8087 	bcs.w	8000cf6 <__udivmoddi4+0x2b2>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f240 8084 	bls.w	8000cf6 <__udivmoddi4+0x2b2>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4473      	add	r3, lr
 8000bf4:	1b1b      	subs	r3, r3, r4
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c14:	d26b      	bcs.n	8000cee <__udivmoddi4+0x2aa>
 8000c16:	45a2      	cmp	sl, r4
 8000c18:	d969      	bls.n	8000cee <__udivmoddi4+0x2aa>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4474      	add	r4, lr
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	fba0 8902 	umull	r8, r9, r0, r2
 8000c26:	eba4 040a 	sub.w	r4, r4, sl
 8000c2a:	454c      	cmp	r4, r9
 8000c2c:	46c2      	mov	sl, r8
 8000c2e:	464b      	mov	r3, r9
 8000c30:	d354      	bcc.n	8000cdc <__udivmoddi4+0x298>
 8000c32:	d051      	beq.n	8000cd8 <__udivmoddi4+0x294>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d069      	beq.n	8000d0c <__udivmoddi4+0x2c8>
 8000c38:	ebb1 050a 	subs.w	r5, r1, sl
 8000c3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c44:	40fd      	lsrs	r5, r7
 8000c46:	40fc      	lsrs	r4, r7
 8000c48:	ea4c 0505 	orr.w	r5, ip, r5
 8000c4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c50:	2700      	movs	r7, #0
 8000c52:	e747      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000c54:	f1c2 0320 	rsb	r3, r2, #32
 8000c58:	fa20 f703 	lsr.w	r7, r0, r3
 8000c5c:	4095      	lsls	r5, r2
 8000c5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c62:	fa21 f303 	lsr.w	r3, r1, r3
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	0c01      	lsrs	r1, r0, #16
 8000c6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c72:	fa1f f885 	uxth.w	r8, r5
 8000c76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb07 f308 	mul.w	r3, r7, r8
 8000c82:	428b      	cmp	r3, r1
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x256>
 8000c8a:	1869      	adds	r1, r5, r1
 8000c8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c90:	d22f      	bcs.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d92d      	bls.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c96:	3f02      	subs	r7, #2
 8000c98:	4429      	add	r1, r5
 8000c9a:	1acb      	subs	r3, r1, r3
 8000c9c:	b281      	uxth	r1, r0
 8000c9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb00 f308 	mul.w	r3, r0, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x27e>
 8000cb2:	1869      	adds	r1, r5, r1
 8000cb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb8:	d217      	bcs.n	8000cea <__udivmoddi4+0x2a6>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d915      	bls.n	8000cea <__udivmoddi4+0x2a6>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4429      	add	r1, r5
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc8:	e73b      	b.n	8000b42 <__udivmoddi4+0xfe>
 8000cca:	4637      	mov	r7, r6
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e709      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	e6e7      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	e6fb      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd8:	4541      	cmp	r1, r8
 8000cda:	d2ab      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000cdc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	e7a4      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cea:	4660      	mov	r0, ip
 8000cec:	e7e9      	b.n	8000cc2 <__udivmoddi4+0x27e>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	e795      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf2:	4667      	mov	r7, ip
 8000cf4:	e7d1      	b.n	8000c9a <__udivmoddi4+0x256>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e77c      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	e747      	b.n	8000b90 <__udivmoddi4+0x14c>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	442b      	add	r3, r5
 8000d06:	e72f      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d08:	4638      	mov	r0, r7
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xda>
 8000d0c:	4637      	mov	r7, r6
 8000d0e:	e6e9      	b.n	8000ae4 <__udivmoddi4+0xa0>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94d 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f002 f826 	bl	8002d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f965 	bl	8001046 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92d 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000014 	.word	0x20000014
 8000db0:	20000004 	.word	0x20000004
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000038 	.word	0x20000038

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000038 	.word	0x20000038

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000004 	.word	0x20000004

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e159      	b.n	8001330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8148 	bne.w	800132a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x4a>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	69b9      	ldr	r1, [r7, #24]
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d00b      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113a:	2b11      	cmp	r3, #17
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a2 	beq.w	800132a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x2e4>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a55      	ldr	r2, [pc, #340]	; (8001344 <HAL_GPIO_Init+0x2e4>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_GPIO_Init+0x2e4>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a48      	ldr	r2, [pc, #288]	; (800134c <HAL_GPIO_Init+0x2ec>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x202>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a47      	ldr	r2, [pc, #284]	; (8001350 <HAL_GPIO_Init+0x2f0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x1fe>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_GPIO_Init+0x2f4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1fa>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	; (8001358 <HAL_GPIO_Init+0x2f8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1f6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_GPIO_Init+0x2fc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1f2>
 800124e:	2304      	movs	r3, #4
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001252:	2307      	movs	r3, #7
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_GPIO_Init+0x300>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <HAL_GPIO_Init+0x300>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_GPIO_Init+0x300>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x300>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_GPIO_Init+0x300>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_GPIO_Init+0x300>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x300>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_GPIO_Init+0x300>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f aea2 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	401a      	ands	r2, r3
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d104      	bne.n	80013ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f806 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e10f      	b.n	8001646 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 fcd4 	bl	8002de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001458:	f001 fb14 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <HAL_I2C_Init+0x23c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d807      	bhi.n	8001478 <HAL_I2C_Init+0x64>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <HAL_I2C_Init+0x240>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e006      	b.n	8001486 <HAL_I2C_Init+0x72>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a77      	ldr	r2, [pc, #476]	; (8001658 <HAL_I2C_Init+0x244>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0db      	b.n	8001646 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a72      	ldr	r2, [pc, #456]	; (800165c <HAL_I2C_Init+0x248>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a64      	ldr	r2, [pc, #400]	; (8001650 <HAL_I2C_Init+0x23c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d802      	bhi.n	80014c8 <HAL_I2C_Init+0xb4>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e009      	b.n	80014dc <HAL_I2C_Init+0xc8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4a63      	ldr	r2, [pc, #396]	; (8001660 <HAL_I2C_Init+0x24c>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4956      	ldr	r1, [pc, #344]	; (8001650 <HAL_I2C_Init+0x23c>)
 80014f8:	428b      	cmp	r3, r1
 80014fa:	d80d      	bhi.n	8001518 <HAL_I2C_Init+0x104>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e59      	subs	r1, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fbb1 f3f3 	udiv	r3, r1, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	bf38      	it	cc
 8001514:	2304      	movcc	r3, #4
 8001516:	e04f      	b.n	80015b8 <HAL_I2C_Init+0x1a4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_I2C_Init+0x130>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e012      	b.n	800156a <HAL_I2C_Init+0x156>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x15e>
 800156e:	2301      	movs	r3, #1
 8001570:	e022      	b.n	80015b8 <HAL_I2C_Init+0x1a4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <HAL_I2C_Init+0x184>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e58      	subs	r0, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	fbb0 f3f3 	udiv	r3, r0, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001596:	e00f      	b.n	80015b8 <HAL_I2C_Init+0x1a4>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	0099      	lsls	r1, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6911      	ldr	r1, [r2, #16]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	000186a0 	.word	0x000186a0
 8001654:	001e847f 	.word	0x001e847f
 8001658:	003d08ff 	.word	0x003d08ff
 800165c:	431bde83 	.word	0x431bde83
 8001660:	10624dd3 	.word	0x10624dd3

08001664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	460b      	mov	r3, r1
 8001672:	817b      	strh	r3, [r7, #10]
 8001674:	4613      	mov	r3, r2
 8001676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fbb2 	bl	8000de0 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	f040 80e0 	bne.w	800184c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2319      	movs	r3, #25
 8001692:	2201      	movs	r2, #1
 8001694:	4970      	ldr	r1, [pc, #448]	; (8001858 <HAL_I2C_Master_Transmit+0x1f4>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fc34 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e0d3      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_I2C_Master_Transmit+0x50>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0cc      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d007      	beq.n	80016da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2221      	movs	r2, #33	; 0x21
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2210      	movs	r2, #16
 80016f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	893a      	ldrh	r2, [r7, #8]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_I2C_Master_Transmit+0x1f8>)
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800171c:	8979      	ldrh	r1, [r7, #10]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fac2 	bl	8001cac <I2C_MasterRequestWrite>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e08d      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001748:	e066      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fcae 	bl	80020b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b04      	cmp	r3, #4
 8001760:	d107      	bne.n	8001772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11b      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x188>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d017      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fc9e 	bl	8002132 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00d      	beq.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2b04      	cmp	r3, #4
 8001802:	d107      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e01a      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d194      	bne.n	800174a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00100002 	.word	0x00100002
 800185c:	ffff0000 	.word	0xffff0000

08001860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
 8001870:	4613      	mov	r3, r2
 8001872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fab4 	bl	8000de0 <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	f040 820b 	bne.w	8001c9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	497c      	ldr	r1, [pc, #496]	; (8001a84 <HAL_I2C_Master_Receive+0x224>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fb36 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e1fe      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2C_Master_Receive+0x50>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e1f7      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d007      	beq.n	80018d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2222      	movs	r2, #34	; 0x22
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2210      	movs	r2, #16
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_I2C_Master_Receive+0x228>)
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa3a 	bl	8001d98 <I2C_MasterRequestRead>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1b8      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d113      	bne.n	800195e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e18c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	2b01      	cmp	r3, #1
 8001964:	d11b      	bne.n	800199e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e16c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11b      	bne.n	80019de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	e14c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a04:	e138      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	f200 80f1 	bhi.w	8001bf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d123      	bne.n	8001a60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fbc9 	bl	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e139      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a5e:	e10b      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d14e      	bne.n	8001b06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <HAL_I2C_Master_Receive+0x22c>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa46 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e10e      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b04:	e0b8      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4966      	ldr	r1, [pc, #408]	; (8001ca8 <HAL_I2C_Master_Receive+0x448>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f9f7 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0bf      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	2200      	movs	r2, #0
 8001b6a:	494f      	ldr	r1, [pc, #316]	; (8001ca8 <HAL_I2C_Master_Receive+0x448>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f9c9 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e091      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf0:	e042      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fadc 	bl	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e04c      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d118      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aec2 	bne.w	8001a06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	00010004 	.word	0x00010004

08001cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d006      	beq.n	8001cd6 <I2C_MasterRequestWrite+0x2a>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d003      	beq.n	8001cd6 <I2C_MasterRequestWrite+0x2a>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cd4:	d108      	bne.n	8001ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e00b      	b.n	8001d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d107      	bne.n	8001d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f8f9 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e035      	b.n	8001d88 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d24:	d108      	bne.n	8001d38 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	e01b      	b.n	8001d70 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d38:	897b      	ldrh	r3, [r7, #10]
 8001d3a:	11db      	asrs	r3, r3, #7
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0306 	and.w	r3, r3, #6
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f063 030f 	orn	r3, r3, #15
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <I2C_MasterRequestWrite+0xe4>)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f92b 	bl	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e010      	b.n	8001d88 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d66:	897b      	ldrh	r3, [r7, #10]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <I2C_MasterRequestWrite+0xe8>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f91b 	bl	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	00010008 	.word	0x00010008
 8001d94:	00010002 	.word	0x00010002

08001d98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	460b      	mov	r3, r1
 8001da6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d006      	beq.n	8001dd2 <I2C_MasterRequestRead+0x3a>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d003      	beq.n	8001dd2 <I2C_MasterRequestRead+0x3a>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00b      	b.n	8001dfc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d107      	bne.n	8001dfc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f87b 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e06d      	b.n	8001ef4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e20:	d108      	bne.n	8001e34 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	e053      	b.n	8001edc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	11db      	asrs	r3, r3, #7
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0306 	and.w	r3, r3, #6
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 030f 	orn	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	492a      	ldr	r1, [pc, #168]	; (8001efc <I2C_MasterRequestRead+0x164>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f8ad 	bl	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e048      	b.n	8001ef4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e62:	897b      	ldrh	r3, [r7, #10]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4923      	ldr	r1, [pc, #140]	; (8001f00 <I2C_MasterRequestRead+0x168>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f89d 	bl	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e038      	b.n	8001ef4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f825 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e017      	b.n	8001ef4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	11db      	asrs	r3, r3, #7
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0306 	and.w	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f063 030e 	orn	r3, r3, #14
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <I2C_MasterRequestRead+0x168>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f865 	bl	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	00010008 	.word	0x00010008
 8001f00:	00010002 	.word	0x00010002

08001f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f14:	e025      	b.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d021      	beq.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7fe ff5f 	bl	8000de0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d116      	bne.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e023      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10d      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	e00c      	b.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d0b6      	beq.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc0:	e051      	b.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd0:	d123      	bne.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e046      	b.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d021      	beq.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7fe fedd 	bl	8000de0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d116      	bne.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e020      	b.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4013      	ands	r3, r2
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	e00b      	b.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d18d      	bne.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020bc:	e02d      	b.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f8ce 	bl	8002260 <I2C_IsAcknowledgeFailed>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e02d      	b.n	800212a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d021      	beq.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7fe fe83 	bl	8000de0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d116      	bne.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e007      	b.n	800212a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d1ca      	bne.n	80020be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800213e:	e02d      	b.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f88d 	bl	8002260 <I2C_IsAcknowledgeFailed>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e02d      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d021      	beq.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7fe fe42 	bl	8000de0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d1ca      	bne.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021c0:	e042      	b.n	8002248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d119      	bne.n	8002204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0210 	mvn.w	r2, #16
 80021d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e029      	b.n	8002258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002204:	f7fe fdec 	bl	8000de0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	429a      	cmp	r2, r3
 8002212:	d302      	bcc.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e007      	b.n	8002258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d1b5      	bne.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d11b      	bne.n	80022b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e22d      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d075      	beq.n	80023ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	4ba3      	ldr	r3, [pc, #652]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b9d      	ldr	r3, [pc, #628]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b99      	ldr	r3, [pc, #612]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e208      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x74>
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a90      	ldr	r2, [pc, #576]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a8a      	ldr	r2, [pc, #552]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002358:	4b84      	ldr	r3, [pc, #528]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a83      	ldr	r2, [pc, #524]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b81      	ldr	r3, [pc, #516]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a80      	ldr	r2, [pc, #512]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd32 	bl	8000de0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd2e 	bl	8000de0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1cd      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xc0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fd1e 	bl	8000de0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fd1a 	bl	8000de0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1b9      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b5f      	ldr	r3, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e18d      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4952      	ldr	r1, [pc, #328]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_OscConfig+0x2b0>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fcd3 	bl	8000de0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fccf 	bl	8000de0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e16e      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4940      	ldr	r1, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_OscConfig+0x2b0>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fcb2 	bl	8000de0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe fcae 	bl	8000de0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e14d      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d030      	beq.n	800250c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_OscConfig+0x2b4>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fc92 	bl	8000de0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fc8e 	bl	8000de0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e12d      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x200>
 80024de:	e015      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x2b4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fc7b 	bl	8000de0 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fc77 	bl	8000de0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e116      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a0 	beq.w	800265a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d121      	bne.n	800259a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe fc3d 	bl	8000de0 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e011      	b.n	800258e <HAL_RCC_OscConfig+0x2ce>
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	42470000 	.word	0x42470000
 8002574:	42470e80 	.word	0x42470e80
 8002578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257c:	f7fe fc30 	bl	8000de0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0cf      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
 80025a2:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x32a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a5c      	ldr	r2, [pc, #368]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x32a>
 80025d2:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a59      	ldr	r2, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fbf5 	bl	8000de0 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fbf1 	bl	8000de0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e08e      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x33a>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fbdf 	bl	8000de0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fbdb 	bl	8000de0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e078      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a3a      	ldr	r2, [pc, #232]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d064      	beq.n	800272c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d05c      	beq.n	8002728 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d141      	bne.n	80026fa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCC_OscConfig+0x480>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fbb0 	bl	8000de0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fbac 	bl	8000de0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04b      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	491d      	ldr	r1, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCC_OscConfig+0x480>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fb85 	bl	8000de0 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fb81 	bl	8000de0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e020      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x41a>
 80026f8:	e018      	b.n	800272c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_RCC_OscConfig+0x480>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fb6e 	bl	8000de0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fb6a 	bl	8000de0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e009      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_OscConfig+0x47c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x448>
 8002726:	e001      	b.n	800272c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0ca      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b6      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a57      	ldr	r2, [pc, #348]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a51      	ldr	r2, [pc, #324]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494c      	ldr	r1, [pc, #304]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07d      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06d      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e065      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4933      	ldr	r1, [pc, #204]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe fad4 	bl	8000de0 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fad0 	bl	8000de0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04d      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_RCC_ClockConfig+0x1b4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e030      	b.n	80028ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4915      	ldr	r1, [pc, #84]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490d      	ldr	r1, [pc, #52]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f81d 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	fa21 f303 	lsr.w	r3, r1, r3
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe fa36 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00
 80028fc:	40023800 	.word	0x40023800
 8002900:	08003020 	.word	0x08003020
 8002904:	20000014 	.word	0x20000014

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291e:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d007      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x32>
 800292a:	2b08      	cmp	r3, #8
 800292c:	d008      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x38>
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 808d 	bne.w	8002a4e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002936:	60bb      	str	r3, [r7, #8]
       break;
 8002938:	e08c      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x160>)
 800293c:	60bb      	str	r3, [r7, #8]
      break;
 800293e:	e089      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d023      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	f04f 0400 	mov.w	r4, #0
 8002960:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	ea03 0501 	and.w	r5, r3, r1
 800296c:	ea04 0602 	and.w	r6, r4, r2
 8002970:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002972:	fb02 f106 	mul.w	r1, r2, r6
 8002976:	2200      	movs	r2, #0
 8002978:	fb02 f205 	mul.w	r2, r2, r5
 800297c:	440a      	add	r2, r1
 800297e:	493a      	ldr	r1, [pc, #232]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002980:	fba5 0101 	umull	r0, r1, r5, r1
 8002984:	1853      	adds	r3, r2, r1
 8002986:	4619      	mov	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	461a      	mov	r2, r3
 8002990:	4623      	mov	r3, r4
 8002992:	f7fe f83f 	bl	8000a14 <__aeabi_uldivmod>
 8002996:	4603      	mov	r3, r0
 8002998:	460c      	mov	r4, r1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e049      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	f04f 0400 	mov.w	r4, #0
 80029a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	ea03 0501 	and.w	r5, r3, r1
 80029b4:	ea04 0602 	and.w	r6, r4, r2
 80029b8:	4629      	mov	r1, r5
 80029ba:	4632      	mov	r2, r6
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	0154      	lsls	r4, r2, #5
 80029c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ca:	014b      	lsls	r3, r1, #5
 80029cc:	4619      	mov	r1, r3
 80029ce:	4622      	mov	r2, r4
 80029d0:	1b49      	subs	r1, r1, r5
 80029d2:	eb62 0206 	sbc.w	r2, r2, r6
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	0194      	lsls	r4, r2, #6
 80029e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029e4:	018b      	lsls	r3, r1, #6
 80029e6:	1a5b      	subs	r3, r3, r1
 80029e8:	eb64 0402 	sbc.w	r4, r4, r2
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	00e2      	lsls	r2, r4, #3
 80029f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029fa:	00d9      	lsls	r1, r3, #3
 80029fc:	460b      	mov	r3, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	195b      	adds	r3, r3, r5
 8002a02:	eb44 0406 	adc.w	r4, r4, r6
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	02a2      	lsls	r2, r4, #10
 8002a10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a14:	0299      	lsls	r1, r3, #10
 8002a16:	460b      	mov	r3, r1
 8002a18:	4614      	mov	r4, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	f7fd fff4 	bl	8000a14 <__aeabi_uldivmod>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	60bb      	str	r3, [r7, #8]
      break;
 8002a4c:	e002      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a50:	60bb      	str	r3, [r7, #8]
      break;
 8002a52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a54:	68bb      	ldr	r3, [r7, #8]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	017d7840 	.word	0x017d7840

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08003030 	.word	0x08003030
 8002aac:	00000000 	.word	0x00000000

08002ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab6:	f7fe f92d 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aba:	f000 f87d 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002abe:	f000 f909 	bl	8002cd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ac2:	f000 f8d9 	bl	8002c78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS <<1, conf_buffer,   3, 500);
 8002ac6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2303      	movs	r3, #3
 8002ace:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <main+0xe8>)
 8002ad0:	2190      	movs	r1, #144	; 0x90
 8002ad2:	4832      	ldr	r0, [pc, #200]	; (8002b9c <main+0xec>)
 8002ad4:	f7fe fdc6 	bl	8001664 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS <<1, LO_cmp_buffer,   3, 500);
 8002ad8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2303      	movs	r3, #3
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <main+0xf0>)
 8002ae2:	2190      	movs	r1, #144	; 0x90
 8002ae4:	482d      	ldr	r0, [pc, #180]	; (8002b9c <main+0xec>)
 8002ae6:	f7fe fdbd 	bl	8001664 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS <<1, HI_cmp_buffer,   3, 500);
 8002aea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2303      	movs	r3, #3
 8002af2:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <main+0xf4>)
 8002af4:	2190      	movs	r1, #144	; 0x90
 8002af6:	4829      	ldr	r0, [pc, #164]	; (8002b9c <main+0xec>)
 8002af8:	f7fe fdb4 	bl	8001664 <HAL_I2C_Master_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS<<1, ADC_CONV_REG, 1, 500);
 8002afc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2301      	movs	r3, #1
 8002b04:	2200      	movs	r2, #0
 8002b06:	2190      	movs	r1, #144	; 0x90
 8002b08:	4824      	ldr	r0, [pc, #144]	; (8002b9c <main+0xec>)
 8002b0a:	f7fe fdab 	bl	8001664 <HAL_I2C_Master_Transmit>
	  HAL_Delay(25);
 8002b0e:	2019      	movs	r0, #25
 8002b10:	f7fe f972 	bl	8000df8 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, ADC_ADDRESS<<1, lux, 2, 500);
 8002b14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <main+0xf8>)
 8002b1e:	2190      	movs	r1, #144	; 0x90
 8002b20:	481e      	ldr	r0, [pc, #120]	; (8002b9c <main+0xec>)
 8002b22:	f7fe fe9d 	bl	8001860 <HAL_I2C_Master_Receive>

	  reading = (lux[0] << 8 | lux[1]);
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <main+0xf8>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <main+0xf8>)
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <main+0xfc>)
 8002b3c:	801a      	strh	r2, [r3, #0]
	  voltage = reading*(4.048)/(32768.0);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <main+0xfc>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fc9a 	bl	800047c <__aeabi_i2d>
 8002b48:	a311      	add	r3, pc, #68	; (adr r3, 8002b90 <main+0xe0>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fcff 	bl	8000550 <__aeabi_dmul>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	4618      	mov	r0, r3
 8002b58:	4621      	mov	r1, r4
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <main+0x100>)
 8002b60:	f7fd fe20 	bl	80007a4 <__aeabi_ddiv>
 8002b64:	4603      	mov	r3, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	f7fd ff02 	bl	8000974 <__aeabi_d2f>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <main+0x104>)
 8002b74:	601a      	str	r2, [r3, #0]

	  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS <<1, conf_buffer,   3, 500);
 8002b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <main+0xe8>)
 8002b80:	2190      	movs	r1, #144	; 0x90
 8002b82:	4806      	ldr	r0, [pc, #24]	; (8002b9c <main+0xec>)
 8002b84:	f7fe fd6e 	bl	8001664 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, ADC_ADDRESS<<1, ADC_CONV_REG, 1, 500);
 8002b88:	e7b8      	b.n	8002afc <main+0x4c>
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w
 8002b90:	e978d4fe 	.word	0xe978d4fe
 8002b94:	40103126 	.word	0x40103126
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	2000003c 	.word	0x2000003c
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	20000010 	.word	0x20000010
 8002ba8:	20000034 	.word	0x20000034
 8002bac:	20000036 	.word	0x20000036
 8002bb0:	40e00000 	.word	0x40e00000
 8002bb4:	20000090 	.word	0x20000090

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	; 0x50
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	2230      	movs	r2, #48	; 0x30
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fa16 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <SystemClock_Config+0xb8>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <SystemClock_Config+0xb8>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <SystemClock_Config+0xb8>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <SystemClock_Config+0xbc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <SystemClock_Config+0xbc>)
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <SystemClock_Config+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c20:	2310      	movs	r3, #16
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb47 	bl	80022c0 <HAL_RCC_OscConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002c38:	f000 f8a6 	bl	8002d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fd74 	bl	8002744 <HAL_RCC_ClockConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002c62:	f000 f891 	bl	8002d88 <Error_Handler>
  }
}
 8002c66:	bf00      	nop
 8002c68:	3750      	adds	r7, #80	; 0x50
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000

08002c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <MX_I2C1_Init+0x54>)
 8002c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <MX_I2C1_Init+0x58>)
 8002c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb6:	f7fe fbad 	bl	8001414 <HAL_I2C_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cc0:	f000 f862 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	2000003c 	.word	0x2000003c
 8002ccc:	40005400 	.word	0x40005400
 8002cd0:	000186a0 	.word	0x000186a0

08002cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <MX_GPIO_Init+0xa8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MyLED_GPIO_Port, MyLED_Pin, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2120      	movs	r1, #32
 8002d26:	4816      	ldr	r0, [pc, #88]	; (8002d80 <MX_GPIO_Init+0xac>)
 8002d28:	f7fe fb1c 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MyLED_Pin */
  GPIO_InitStruct.Pin = MyLED_Pin;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d30:	2301      	movs	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MyLED_GPIO_Port, &GPIO_InitStruct);
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	4619      	mov	r1, r3
 8002d42:	480f      	ldr	r0, [pc, #60]	; (8002d80 <MX_GPIO_Init+0xac>)
 8002d44:	f7fe f98c 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : Conversion_done_Pin */
  GPIO_InitStruct.Pin = Conversion_done_Pin;
 8002d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <MX_GPIO_Init+0xb0>)
 8002d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Conversion_done_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4808      	ldr	r0, [pc, #32]	; (8002d80 <MX_GPIO_Init+0xac>)
 8002d5e:	f7fe f97f 	bl	8001060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2017      	movs	r0, #23
 8002d68:	f7fe f943 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d6c:	2017      	movs	r0, #23
 8002d6e:	f7fe f95c 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 8002d72:	bf00      	nop
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	10110000 	.word	0x10110000

08002d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_MspInit+0x4c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_MspInit+0x4c>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_MspInit+0x4c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_MspInit+0x4c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_I2C_MspInit+0x84>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12c      	bne.n	8002e64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2c:	2312      	movs	r3, #18
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <HAL_I2C_MspInit+0x8c>)
 8002e44:	f7fe f90c 	bl	8001060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e56:	6413      	str	r3, [r2, #64]	; 0x40
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40005400 	.word	0x40005400
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020400 	.word	0x40020400

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f7fd ff74 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002ed8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002edc:	f7fe fa76 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
//  HAL_I2C_Master_Receive(&hi2c1, 0x4800, lux, 2, 25);

  HAL_GPIO_TogglePin(MyLED_GPIO_Port, MyLED_Pin);
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <EXTI9_5_IRQHandler+0x18>)
 8002ee4:	f7fe fa57 	bl	8001396 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020000 	.word	0x40020000

08002ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <SystemInit+0x60>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <SystemInit+0x60>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <SystemInit+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <SystemInit+0x64>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <SystemInit+0x64>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <SystemInit+0x64>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <SystemInit+0x64>)
 8002f1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <SystemInit+0x64>)
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <SystemInit+0x68>)
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <SystemInit+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <SystemInit+0x64>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <SystemInit+0x64>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <SystemInit+0x60>)
 8002f40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f44:	609a      	str	r2, [r3, #8]
#endif
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	24003010 	.word	0x24003010

08002f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f62:	e003      	b.n	8002f6c <LoopCopyDataInit>

08002f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f6a:	3104      	adds	r1, #4

08002f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f74:	d3f6      	bcc.n	8002f64 <CopyDataInit>
  ldr  r2, =_sbss
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f78:	e002      	b.n	8002f80 <LoopFillZerobss>

08002f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f7c:	f842 3b04 	str.w	r3, [r2], #4

08002f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f84:	d3f9      	bcc.n	8002f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f86:	f7ff ffb3 	bl	8002ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f8a:	f000 f811 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f8e:	f7ff fd8f 	bl	8002ab0 <main>
  bx  lr    
 8002f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f94:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002f98:	08003048 	.word	0x08003048
  ldr  r0, =_sdata
 8002f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fa0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002fa4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002fa8:	20000094 	.word	0x20000094

08002fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fac:	e7fe      	b.n	8002fac <ADC_IRQHandler>
	...

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0d      	ldr	r6, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1ba4      	subs	r4, r4, r6
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2500      	movs	r5, #0
 8002fbc:	42a5      	cmp	r5, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4e0b      	ldr	r6, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 f820 	bl	8003008 <_init>
 8002fc8:	1ba4      	subs	r4, r4, r6
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2500      	movs	r5, #0
 8002fce:	42a5      	cmp	r5, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd8:	4798      	blx	r3
 8002fda:	3501      	adds	r5, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe2:	4798      	blx	r3
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003040 	.word	0x08003040
 8002fec:	08003040 	.word	0x08003040
 8002ff0:	08003040 	.word	0x08003040
 8002ff4:	08003044 	.word	0x08003044

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
