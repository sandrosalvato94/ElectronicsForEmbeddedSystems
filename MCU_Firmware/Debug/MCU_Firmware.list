
MCU_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005510  08005510  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000009c  080055b4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080055b4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002048  00000000  00000000  0002c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022928  00000000  00000000  0002fb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bc7  00000000  00000000  000524b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9e29  00000000  00000000  0005c07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  00125f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080053b8 	.word	0x080053b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	080053b8 	.word	0x080053b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <ov7670_init>:
static void ov7670_write(uint8_t regAddr, uint8_t data);
static void ov7670_read(uint8_t regAddr, uint8_t *data);


void ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8000df8:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <ov7670_init+0x74>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <ov7670_init+0x78>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <ov7670_init+0x7c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <ov7670_init+0x80>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(ResetCamera_GPIO_Port, ResetCamera_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	4816      	ldr	r0, [pc, #88]	; (8000e70 <ov7670_init+0x84>)
 8000e16:	f001 f80b 	bl	8001e30 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	; 0x64
 8000e1c:	f000 f91c 	bl	8001058 <HAL_Delay>
  HAL_GPIO_WritePin(ResetCamera_GPIO_Port, ResetCamera_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <ov7670_init+0x84>)
 8000e26:	f001 f803 	bl	8001e30 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f000 f914 	bl	8001058 <HAL_Delay>

 // ov7670_write(0x12, 0x80);  // RESET
  HAL_Delay(30);
 8000e30:	201e      	movs	r0, #30
 8000e32:	f000 f911 	bl	8001058 <HAL_Delay>

  uint8_t buffer[4];
  buffer[0] = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	753b      	strb	r3, [r7, #20]
  ov7670_read(0x0b, buffer);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	200b      	movs	r0, #11
 8000e42:	f000 f871 	bl	8000f28 <ov7670_read>
  ov7670_write(0x12, 0x80);  // RESET
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f000 f84f 	bl	8000eec <ov7670_write>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000e4e:	7d3b      	ldrb	r3, [r7, #20]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <ov7670_init+0x88>)
 8000e54:	f003 fbcc 	bl	80045f0 <iprintf>

}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000b8 	.word	0x200000b8
 8000e64:	200000bc 	.word	0x200000bc
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	200000c4 	.word	0x200000c4
 8000e70:	40021800 	.word	0x40021800
 8000e74:	080053d0 	.word	0x080053d0

08000e78 <ov7670_config>:

void ov7670_config(uint32_t mode)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000e80:	f000 f828 	bl	8000ed4 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	2012      	movs	r0, #18
 8000e88:	f000 f830 	bl	8000eec <ov7670_write>
  HAL_Delay(30);
 8000e8c:	201e      	movs	r0, #30
 8000e8e:	f000 f8e3 	bl	8001058 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e011      	b.n	8000ebc <ov7670_config+0x44>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <ov7670_config+0x58>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <ov7670_config+0x58>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f000 f81e 	bl	8000eec <ov7670_write>
    HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 f8d1 	bl	8001058 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <ov7670_config+0x58>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d1e7      	bne.n	8000e98 <ov7670_config+0x20>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	080053f4 	.word	0x080053f4

08000ed4 <ov7670_stopCap>:
  }

}

void ov7670_stopCap()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <ov7670_stopCap+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f9ef 	bl	80012c0 <HAL_DCMI_Stop>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000b8 	.word	0x200000b8

08000eec <ov7670_write>:


//
///*** Internal Function Defines ***/
static void ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR<<1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <ov7670_write+0x38>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2142      	movs	r1, #66	; 0x42
 8000f14:	f001 fbc6 	bl	80026a4 <HAL_I2C_Mem_Write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f1c:	bf00      	nop
}
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000c0 	.word	0x200000c0

08000f28 <ov7670_read>:

static void ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR<<1, &regAddr, 1, 100);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <ov7670_read+0x48>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	1dfa      	adds	r2, r7, #7
 8000f3a:	2364      	movs	r3, #100	; 0x64
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2142      	movs	r1, #66	; 0x42
 8000f42:	f001 f86f 	bl	8002024 <HAL_I2C_Master_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR<<1, data, 1, 100);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <ov7670_read+0x48>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	2142      	movs	r1, #66	; 0x42
 8000f58:	f001 f972 	bl	8002240 <HAL_I2C_Master_Receive>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f66:	bf00      	nop
}
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000c0 	.word	0x200000c0

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f94d 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f003 f818 	bl	8003fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f965 	bl	80012a6 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f92d 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000034 	.word	0x20000034
 8001010:	20000004 	.word	0x20000004
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000004 	.word	0x20000004
 800103c:	200000e4 	.word	0x200000e4

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000e4 	.word	0x200000e4

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_Delay+0x40>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000004 	.word	0x20000004

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_DCMI_Stop+0xb0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	4a29      	ldr	r2, [pc, #164]	; (8001374 <HAL_DCMI_Stop+0xb4>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_DCMI_Stop+0x2a>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e03e      	b.n	8001368 <HAL_DCMI_Stop+0xa8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	60ba      	str	r2, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d108      	bne.n	8001326 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f043 0220 	orr.w	r2, r3, #32
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	73fb      	strb	r3, [r7, #15]
      break;
 8001324:	e006      	b.n	8001334 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ea      	bne.n	800130a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001342:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f935 	bl	80015b8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000034 	.word	0x20000034
 8001374:	92492493 	.word	0x92492493

08001378 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e062      	b.n	8001450 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f002 fe48 	bl	800402c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_DCMI_Init+0xe0>)
 80013b0:	400b      	ands	r3, r1
 80013b2:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80013c8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80013d4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80013e0:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80013ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80013f8:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d112      	bne.n	8001430 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7f1b      	ldrb	r3, [r3, #28]
 800140e:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7f5b      	ldrb	r3, [r3, #29]
 8001414:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001416:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7f9b      	ldrb	r3, [r3, #30]
 800141c:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800141e:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7fdb      	ldrb	r3, [r3, #31]
 8001426:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800142c:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800142e:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 021e 	orr.w	r2, r2, #30
 800143e:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	ffe0f007 	.word	0xffe0f007

0800145c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fdea 	bl	8001040 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e099      	b.n	80015ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001498:	e00f      	b.n	80014ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149a:	f7ff fdd1 	bl	8001040 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d908      	bls.n	80014ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e078      	b.n	80015ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e8      	bne.n	800149a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_DMA_Init+0x158>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2b04      	cmp	r3, #4
 8001512:	d107      	bne.n	8001524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4313      	orrs	r3, r2
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f023 0307 	bic.w	r3, r3, #7
 800153a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	4313      	orrs	r3, r2
 8001544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b04      	cmp	r3, #4
 800154c:	d117      	bne.n	800157e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00e      	beq.n	800157e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa59 	bl	8001a18 <DMA_CheckFifoParam>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800157a:	2301      	movs	r3, #1
 800157c:	e016      	b.n	80015ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fa10 	bl	80019ac <DMA_CalcBaseAndBitshift>
 800158c:	4603      	mov	r3, r0
 800158e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	f010803f 	.word	0xf010803f

080015b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c6:	f7ff fd3b 	bl	8001040 <HAL_GetTick>
 80015ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d008      	beq.n	80015ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e052      	b.n	8001690 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0216 	bic.w	r2, r2, #22
 80015f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001608:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_DMA_Abort+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163a:	e013      	b.n	8001664 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163c:	f7ff fd00 	bl	8001040 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b05      	cmp	r3, #5
 8001648:	d90c      	bls.n	8001664 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2203      	movs	r2, #3
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e015      	b.n	8001690 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1e4      	bne.n	800163c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	223f      	movs	r2, #63	; 0x3f
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_DMA_IRQHandler+0x258>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a92      	ldr	r2, [pc, #584]	; (80018f4 <HAL_DMA_IRQHandler+0x25c>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0a9b      	lsrs	r3, r3, #10
 80016b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2208      	movs	r2, #8
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0204 	bic.w	r2, r2, #4
 80016ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2208      	movs	r2, #8
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d012      	beq.n	800173a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2201      	movs	r2, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2204      	movs	r2, #4
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	2204      	movs	r2, #4
 800175e:	409a      	lsls	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f043 0204 	orr.w	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2210      	movs	r2, #16
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d043      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03c      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	2210      	movs	r2, #16
 8001794:	409a      	lsls	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d018      	beq.n	80017da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e01f      	b.n	8001808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
 80017d8:	e016      	b.n	8001808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d107      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0208 	bic.w	r2, r2, #8
 80017f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2220      	movs	r2, #32
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 808e 	beq.w	8001936 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8086 	beq.w	8001936 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2220      	movs	r2, #32
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b05      	cmp	r3, #5
 8001840:	d136      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0216 	bic.w	r2, r2, #22
 8001850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <HAL_DMA_IRQHandler+0x1da>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0208 	bic.w	r2, r2, #8
 8001880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	223f      	movs	r2, #63	; 0x3f
 8001888:	409a      	lsls	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d07d      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
        }
        return;
 80018ae:	e078      	b.n	80019a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d01c      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d108      	bne.n	80018de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d030      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e02b      	b.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d027      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
 80018ee:	e022      	b.n	8001936 <HAL_DMA_IRQHandler+0x29e>
 80018f0:	20000034 	.word	0x20000034
 80018f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0210 	bic.w	r2, r2, #16
 8001914:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	2b00      	cmp	r3, #0
 800193c:	d032      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d022      	beq.n	8001990 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	429a      	cmp	r2, r3
 800196c:	d307      	bcc.n	800197e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f2      	bne.n	8001962 <HAL_DMA_IRQHandler+0x2ca>
 800197c:	e000      	b.n	8001980 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800197e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e000      	b.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019a2:	bf00      	nop
    }
  }
}
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3b10      	subs	r3, #16
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <DMA_CalcBaseAndBitshift+0x64>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <DMA_CalcBaseAndBitshift+0x68>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d909      	bls.n	80019ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	1d1a      	adds	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58
 80019ec:	e007      	b.n	80019fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	aaaaaaab 	.word	0xaaaaaaab
 8001a14:	08005450 	.word	0x08005450

08001a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11f      	bne.n	8001a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d855      	bhi.n	8001ae4 <DMA_CheckFifoParam+0xcc>
 8001a38:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <DMA_CheckFifoParam+0x28>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001a63 	.word	0x08001a63
 8001a48:	08001a51 	.word	0x08001a51
 8001a4c:	08001ae5 	.word	0x08001ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d045      	beq.n	8001ae8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a60:	e042      	b.n	8001ae8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a6a:	d13f      	bne.n	8001aec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a70:	e03c      	b.n	8001aec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7a:	d121      	bne.n	8001ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d836      	bhi.n	8001af0 <DMA_CheckFifoParam+0xd8>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <DMA_CheckFifoParam+0x70>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001a9f 	.word	0x08001a9f
 8001a90:	08001a99 	.word	0x08001a99
 8001a94:	08001ab1 	.word	0x08001ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a9c:	e02f      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aae:	e021      	b.n	8001af4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab8:	d11e      	bne.n	8001af8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001abe:	e01b      	b.n	8001af8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d902      	bls.n	8001acc <DMA_CheckFifoParam+0xb4>
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d003      	beq.n	8001ad2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001aca:	e018      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e015      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00e      	beq.n	8001afc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae2:	e00b      	b.n	8001afc <DMA_CheckFifoParam+0xe4>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e00a      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001ae8:	bf00      	nop
 8001aea:	e008      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001aec:	bf00      	nop
 8001aee:	e006      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001af0:	bf00      	nop
 8001af2:	e004      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001af4:	bf00      	nop
 8001af6:	e002      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;   
 8001af8:	bf00      	nop
 8001afa:	e000      	b.n	8001afe <DMA_CheckFifoParam+0xe6>
      break;
 8001afc:	bf00      	nop
    }
  } 
  
  return status; 
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e165      	b.n	8001df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8154 	bne.w	8001dee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x4a>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d123      	bne.n	8001b9e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_GPIO_Init+0xe6>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80ae 	beq.w	8001dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x2fc>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_GPIO_Init+0x2fc>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_GPIO_Init+0x2fc>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a57      	ldr	r2, [pc, #348]	; (8001e0c <HAL_GPIO_Init+0x300>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d025      	beq.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x308>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <HAL_GPIO_Init+0x216>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_Init+0x212>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x314>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x20a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x318>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x31c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x202>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00c      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e00a      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x21c>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4934      	ldr	r1, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x300>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6a:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d94:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f ae96 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3724      	adds	r7, #36	; 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0c8      	b.n	8002010 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f002 f9ca 	bl	800422c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f001 f9e2 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_I2C_Init+0x1b4>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a53      	ldr	r2, [pc, #332]	; (800201c <HAL_I2C_Init+0x1b8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d802      	bhi.n	8001eda <HAL_I2C_Init+0x76>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	e009      	b.n	8001eee <HAL_I2C_Init+0x8a>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_I2C_Init+0x1bc>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	3301      	adds	r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_I2C_Init+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d812      	bhi.n	8001f24 <HAL_I2C_Init+0xc0>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d906      	bls.n	8001f20 <HAL_I2C_Init+0xbc>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	e045      	b.n	8001fac <HAL_I2C_Init+0x148>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e043      	b.n	8001fac <HAL_I2C_Init+0x148>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_I2C_Init+0xe8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e010      	b.n	8001f6e <HAL_I2C_Init+0x10a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x112>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01a      	b.n	8001fac <HAL_I2C_Init+0x148>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <HAL_I2C_Init+0x130>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	e00b      	b.n	8001fac <HAL_I2C_Init+0x148>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69d9      	ldr	r1, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6919      	ldr	r1, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6959      	ldr	r1, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	431bde83 	.word	0x431bde83
 800201c:	000186a0 	.word	0x000186a0
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
 8002034:	4613      	mov	r3, r2
 8002036:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800203c:	f7ff f800 	bl	8001040 <HAL_GetTick>
 8002040:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	f040 80ee 	bne.w	800222c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2319      	movs	r3, #25
 8002056:	2201      	movs	r2, #1
 8002058:	4977      	ldr	r1, [pc, #476]	; (8002238 <HAL_I2C_Master_Transmit+0x214>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fe0a 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8002066:	2302      	movs	r3, #2
 8002068:	e0e1      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x54>
 8002074:	2302      	movs	r3, #2
 8002076:	e0da      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d007      	beq.n	800209e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2221      	movs	r2, #33	; 0x21
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2210      	movs	r2, #16
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	893a      	ldrh	r2, [r7, #8]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_I2C_Master_Transmit+0x218>)
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	6a3a      	ldr	r2, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fbe6 	bl	80028b8 <I2C_MasterRequestWrite>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00f      	beq.n	8002112 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d105      	bne.n	8002106 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e093      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e08d      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002128:	e066      	b.n	80021f8 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fe5f 	bl	8002df2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00f      	beq.n	800215a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b04      	cmp	r3, #4
 8002140:	d109      	bne.n	8002156 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06b      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e069      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6251      	str	r1, [r2, #36]	; 0x24
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d119      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x1a4>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c59      	adds	r1, r3, #1
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	6251      	str	r1, [r2, #36]	; 0x24
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fe4d 	bl	8002e6c <I2C_WaitOnBTFFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00f      	beq.n	80021f8 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d109      	bne.n	80021f4 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ee:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01c      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e01a      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d194      	bne.n	800212a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	00100002 	.word	0x00100002
 800223c:	ffff0000 	.word	0xffff0000

08002240 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
 8002250:	4613      	mov	r3, r2
 8002252:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002258:	f7fe fef2 	bl	8001040 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 8215 	bne.w	8002696 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4985      	ldr	r1, [pc, #532]	; (800248c <HAL_I2C_Master_Receive+0x24c>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fcfc 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e208      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2C_Master_Receive+0x54>
 8002290:	2302      	movs	r3, #2
 8002292:	e201      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d007      	beq.n	80022ba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2222      	movs	r2, #34	; 0x22
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2210      	movs	r2, #16
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_I2C_Master_Receive+0x250>)
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb5a 	bl	80029bc <I2C_MasterRequestRead>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00f      	beq.n	800232e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b04      	cmp	r3, #4
 8002314:	d105      	bne.n	8002322 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1ba      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1b4      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e188      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d11b      	bne.n	800239e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e168      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11b      	bne.n	80023de <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	e148      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002404:	e134      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b03      	cmp	r3, #3
 800240c:	f200 80eb 	bhi.w	80025e6 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b01      	cmp	r3, #1
 8002416:	d127      	bne.n	8002468 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fd62 	bl	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b20      	cmp	r3, #32
 800242e:	d101      	bne.n	8002434 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e131      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e12f      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6918      	ldr	r0, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	6251      	str	r1, [r2, #36]	; 0x24
 8002448:	b2c2      	uxtb	r2, r0
 800244a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002466:	e103      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b02      	cmp	r3, #2
 800246e:	d14a      	bne.n	8002506 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	2200      	movs	r2, #0
 8002478:	4906      	ldr	r1, [pc, #24]	; (8002494 <HAL_I2C_Master_Receive+0x254>)
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fbfa 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e106      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
 800248a:	bf00      	nop
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000
 8002494:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6918      	ldr	r0, [r3, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	6251      	str	r1, [r2, #36]	; 0x24
 80024b8:	b2c2      	uxtb	r2, r0
 80024ba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6918      	ldr	r0, [r3, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c59      	adds	r1, r3, #1
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6251      	str	r1, [r2, #36]	; 0x24
 80024e6:	b2c2      	uxtb	r2, r0
 80024e8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002504:	e0b4      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	2200      	movs	r2, #0
 800250e:	4964      	ldr	r1, [pc, #400]	; (80026a0 <HAL_I2C_Master_Receive+0x460>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fbaf 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0bb      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6918      	ldr	r0, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	6251      	str	r1, [r2, #36]	; 0x24
 8002540:	b2c2      	uxtb	r2, r0
 8002542:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	2200      	movs	r2, #0
 8002566:	494e      	ldr	r1, [pc, #312]	; (80026a0 <HAL_I2C_Master_Receive+0x460>)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fb83 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e08f      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6918      	ldr	r0, [r3, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6251      	str	r1, [r2, #36]	; 0x24
 8002598:	b2c2      	uxtb	r2, r0
 800259a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6918      	ldr	r0, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c59      	adds	r1, r3, #1
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6251      	str	r1, [r2, #36]	; 0x24
 80025c6:	b2c2      	uxtb	r2, r0
 80025c8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e4:	e044      	b.n	8002670 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fc7b 	bl	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e04a      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e048      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6918      	ldr	r0, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c59      	adds	r1, r3, #1
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6251      	str	r1, [r2, #36]	; 0x24
 8002616:	b2c2      	uxtb	r2, r0
 8002618:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d116      	bne.n	8002670 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6918      	ldr	r0, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6251      	str	r1, [r2, #36]	; 0x24
 8002652:	b2c2      	uxtb	r2, r0
 8002654:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f aec6 	bne.w	8002406 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	00010004 	.word	0x00010004

080026a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	460b      	mov	r3, r1
 80026b8:	813b      	strh	r3, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c2:	f7fe fcbd 	bl	8001040 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	f040 80e7 	bne.w	80028a4 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2319      	movs	r3, #25
 80026dc:	2201      	movs	r2, #1
 80026de:	4974      	ldr	r1, [pc, #464]	; (80028b0 <HAL_I2C_Mem_Write+0x20c>)
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fac7 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0da      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Mem_Write+0x5a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0d3      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d007      	beq.n	8002724 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2221      	movs	r2, #33	; 0x21
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a56      	ldr	r2, [pc, #344]	; (80028b4 <HAL_I2C_Mem_Write+0x210>)
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002766:	88f8      	ldrh	r0, [r7, #6]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	8979      	ldrh	r1, [r7, #10]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4603      	mov	r3, r0
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f9e8 	bl	8002b4c <I2C_RequestMemoryWrite>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d05e      	beq.n	8002840 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b04      	cmp	r3, #4
 8002788:	d105      	bne.n	8002796 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e087      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e081      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb23 	bl	8002df2 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d109      	bne.n	80027ce <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e069      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6251      	str	r1, [r2, #36]	; 0x24
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d119      	bne.n	8002840 <HAL_I2C_Mem_Write+0x19c>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	6251      	str	r1, [r2, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ac      	bne.n	80027a2 <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fb0d 	bl	8002e6c <I2C_WaitOnBTFFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00f      	beq.n	8002878 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b04      	cmp	r3, #4
 800285e:	d109      	bne.n	8002874 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e018      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e016      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000

080028b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d006      	beq.n	80028e2 <I2C_MasterRequestWrite+0x2a>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d003      	beq.n	80028e2 <I2C_MasterRequestWrite+0x2a>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e0:	d108      	bne.n	80028f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e00b      	b.n	800290c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d107      	bne.n	800290c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f9ab 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e041      	b.n	80029ac <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002930:	d108      	bne.n	8002944 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e021      	b.n	8002988 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	11db      	asrs	r3, r3, #7
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f063 030f 	orn	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4914      	ldr	r1, [pc, #80]	; (80029b4 <I2C_MasterRequestWrite+0xfc>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9d7 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b04      	cmp	r3, #4
 8002974:	d101      	bne.n	800297a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e018      	b.n	80029ac <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e016      	b.n	80029ac <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	490a      	ldr	r1, [pc, #40]	; (80029b8 <I2C_MasterRequestWrite+0x100>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f9c1 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d101      	bne.n	80029a6 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e002      	b.n	80029ac <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e000      	b.n	80029ac <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	00010008 	.word	0x00010008
 80029b8:	00010002 	.word	0x00010002

080029bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d006      	beq.n	80029f6 <I2C_MasterRequestRead+0x3a>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d003      	beq.n	80029f6 <I2C_MasterRequestRead+0x3a>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e00b      	b.n	8002a20 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	2b11      	cmp	r3, #17
 8002a0e:	d107      	bne.n	8002a20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f921 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e07f      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a44:	d108      	bne.n	8002a58 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	e05f      	b.n	8002b18 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	11db      	asrs	r3, r3, #7
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0306 	and.w	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f063 030f 	orn	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4933      	ldr	r1, [pc, #204]	; (8002b44 <I2C_MasterRequestRead+0x188>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f94d 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d101      	bne.n	8002a8e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e056      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e054      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4929      	ldr	r1, [pc, #164]	; (8002b48 <I2C_MasterRequestRead+0x18c>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f937 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d101      	bne.n	8002aba <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e040      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e03e      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f8bf 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e01d      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030e 	orn	r3, r3, #14
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	490a      	ldr	r1, [pc, #40]	; (8002b48 <I2C_MasterRequestRead+0x18c>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f8f9 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d101      	bne.n	8002b36 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e002      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e000      	b.n	8002b3c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010008 	.word	0x00010008
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f876 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e069      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	4932      	ldr	r1, [pc, #200]	; (8002c70 <I2C_RequestMemoryWrite+0x124>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f8b4 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d101      	bne.n	8002bc0 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e052      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e050      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f907 	bl	8002df2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d109      	bne.n	8002c06 <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e02f      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e02d      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c10:	893b      	ldrh	r3, [r7, #8]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e023      	b.n	8002c64 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f8df 	bl	8002df2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d109      	bne.n	8002c56 <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e007      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e005      	b.n	8002c66 <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5a:	893b      	ldrh	r3, [r7, #8]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	00010002 	.word	0x00010002

08002c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002c84:	e01f      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d01b      	beq.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c94:	f7fe f9d4 	bl	8001040 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d210      	bcs.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e023      	b.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10d      	bne.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x78>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	e00c      	b.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x92>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d0bc      	beq.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d24:	e040      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d11c      	bne.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2204      	movs	r2, #4
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e03c      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d017      	beq.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002d7e:	f7fe f95f 	bl	8001040 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e020      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10c      	bne.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e00b      	b.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d19e      	bne.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfe:	e029      	b.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f8ba 	bl	8002f7a <I2C_IsAcknowledgeFailed>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e029      	b.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d01d      	beq.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e1e:	f7fe f90f 	bl	8001040 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d212      	bcs.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e007      	b.n	8002e64 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d1ce      	bne.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e78:	e029      	b.n	8002ece <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f87d 	bl	8002f7a <I2C_IsAcknowledgeFailed>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e029      	b.n	8002ede <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d01d      	beq.n	8002ece <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e98:	f7fe f8d2 	bl	8001040 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d212      	bcs.n	8002ece <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e007      	b.n	8002ede <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d1ce      	bne.n	8002e7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef2:	e036      	b.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d114      	bne.n	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f06f 0210 	mvn.w	r2, #16
 8002f0a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e022      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002f32:	f7fe f885 	bl	8001040 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20f      	bcs.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e007      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d1c1      	bne.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d114      	bne.n	8002fbc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f9a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0ca      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b62      	ldr	r3, [pc, #392]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b6      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b52      	ldr	r3, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494c      	ldr	r1, [pc, #304]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b46      	ldr	r3, [pc, #280]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07d      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06d      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e065      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4933      	ldr	r1, [pc, #204]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7fd ffc0 	bl	8001040 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fd ffbc 	bl	8001040 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04d      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d20c      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_RCC_ClockConfig+0x1b4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e030      	b.n	8003176 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4915      	ldr	r1, [pc, #84]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490d      	ldr	r1, [pc, #52]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f8a5 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003156:	4601      	mov	r1, r0
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	fa21 f303 	lsr.w	r3, r1, r3
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800316e:	2000      	movs	r0, #0
 8003170:	f7fd ff22 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08005458 	.word	0x08005458
 800318c:	20000034 	.word	0x20000034

08003190 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d129      	bne.n	80031f6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80031be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	4619      	mov	r1, r3
 80031da:	481f      	ldr	r0, [pc, #124]	; (8003258 <HAL_RCC_MCOConfig+0xc8>)
 80031dc:	f7fe fc96 	bl	8001b0c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80031e0:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	4919      	ldr	r1, [pc, #100]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80031f4:	e029      	b.n	800324a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	480b      	ldr	r0, [pc, #44]	; (800325c <HAL_RCC_MCOConfig+0xcc>)
 8003230:	f7fe fc6c 	bl	8001b0c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	430b      	orrs	r3, r1
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
}
 800324a:	bf00      	nop
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020800 	.word	0x40020800

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000034 	.word	0x20000034

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4601      	mov	r1, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08005468 	.word	0x08005468

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ba:	4b9f      	ldr	r3, [pc, #636]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	f200 8130 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x288>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	08003305 	.word	0x08003305
 80032d4:	08003529 	.word	0x08003529
 80032d8:	08003529 	.word	0x08003529
 80032dc:	08003529 	.word	0x08003529
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	08003529 	.word	0x08003529
 80032e8:	08003529 	.word	0x08003529
 80032ec:	08003529 	.word	0x08003529
 80032f0:	08003311 	.word	0x08003311
 80032f4:	08003529 	.word	0x08003529
 80032f8:	08003529 	.word	0x08003529
 80032fc:	08003529 	.word	0x08003529
 8003300:	0800341f 	.word	0x0800341f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_GetSysClockFreq+0x29c>)
 8003306:	613b      	str	r3, [r7, #16]
       break;
 8003308:	e111      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800330c:	613b      	str	r3, [r7, #16]
      break;
 800330e:	e10e      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b89      	ldr	r3, [pc, #548]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b87      	ldr	r3, [pc, #540]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d023      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	ea03 0501 	and.w	r5, r3, r1
 800333c:	ea04 0602 	and.w	r6, r4, r2
 8003340:	4a7f      	ldr	r2, [pc, #508]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003342:	fb02 f106 	mul.w	r1, r2, r6
 8003346:	2200      	movs	r2, #0
 8003348:	fb02 f205 	mul.w	r2, r2, r5
 800334c:	440a      	add	r2, r1
 800334e:	497c      	ldr	r1, [pc, #496]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003350:	fba5 0101 	umull	r0, r1, r5, r1
 8003354:	1853      	adds	r3, r2, r1
 8003356:	4619      	mov	r1, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	461a      	mov	r2, r3
 8003360:	4623      	mov	r3, r4
 8003362:	f7fd fbc3 	bl	8000aec <__aeabi_uldivmod>
 8003366:	4603      	mov	r3, r0
 8003368:	460c      	mov	r4, r1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e049      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b72      	ldr	r3, [pc, #456]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	f240 11ff 	movw	r1, #511	; 0x1ff
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	ea03 0501 	and.w	r5, r3, r1
 8003384:	ea04 0602 	and.w	r6, r4, r2
 8003388:	4629      	mov	r1, r5
 800338a:	4632      	mov	r2, r6
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	f04f 0400 	mov.w	r4, #0
 8003394:	0154      	lsls	r4, r2, #5
 8003396:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800339a:	014b      	lsls	r3, r1, #5
 800339c:	4619      	mov	r1, r3
 800339e:	4622      	mov	r2, r4
 80033a0:	1b49      	subs	r1, r1, r5
 80033a2:	eb62 0206 	sbc.w	r2, r2, r6
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f04f 0400 	mov.w	r4, #0
 80033ae:	0194      	lsls	r4, r2, #6
 80033b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033b4:	018b      	lsls	r3, r1, #6
 80033b6:	1a5b      	subs	r3, r3, r1
 80033b8:	eb64 0402 	sbc.w	r4, r4, r2
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	00e2      	lsls	r2, r4, #3
 80033c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ca:	00d9      	lsls	r1, r3, #3
 80033cc:	460b      	mov	r3, r1
 80033ce:	4614      	mov	r4, r2
 80033d0:	195b      	adds	r3, r3, r5
 80033d2:	eb44 0406 	adc.w	r4, r4, r6
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	02a2      	lsls	r2, r4, #10
 80033e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033e4:	0299      	lsls	r1, r3, #10
 80033e6:	460b      	mov	r3, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	4621      	mov	r1, r4
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f04f 0400 	mov.w	r4, #0
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	f7fd fb78 	bl	8000aec <__aeabi_uldivmod>
 80033fc:	4603      	mov	r3, r0
 80033fe:	460c      	mov	r4, r1
 8003400:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	3301      	adds	r3, #1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	613b      	str	r3, [r7, #16]
      break;
 800341c:	e087      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003426:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003428:	4b43      	ldr	r3, [pc, #268]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	f04f 0400 	mov.w	r4, #0
 800343e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	ea03 0501 	and.w	r5, r3, r1
 800344a:	ea04 0602 	and.w	r6, r4, r2
 800344e:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003450:	fb02 f106 	mul.w	r1, r2, r6
 8003454:	2200      	movs	r2, #0
 8003456:	fb02 f205 	mul.w	r2, r2, r5
 800345a:	440a      	add	r2, r1
 800345c:	4938      	ldr	r1, [pc, #224]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800345e:	fba5 0101 	umull	r0, r1, r5, r1
 8003462:	1853      	adds	r3, r2, r1
 8003464:	4619      	mov	r1, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	f7fd fb3c 	bl	8000aec <__aeabi_uldivmod>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e049      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	f04f 0400 	mov.w	r4, #0
 8003486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	ea03 0501 	and.w	r5, r3, r1
 8003492:	ea04 0602 	and.w	r6, r4, r2
 8003496:	4629      	mov	r1, r5
 8003498:	4632      	mov	r2, r6
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	0154      	lsls	r4, r2, #5
 80034a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a8:	014b      	lsls	r3, r1, #5
 80034aa:	4619      	mov	r1, r3
 80034ac:	4622      	mov	r2, r4
 80034ae:	1b49      	subs	r1, r1, r5
 80034b0:	eb62 0206 	sbc.w	r2, r2, r6
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	0194      	lsls	r4, r2, #6
 80034be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	1a5b      	subs	r3, r3, r1
 80034c6:	eb64 0402 	sbc.w	r4, r4, r2
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	00e2      	lsls	r2, r4, #3
 80034d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034d8:	00d9      	lsls	r1, r3, #3
 80034da:	460b      	mov	r3, r1
 80034dc:	4614      	mov	r4, r2
 80034de:	195b      	adds	r3, r3, r5
 80034e0:	eb44 0406 	adc.w	r4, r4, r6
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	02a2      	lsls	r2, r4, #10
 80034ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034f2:	0299      	lsls	r1, r3, #10
 80034f4:	460b      	mov	r3, r1
 80034f6:	4614      	mov	r4, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	4621      	mov	r1, r4
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f04f 0400 	mov.w	r4, #0
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fd faf1 	bl	8000aec <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_GetSysClockFreq+0x298>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0f1b      	lsrs	r3, r3, #28
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	613b      	str	r3, [r7, #16]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCC_GetSysClockFreq+0x29c>)
 800352a:	613b      	str	r3, [r7, #16]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	693b      	ldr	r3, [r7, #16]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	017d7840 	.word	0x017d7840

08003544 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8083 	beq.w	8003664 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800355e:	4b95      	ldr	r3, [pc, #596]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800356a:	4b92      	ldr	r3, [pc, #584]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003572:	2b08      	cmp	r3, #8
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003576:	4b8f      	ldr	r3, [pc, #572]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003582:	d00c      	beq.n	800359e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003584:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003590:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d05b      	beq.n	8003662 <HAL_RCC_OscConfig+0x11e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d157      	bne.n	8003662 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e216      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x8a>
 80035c0:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7b      	ldr	r2, [pc, #492]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e01d      	b.n	800360a <HAL_RCC_OscConfig+0xc6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0xae>
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a75      	ldr	r2, [pc, #468]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a72      	ldr	r2, [pc, #456]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0xc6>
 80035f2:	4b70      	ldr	r3, [pc, #448]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6f      	ldr	r2, [pc, #444]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80035f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6c      	ldr	r2, [pc, #432]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d013      	beq.n	800363a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fd fd15 	bl	8001040 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361a:	f7fd fd11 	bl	8001040 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1db      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0xd6>
 8003638:	e014      	b.n	8003664 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd fd01 	bl	8001040 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003642:	f7fd fcfd 	bl	8001040 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1c7      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003654:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCC_OscConfig+0xfe>
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003662:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06f      	beq.n	8003750 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800367c:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003684:	2b08      	cmp	r3, #8
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003688:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003694:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d11c      	bne.n	80036da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a0:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_OscConfig+0x180>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e18f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4938      	ldr	r1, [pc, #224]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d8:	e03a      	b.n	8003750 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e2:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HAL_RCC_OscConfig+0x274>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd fcaa 	bl	8001040 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f0:	f7fd fca6 	bl	8001040 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e170      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4925      	ldr	r1, [pc, #148]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
 8003722:	e015      	b.n	8003750 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_OscConfig+0x274>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd fc89 	bl	8001040 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003732:	f7fd fc85 	bl	8001040 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e14f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d037      	beq.n	80037cc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x278>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd fc69 	bl	8001040 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fd fc65 	bl	8001040 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e12f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x22e>
 8003790:	e01c      	b.n	80037cc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_OscConfig+0x278>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fc52 	bl	8001040 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379e:	e00f      	b.n	80037c0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fd fc4e 	bl	8001040 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d908      	bls.n	80037c0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e118      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470000 	.word	0x42470000
 80037bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	4b8a      	ldr	r3, [pc, #552]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e9      	bne.n	80037a0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8097 	beq.w	8003908 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037de:	4b83      	ldr	r3, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b7f      	ldr	r3, [pc, #508]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a7e      	ldr	r2, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <HAL_RCC_OscConfig+0x4ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b76      	ldr	r3, [pc, #472]	; (80039f0 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fd fc0d 	bl	8001040 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fd fc09 	bl	8001040 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0d3      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <HAL_RCC_OscConfig+0x4ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x31a>
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	e01c      	b.n	8003898 <HAL_RCC_OscConfig+0x354>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x33c>
 8003866:	4b61      	ldr	r3, [pc, #388]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a60      	ldr	r2, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x354>
 8003880:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a59      	ldr	r2, [pc, #356]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	4b57      	ldr	r3, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003892:	f023 0304 	bic.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fbce 	bl	8001040 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fd fbca 	bl	8001040 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e092      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038be:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ee      	beq.n	80038a8 <HAL_RCC_OscConfig+0x364>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fbb8 	bl	8001040 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd fbb4 	bl	8001040 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e07c      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	4b40      	ldr	r3, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ee      	bne.n	80038d4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d068      	beq.n	80039e2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d060      	beq.n	80039de <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d145      	bne.n	80039b0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x4b0>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd fb89 	bl	8001040 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd fb85 	bl	8001040 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e04f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	019b      	lsls	r3, r3, #6
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	3b01      	subs	r3, #1
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	071b      	lsls	r3, r3, #28
 800397c:	491b      	ldr	r1, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_RCC_OscConfig+0x4b0>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fd fb5a 	bl	8001040 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fd fb56 	bl	8001040 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e020      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x44c>
 80039ae:	e018      	b.n	80039e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x4b0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fb43 	bl	8001040 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd fb3f 	bl	8001040 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e009      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x4a8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x47a>
 80039dc:	e001      	b.n	80039e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060

080039f8 <ADC_init>:

static uint8_t tmp_reg;


void ADC_init(I2C_HandleTypeDef *p_hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
	adc_i2c = p_hi2c;
 8003a00:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <ADC_init+0xc8>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6013      	str	r3, [r2, #0]

	tmp_reg = 0;
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <ADC_init+0xcc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]

	tmp_reg |= (ADC_LOW_POW_MODE_BIT<<7); //bit 7
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <ADC_init+0xcc>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <ADC_init+0xcc>)
 8003a18:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_INP_MUX_CONF_BIT<<4); //bit 6, 5, 4
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <ADC_init+0xcc>)
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <ADC_init+0xcc>)
 8003a20:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_PRG_GAIN_AMP_BIT<<1); //bit 3, 2, 1
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <ADC_init+0xcc>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <ADC_init+0xcc>)
 8003a2e:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DEV_OP_MODE_BIT); //bit 0
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <ADC_init+0xcc>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <ADC_init+0xcc>)
 8003a3c:	701a      	strb	r2, [r3, #0]
	conf_buffer[1] = tmp_reg;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <ADC_init+0xcc>)
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <ADC_init+0xd0>)
 8003a44:	705a      	strb	r2, [r3, #1]


	tmp_reg = 0;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <ADC_init+0xcc>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DATA_RATE_BIT)<<5; //bit 7, 6, 5
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <ADC_init+0xcc>)
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <ADC_init+0xcc>)
 8003a52:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_MODE_BIT)<<4;  //bit 4
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <ADC_init+0xcc>)
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <ADC_init+0xcc>)
 8003a5a:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_POL_BIT)<<3;   //bit 3
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <ADC_init+0xcc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <ADC_init+0xcc>)
 8003a68:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_LAT_BIT)<<2;   //bit 2
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <ADC_init+0xcc>)
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <ADC_init+0xcc>)
 8003a70:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_QUEUE_BIT)<<1; //bit 1, 0
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <ADC_init+0xcc>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <ADC_init+0xcc>)
 8003a78:	701a      	strb	r2, [r3, #0]
	conf_buffer[2] = tmp_reg;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <ADC_init+0xcc>)
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <ADC_init+0xd0>)
 8003a80:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,     3, 250);
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <ADC_init+0xc8>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	23fa      	movs	r3, #250	; 0xfa
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ac8 <ADC_init+0xd0>)
 8003a8e:	2190      	movs	r1, #144	; 0x90
 8003a90:	f7fe fac8 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, LO_cmp_buffer,   3, 250);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <ADC_init+0xc8>)
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	23fa      	movs	r3, #250	; 0xfa
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <ADC_init+0xd4>)
 8003aa0:	2190      	movs	r1, #144	; 0x90
 8003aa2:	f7fe fabf 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, HI_cmp_buffer,   3, 250);
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <ADC_init+0xc8>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	23fa      	movs	r3, #250	; 0xfa
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2303      	movs	r3, #3
 8003ab0:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <ADC_init+0xd8>)
 8003ab2:	2190      	movs	r1, #144	; 0x90
 8003ab4:	f7fe fab6 	bl	8002024 <HAL_I2C_Master_Transmit>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200000c8 	.word	0x200000c8
 8003ac4:	200000d4 	.word	0x200000d4
 8003ac8:	20000008 	.word	0x20000008
 8003acc:	2000000c 	.word	0x2000000c
 8003ad0:	20000010 	.word	0x20000010

08003ad4 <ADC_do_conversion>:

float ADC_do_conversion()
{
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,   3, 250); //command itself
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <ADC_do_conversion+0xb4>)
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	23fa      	movs	r3, #250	; 0xfa
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <ADC_do_conversion+0xb8>)
 8003ae6:	2190      	movs	r1, #144	; 0x90
 8003ae8:	f7fe fa9c 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS<<1, ADC_CONV_REG, 1, 250);
 8003aec:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <ADC_do_conversion+0xb4>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	23fa      	movs	r3, #250	; 0xfa
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2301      	movs	r3, #1
 8003af6:	2200      	movs	r2, #0
 8003af8:	2190      	movs	r1, #144	; 0x90
 8003afa:	f7fe fa93 	bl	8002024 <HAL_I2C_Master_Transmit>
    HAL_Delay(25);
 8003afe:	2019      	movs	r0, #25
 8003b00:	f7fd faaa 	bl	8001058 <HAL_Delay>
    HAL_I2C_Master_Receive(adc_i2c, ADC_ADDRESS<<1, lux, 2, 250);
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <ADC_do_conversion+0xb4>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	23fa      	movs	r3, #250	; 0xfa
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <ADC_do_conversion+0xbc>)
 8003b10:	2190      	movs	r1, #144	; 0x90
 8003b12:	f7fe fb95 	bl	8002240 <HAL_I2C_Master_Receive>

    reading = (lux[0] << 8 | lux[1]);
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <ADC_do_conversion+0xbc>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	b21a      	sxth	r2, r3
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <ADC_do_conversion+0xbc>)
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	4313      	orrs	r3, r2
 8003b26:	b21b      	sxth	r3, r3
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <ADC_do_conversion+0xc0>)
 8003b2c:	801a      	strh	r2, [r3, #0]
    voltage = (float)reading*((gains[ADC_PRG_GAIN_AMP_BIT-1])/(32768.0));
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <ADC_do_conversion+0xc0>)
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	ee17 0a90 	vmov	r0, s15
 8003b3e:	f7fc fd1b 	bl	8000578 <__aeabi_f2d>
 8003b42:	4604      	mov	r4, r0
 8003b44:	460d      	mov	r5, r1
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <ADC_do_conversion+0xc4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fd14 	bl	8000578 <__aeabi_f2d>
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <ADC_do_conversion+0xc8>)
 8003b56:	f7fc fe91 	bl	800087c <__aeabi_ddiv>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc fd61 	bl	8000628 <__aeabi_dmul>
 8003b66:	4603      	mov	r3, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f7fc ff6d 	bl	8000a4c <__aeabi_d2f>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <ADC_do_conversion+0xcc>)
 8003b76:	601a      	str	r2, [r3, #0]

    return voltage;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <ADC_do_conversion+0xcc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	ee07 3a90 	vmov	s15, r3
}
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	200000c8 	.word	0x200000c8
 8003b8c:	20000008 	.word	0x20000008
 8003b90:	200000cc 	.word	0x200000cc
 8003b94:	200000ce 	.word	0x200000ce
 8003b98:	20000014 	.word	0x20000014
 8003b9c:	40e00000 	.word	0x40e00000
 8003ba0:	200000d0 	.word	0x200000d0

08003ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003baa:	f7fd f9e3 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bae:	f000 f827 	bl	8003c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bb2:	f000 f947 	bl	8003e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bb6:	f000 f925 	bl	8003e04 <MX_DMA_Init>
  MX_I2C1_Init();
 8003bba:	f000 f8c7 	bl	8003d4c <MX_I2C1_Init>
  MX_DCMI_Init();
 8003bbe:	f000 f891 	bl	8003ce4 <MX_DCMI_Init>
  MX_I2C2_Init();
 8003bc2:	f000 f8f1 	bl	8003da8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2C_IsDeviceReady(&hi2c2, 0x42<<1, 1000, 500);
  //hi2c2.Instance->CR1 |= 1<<10;
  //HAL_I2C_Master_Transmit(&hi2c2, 0x42<<1, conf, 2, 300);
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <main+0x4c>)
 8003bc8:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <main+0x50>)
 8003bca:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <main+0x54>)
 8003bcc:	f7fd f90e 	bl	8000dec <ov7670_init>
  ADC_init(&hi2c1);
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <main+0x58>)
 8003bd2:	f7ff ff11 	bl	80039f8 <ADC_init>
  ov7670_config(0);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fd f94e 	bl	8000e78 <ov7670_config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    measure = ADC_do_conversion();
 8003bdc:	f7ff ff7a 	bl	8003ad4 <ADC_do_conversion>
 8003be0:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_Delay(1000);
 8003be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be8:	f7fd fa36 	bl	8001058 <HAL_Delay>
    measure = ADC_do_conversion();
 8003bec:	e7f6      	b.n	8003bdc <main+0x38>
 8003bee:	bf00      	nop
 8003bf0:	2000013c 	.word	0x2000013c
 8003bf4:	20000190 	.word	0x20000190
 8003bf8:	200002f0 	.word	0x200002f0
 8003bfc:	200000e8 	.word	0x200000e8

08003c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b094      	sub	sp, #80	; 0x50
 8003c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c06:	f107 031c 	add.w	r3, r7, #28
 8003c0a:	2234      	movs	r2, #52	; 0x34
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fce6 	bl	80045e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c14:	f107 0308 	add.w	r3, r7, #8
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	2300      	movs	r3, #0
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <SystemClock_Config+0xdc>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <SystemClock_Config+0xdc>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6413      	str	r3, [r2, #64]	; 0x40
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <SystemClock_Config+0xdc>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c40:	2300      	movs	r3, #0
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <SystemClock_Config+0xe0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <SystemClock_Config+0xe0>)
 8003c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <SystemClock_Config+0xe0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c60:	2302      	movs	r3, #2
 8003c62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c68:	2310      	movs	r3, #16
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003c74:	2310      	movs	r3, #16
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003c78:	23c0      	movs	r3, #192	; 0xc0
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c80:	2304      	movs	r3, #4
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c84:	2302      	movs	r3, #2
 8003c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fc59 	bl	8003544 <HAL_RCC_OscConfig>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003c98:	f000 f998 	bl	8003fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f988 	bl	8002fcc <HAL_RCC_ClockConfig>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003cc2:	f000 f983 	bl	8003fcc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8003cc6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003cca:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7ff fa5e 	bl	8003190 <HAL_RCC_MCOConfig>
}
 8003cd4:	bf00      	nop
 8003cd6:	3750      	adds	r7, #80	; 0x50
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000

08003ce4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <MX_DCMI_Init+0x64>)
 8003cec:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003d30:	4804      	ldr	r0, [pc, #16]	; (8003d44 <MX_DCMI_Init+0x60>)
 8003d32:	f7fd fb21 	bl	8001378 <HAL_DCMI_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8003d3c:	f000 f946 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200002f0 	.word	0x200002f0
 8003d48:	50050000 	.word	0x50050000

08003d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <MX_I2C1_Init+0x54>)
 8003d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <MX_I2C1_Init+0x58>)
 8003d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d88:	4804      	ldr	r0, [pc, #16]	; (8003d9c <MX_I2C1_Init+0x50>)
 8003d8a:	f7fe f86b 	bl	8001e64 <HAL_I2C_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d94:	f000 f91a 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	200000e8 	.word	0x200000e8
 8003da0:	40005400 	.word	0x40005400
 8003da4:	000186a0 	.word	0x000186a0

08003da8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <MX_I2C2_Init+0x54>)
 8003db0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <MX_I2C2_Init+0x58>)
 8003db6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003de4:	4804      	ldr	r0, [pc, #16]	; (8003df8 <MX_I2C2_Init+0x50>)
 8003de6:	f7fe f83d 	bl	8001e64 <HAL_I2C_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003df0:	f000 f8ec 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000013c 	.word	0x2000013c
 8003dfc:	40005800 	.word	0x40005800
 8003e00:	000186a0 	.word	0x000186a0

08003e04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <MX_DMA_Init+0x3c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <MX_DMA_Init+0x3c>)
 8003e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <MX_DMA_Init+0x3c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	2039      	movs	r0, #57	; 0x39
 8003e2c:	f7fd fa11 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003e30:	2039      	movs	r0, #57	; 0x39
 8003e32:	f7fd fa2a 	bl	800128a <HAL_NVIC_EnableIRQ>

}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4a:	f107 031c 	add.w	r3, r7, #28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a54      	ldr	r2, [pc, #336]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a4d      	ldr	r2, [pc, #308]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e80:	f043 0320 	orr.w	r3, r3, #32
 8003e84:	6313      	str	r3, [r2, #48]	; 0x30
 8003e86:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a3f      	ldr	r2, [pc, #252]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a38      	ldr	r2, [pc, #224]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a31      	ldr	r2, [pc, #196]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <MX_GPIO_Init+0x170>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ResetCamera_GPIO_Port, ResetCamera_Pin, GPIO_PIN_RESET);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2101      	movs	r1, #1
 8003f22:	4825      	ldr	r0, [pc, #148]	; (8003fb8 <MX_GPIO_Init+0x174>)
 8003f24:	f7fd ff84 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_LED_GPIO_Port, ADC_LED_Pin, GPIO_PIN_RESET);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f2e:	4823      	ldr	r0, [pc, #140]	; (8003fbc <MX_GPIO_Init+0x178>)
 8003f30:	f7fd ff7e 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <MX_GPIO_Init+0x17c>)
 8003f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f42:	f107 031c 	add.w	r3, r7, #28
 8003f46:	4619      	mov	r1, r3
 8003f48:	481e      	ldr	r0, [pc, #120]	; (8003fc4 <MX_GPIO_Init+0x180>)
 8003f4a:	f7fd fddf 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetCamera_Pin */
  GPIO_InitStruct.Pin = ResetCamera_Pin;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f52:	2301      	movs	r3, #1
 8003f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ResetCamera_GPIO_Port, &GPIO_InitStruct);
 8003f5e:	f107 031c 	add.w	r3, r7, #28
 8003f62:	4619      	mov	r1, r3
 8003f64:	4814      	ldr	r0, [pc, #80]	; (8003fb8 <MX_GPIO_Init+0x174>)
 8003f66:	f7fd fdd1 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_LED_Pin */
  GPIO_InitStruct.Pin = ADC_LED_Pin;
 8003f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f70:	2301      	movs	r3, #1
 8003f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ADC_LED_GPIO_Port, &GPIO_InitStruct);
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	4619      	mov	r1, r3
 8003f82:	480e      	ldr	r0, [pc, #56]	; (8003fbc <MX_GPIO_Init+0x178>)
 8003f84:	f7fd fdc2 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9e:	f107 031c 	add.w	r3, r7, #28
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4808      	ldr	r0, [pc, #32]	; (8003fc8 <MX_GPIO_Init+0x184>)
 8003fa6:	f7fd fdb1 	bl	8001b0c <HAL_GPIO_Init>

}
 8003faa:	bf00      	nop
 8003fac:	3730      	adds	r7, #48	; 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	10110000 	.word	0x10110000
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40020000 	.word	0x40020000

08003fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_MspInit+0x4c>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_MspInit+0x4c>)
 8003fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_MspInit+0x4c>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_MspInit+0x4c>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a08      	ldr	r2, [pc, #32]	; (8004028 <HAL_MspInit+0x4c>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_MspInit+0x4c>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6f      	ldr	r2, [pc, #444]	; (8004208 <HAL_DCMI_MspInit+0x1dc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	f040 80d7 	bne.w	80041fe <HAL_DCMI_MspInit+0x1d2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	4b6d      	ldr	r3, [pc, #436]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	4a6c      	ldr	r2, [pc, #432]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6353      	str	r3, [r2, #52]	; 0x34
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a65      	ldr	r2, [pc, #404]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 8004076:	f043 0310 	orr.w	r3, r3, #16
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4a5e      	ldr	r2, [pc, #376]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6313      	str	r3, [r2, #48]	; 0x30
 8004098:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	4b58      	ldr	r3, [pc, #352]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6313      	str	r3, [r2, #48]	; 0x30
 80040b4:	4b55      	ldr	r3, [pc, #340]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	4b51      	ldr	r3, [pc, #324]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	4a50      	ldr	r2, [pc, #320]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040ca:	f043 0308 	orr.w	r3, r3, #8
 80040ce:	6313      	str	r3, [r2, #48]	; 0x30
 80040d0:	4b4e      	ldr	r3, [pc, #312]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	4b4a      	ldr	r3, [pc, #296]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a49      	ldr	r2, [pc, #292]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_DCMI_MspInit+0x1e0>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80040f8:	2370      	movs	r3, #112	; 0x70
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fc:	2302      	movs	r3, #2
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004104:	2300      	movs	r3, #0
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004108:	230d      	movs	r3, #13
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800410c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004110:	4619      	mov	r1, r3
 8004112:	483f      	ldr	r0, [pc, #252]	; (8004210 <HAL_DCMI_MspInit+0x1e4>)
 8004114:	f7fd fcfa 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8004118:	2350      	movs	r3, #80	; 0x50
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411c:	2302      	movs	r3, #2
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004124:	2300      	movs	r3, #0
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004128:	230d      	movs	r3, #13
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004130:	4619      	mov	r1, r3
 8004132:	4838      	ldr	r0, [pc, #224]	; (8004214 <HAL_DCMI_MspInit+0x1e8>)
 8004134:	f7fd fcea 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004138:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004146:	2300      	movs	r3, #0
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800414a:	230d      	movs	r3, #13
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004152:	4619      	mov	r1, r3
 8004154:	4830      	ldr	r0, [pc, #192]	; (8004218 <HAL_DCMI_MspInit+0x1ec>)
 8004156:	f7fd fcd9 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800415a:	2308      	movs	r3, #8
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415e:	2302      	movs	r3, #2
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004166:	2300      	movs	r3, #0
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800416a:	230d      	movs	r3, #13
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004172:	4619      	mov	r1, r3
 8004174:	4829      	ldr	r0, [pc, #164]	; (800421c <HAL_DCMI_MspInit+0x1f0>)
 8004176:	f7fd fcc9 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800417a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800418c:	230d      	movs	r3, #13
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	4619      	mov	r1, r3
 8004196:	4822      	ldr	r0, [pc, #136]	; (8004220 <HAL_DCMI_MspInit+0x1f4>)
 8004198:	f7fd fcb8 	bl	8001b0c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800419c:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 800419e:	4a22      	ldr	r2, [pc, #136]	; (8004228 <HAL_DCMI_MspInit+0x1fc>)
 80041a0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b0:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041bc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041be:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041c4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041cc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80041d6:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80041e2:	4810      	ldr	r0, [pc, #64]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041e4:	f7fd f93a 	bl	800145c <HAL_DMA_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_DCMI_MspInit+0x1c6>
    {
      Error_Handler();
 80041ee:	f7ff feed 	bl	8003fcc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041f6:	649a      	str	r2, [r3, #72]	; 0x48
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_DCMI_MspInit+0x1f8>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80041fe:	bf00      	nop
 8004200:	3738      	adds	r7, #56	; 0x38
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	50050000 	.word	0x50050000
 800420c:	40023800 	.word	0x40023800
 8004210:	40021000 	.word	0x40021000
 8004214:	40020000 	.word	0x40020000
 8004218:	40020800 	.word	0x40020800
 800421c:	40020c00 	.word	0x40020c00
 8004220:	40021800 	.word	0x40021800
 8004224:	20000190 	.word	0x20000190
 8004228:	40026428 	.word	0x40026428

0800422c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a32      	ldr	r2, [pc, #200]	; (8004314 <HAL_I2C_MspInit+0xe8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12d      	bne.n	80042aa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a30      	ldr	r2, [pc, #192]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800426a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800426e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004270:	2312      	movs	r3, #18
 8004272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004278:	2303      	movs	r3, #3
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800427c:	2304      	movs	r3, #4
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004280:	f107 031c 	add.w	r3, r7, #28
 8004284:	4619      	mov	r1, r3
 8004286:	4825      	ldr	r0, [pc, #148]	; (800431c <HAL_I2C_MspInit+0xf0>)
 8004288:	f7fd fc40 	bl	8001b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a20      	ldr	r2, [pc, #128]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_I2C_MspInit+0xec>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042a8:	e030      	b.n	800430c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_I2C_MspInit+0xf4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d12b      	bne.n	800430c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HAL_I2C_MspInit+0xec>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_I2C_MspInit+0xec>)
 80042be:	f043 0320 	orr.w	r3, r3, #32
 80042c2:	6313      	str	r3, [r2, #48]	; 0x30
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_I2C_MspInit+0xec>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042d0:	2303      	movs	r3, #3
 80042d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042d4:	2312      	movs	r3, #18
 80042d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d8:	2301      	movs	r3, #1
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042e0:	2304      	movs	r3, #4
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042e4:	f107 031c 	add.w	r3, r7, #28
 80042e8:	4619      	mov	r1, r3
 80042ea:	480e      	ldr	r0, [pc, #56]	; (8004324 <HAL_I2C_MspInit+0xf8>)
 80042ec:	f7fd fc0e 	bl	8001b0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_I2C_MspInit+0xec>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4a07      	ldr	r2, [pc, #28]	; (8004318 <HAL_I2C_MspInit+0xec>)
 80042fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_I2C_MspInit+0xec>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	bf00      	nop
 800430e:	3730      	adds	r7, #48	; 0x30
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40005400 	.word	0x40005400
 8004318:	40023800 	.word	0x40023800
 800431c:	40020400 	.word	0x40020400
 8004320:	40005800 	.word	0x40005800
 8004324:	40021400 	.word	0x40021400

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800433a:	e7fe      	b.n	800433a <HardFault_Handler+0x4>

0800433c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004340:	e7fe      	b.n	8004340 <MemManage_Handler+0x4>

08004342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004346:	e7fe      	b.n	8004346 <BusFault_Handler+0x4>

08004348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800434c:	e7fe      	b.n	800434c <UsageFault_Handler+0x4>

0800434e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800437c:	f7fc fe4c 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}

08004384 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA2_Stream1_IRQHandler+0x10>)
 800438a:	f7fd f985 	bl	8001698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000190 	.word	0x20000190

08004398 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e00a      	b.n	80043c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043aa:	f3af 8000 	nop.w
 80043ae:	4601      	mov	r1, r0
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	60ba      	str	r2, [r7, #8]
 80043b6:	b2ca      	uxtb	r2, r1
 80043b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3301      	adds	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	dbf0      	blt.n	80043aa <_read+0x12>
	}

return len;
 80043c8:	687b      	ldr	r3, [r7, #4]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e009      	b.n	80043f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	60ba      	str	r2, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3301      	adds	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	dbf1      	blt.n	80043e4 <_write+0x12>
	}
	return len;
 8004400:	687b      	ldr	r3, [r7, #4]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <_close>:

int _close(int file)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	return -1;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004432:	605a      	str	r2, [r3, #4]
	return 0;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_isatty>:

int _isatty(int file)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
	return 1;
 800444a:	2301      	movs	r3, #1
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
	return 0;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <_sbrk+0x50>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <_sbrk+0x16>
		heap_end = &end;
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <_sbrk+0x50>)
 8004486:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <_sbrk+0x54>)
 8004488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800448a:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <_sbrk+0x50>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <_sbrk+0x50>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	466a      	mov	r2, sp
 800449a:	4293      	cmp	r3, r2
 800449c:	d907      	bls.n	80044ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800449e:	f000 f875 	bl	800458c <__errno>
 80044a2:	4602      	mov	r2, r0
 80044a4:	230c      	movs	r3, #12
 80044a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e006      	b.n	80044bc <_sbrk+0x48>
	}

	heap_end += incr;
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_sbrk+0x50>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <_sbrk+0x50>)
 80044b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200000d8 	.word	0x200000d8
 80044c8:	20000348 	.word	0x20000348

080044cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044d0:	4b16      	ldr	r3, [pc, #88]	; (800452c <SystemInit+0x60>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <SystemInit+0x60>)
 80044d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <SystemInit+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a12      	ldr	r2, [pc, #72]	; (8004530 <SystemInit+0x64>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <SystemInit+0x64>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <SystemInit+0x64>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <SystemInit+0x64>)
 80044f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <SystemInit+0x64>)
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <SystemInit+0x68>)
 8004506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <SystemInit+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <SystemInit+0x64>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <SystemInit+0x64>)
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <SystemInit+0x60>)
 800451c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004520:	609a      	str	r2, [r3, #8]
#endif
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	40023800 	.word	0x40023800
 8004534:	24003010 	.word	0x24003010

08004538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800453c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800453e:	e003      	b.n	8004548 <LoopCopyDataInit>

08004540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004546:	3104      	adds	r1, #4

08004548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800454c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800454e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004550:	d3f6      	bcc.n	8004540 <CopyDataInit>
  ldr  r2, =_sbss
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004554:	e002      	b.n	800455c <LoopFillZerobss>

08004556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004558:	f842 3b04 	str.w	r3, [r2], #4

0800455c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800455e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004560:	d3f9      	bcc.n	8004556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004562:	f7ff ffb3 	bl	80044cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004566:	f000 f817 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800456a:	f7ff fb1b 	bl	8003ba4 <main>
  bx  lr    
 800456e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004570:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004574:	08005518 	.word	0x08005518
  ldr  r0, =_sdata
 8004578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800457c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8004580:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8004584:	20000344 	.word	0x20000344

08004588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004588:	e7fe      	b.n	8004588 <ADC_IRQHandler>
	...

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000038 	.word	0x20000038

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4e0d      	ldr	r6, [pc, #52]	; (80045d0 <__libc_init_array+0x38>)
 800459c:	4c0d      	ldr	r4, [pc, #52]	; (80045d4 <__libc_init_array+0x3c>)
 800459e:	1ba4      	subs	r4, r4, r6
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	2500      	movs	r5, #0
 80045a4:	42a5      	cmp	r5, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	4e0b      	ldr	r6, [pc, #44]	; (80045d8 <__libc_init_array+0x40>)
 80045aa:	4c0c      	ldr	r4, [pc, #48]	; (80045dc <__libc_init_array+0x44>)
 80045ac:	f000 ff04 	bl	80053b8 <_init>
 80045b0:	1ba4      	subs	r4, r4, r6
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	2500      	movs	r5, #0
 80045b6:	42a5      	cmp	r5, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c0:	4798      	blx	r3
 80045c2:	3501      	adds	r5, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ca:	4798      	blx	r3
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	08005510 	.word	0x08005510
 80045d4:	08005510 	.word	0x08005510
 80045d8:	08005510 	.word	0x08005510
 80045dc:	08005514 	.word	0x08005514

080045e0 <memset>:
 80045e0:	4402      	add	r2, r0
 80045e2:	4603      	mov	r3, r0
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d100      	bne.n	80045ea <memset+0xa>
 80045e8:	4770      	bx	lr
 80045ea:	f803 1b01 	strb.w	r1, [r3], #1
 80045ee:	e7f9      	b.n	80045e4 <memset+0x4>

080045f0 <iprintf>:
 80045f0:	b40f      	push	{r0, r1, r2, r3}
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <iprintf+0x2c>)
 80045f4:	b513      	push	{r0, r1, r4, lr}
 80045f6:	681c      	ldr	r4, [r3, #0]
 80045f8:	b124      	cbz	r4, 8004604 <iprintf+0x14>
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	b913      	cbnz	r3, 8004604 <iprintf+0x14>
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f84e 	bl	80046a0 <__sinit>
 8004604:	ab05      	add	r3, sp, #20
 8004606:	9a04      	ldr	r2, [sp, #16]
 8004608:	68a1      	ldr	r1, [r4, #8]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	4620      	mov	r0, r4
 800460e:	f000 f955 	bl	80048bc <_vfiprintf_r>
 8004612:	b002      	add	sp, #8
 8004614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004618:	b004      	add	sp, #16
 800461a:	4770      	bx	lr
 800461c:	20000038 	.word	0x20000038

08004620 <std>:
 8004620:	2300      	movs	r3, #0
 8004622:	b510      	push	{r4, lr}
 8004624:	4604      	mov	r4, r0
 8004626:	e9c0 3300 	strd	r3, r3, [r0]
 800462a:	6083      	str	r3, [r0, #8]
 800462c:	8181      	strh	r1, [r0, #12]
 800462e:	6643      	str	r3, [r0, #100]	; 0x64
 8004630:	81c2      	strh	r2, [r0, #14]
 8004632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004636:	6183      	str	r3, [r0, #24]
 8004638:	4619      	mov	r1, r3
 800463a:	2208      	movs	r2, #8
 800463c:	305c      	adds	r0, #92	; 0x5c
 800463e:	f7ff ffcf 	bl	80045e0 <memset>
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <std+0x38>)
 8004644:	6263      	str	r3, [r4, #36]	; 0x24
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <std+0x3c>)
 8004648:	62a3      	str	r3, [r4, #40]	; 0x28
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <std+0x40>)
 800464c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <std+0x44>)
 8004650:	6224      	str	r4, [r4, #32]
 8004652:	6323      	str	r3, [r4, #48]	; 0x30
 8004654:	bd10      	pop	{r4, pc}
 8004656:	bf00      	nop
 8004658:	08004e19 	.word	0x08004e19
 800465c:	08004e3b 	.word	0x08004e3b
 8004660:	08004e73 	.word	0x08004e73
 8004664:	08004e97 	.word	0x08004e97

08004668 <_cleanup_r>:
 8004668:	4901      	ldr	r1, [pc, #4]	; (8004670 <_cleanup_r+0x8>)
 800466a:	f000 b885 	b.w	8004778 <_fwalk_reent>
 800466e:	bf00      	nop
 8004670:	08005171 	.word	0x08005171

08004674 <__sfmoreglue>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	1e4a      	subs	r2, r1, #1
 8004678:	2568      	movs	r5, #104	; 0x68
 800467a:	4355      	muls	r5, r2
 800467c:	460e      	mov	r6, r1
 800467e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004682:	f000 f897 	bl	80047b4 <_malloc_r>
 8004686:	4604      	mov	r4, r0
 8004688:	b140      	cbz	r0, 800469c <__sfmoreglue+0x28>
 800468a:	2100      	movs	r1, #0
 800468c:	e9c0 1600 	strd	r1, r6, [r0]
 8004690:	300c      	adds	r0, #12
 8004692:	60a0      	str	r0, [r4, #8]
 8004694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004698:	f7ff ffa2 	bl	80045e0 <memset>
 800469c:	4620      	mov	r0, r4
 800469e:	bd70      	pop	{r4, r5, r6, pc}

080046a0 <__sinit>:
 80046a0:	6983      	ldr	r3, [r0, #24]
 80046a2:	b510      	push	{r4, lr}
 80046a4:	4604      	mov	r4, r0
 80046a6:	bb33      	cbnz	r3, 80046f6 <__sinit+0x56>
 80046a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046ac:	6503      	str	r3, [r0, #80]	; 0x50
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <__sinit+0x58>)
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <__sinit+0x5c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6282      	str	r2, [r0, #40]	; 0x28
 80046b6:	4298      	cmp	r0, r3
 80046b8:	bf04      	itt	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	6183      	streq	r3, [r0, #24]
 80046be:	f000 f81f 	bl	8004700 <__sfp>
 80046c2:	6060      	str	r0, [r4, #4]
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 f81b 	bl	8004700 <__sfp>
 80046ca:	60a0      	str	r0, [r4, #8]
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 f817 	bl	8004700 <__sfp>
 80046d2:	2200      	movs	r2, #0
 80046d4:	60e0      	str	r0, [r4, #12]
 80046d6:	2104      	movs	r1, #4
 80046d8:	6860      	ldr	r0, [r4, #4]
 80046da:	f7ff ffa1 	bl	8004620 <std>
 80046de:	2201      	movs	r2, #1
 80046e0:	2109      	movs	r1, #9
 80046e2:	68a0      	ldr	r0, [r4, #8]
 80046e4:	f7ff ff9c 	bl	8004620 <std>
 80046e8:	2202      	movs	r2, #2
 80046ea:	2112      	movs	r1, #18
 80046ec:	68e0      	ldr	r0, [r4, #12]
 80046ee:	f7ff ff97 	bl	8004620 <std>
 80046f2:	2301      	movs	r3, #1
 80046f4:	61a3      	str	r3, [r4, #24]
 80046f6:	bd10      	pop	{r4, pc}
 80046f8:	08005470 	.word	0x08005470
 80046fc:	08004669 	.word	0x08004669

08004700 <__sfp>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <__sfp+0x70>)
 8004704:	681e      	ldr	r6, [r3, #0]
 8004706:	69b3      	ldr	r3, [r6, #24]
 8004708:	4607      	mov	r7, r0
 800470a:	b913      	cbnz	r3, 8004712 <__sfp+0x12>
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff ffc7 	bl	80046a0 <__sinit>
 8004712:	3648      	adds	r6, #72	; 0x48
 8004714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004718:	3b01      	subs	r3, #1
 800471a:	d503      	bpl.n	8004724 <__sfp+0x24>
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	b133      	cbz	r3, 800472e <__sfp+0x2e>
 8004720:	6836      	ldr	r6, [r6, #0]
 8004722:	e7f7      	b.n	8004714 <__sfp+0x14>
 8004724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004728:	b16d      	cbz	r5, 8004746 <__sfp+0x46>
 800472a:	3468      	adds	r4, #104	; 0x68
 800472c:	e7f4      	b.n	8004718 <__sfp+0x18>
 800472e:	2104      	movs	r1, #4
 8004730:	4638      	mov	r0, r7
 8004732:	f7ff ff9f 	bl	8004674 <__sfmoreglue>
 8004736:	6030      	str	r0, [r6, #0]
 8004738:	2800      	cmp	r0, #0
 800473a:	d1f1      	bne.n	8004720 <__sfp+0x20>
 800473c:	230c      	movs	r3, #12
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4604      	mov	r4, r0
 8004742:	4620      	mov	r0, r4
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <__sfp+0x74>)
 8004748:	6665      	str	r5, [r4, #100]	; 0x64
 800474a:	e9c4 5500 	strd	r5, r5, [r4]
 800474e:	60a5      	str	r5, [r4, #8]
 8004750:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004754:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004758:	2208      	movs	r2, #8
 800475a:	4629      	mov	r1, r5
 800475c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004760:	f7ff ff3e 	bl	80045e0 <memset>
 8004764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800476c:	e7e9      	b.n	8004742 <__sfp+0x42>
 800476e:	bf00      	nop
 8004770:	08005470 	.word	0x08005470
 8004774:	ffff0001 	.word	0xffff0001

08004778 <_fwalk_reent>:
 8004778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800477c:	4680      	mov	r8, r0
 800477e:	4689      	mov	r9, r1
 8004780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004784:	2600      	movs	r6, #0
 8004786:	b914      	cbnz	r4, 800478e <_fwalk_reent+0x16>
 8004788:	4630      	mov	r0, r6
 800478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004792:	3f01      	subs	r7, #1
 8004794:	d501      	bpl.n	800479a <_fwalk_reent+0x22>
 8004796:	6824      	ldr	r4, [r4, #0]
 8004798:	e7f5      	b.n	8004786 <_fwalk_reent+0xe>
 800479a:	89ab      	ldrh	r3, [r5, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d907      	bls.n	80047b0 <_fwalk_reent+0x38>
 80047a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a4:	3301      	adds	r3, #1
 80047a6:	d003      	beq.n	80047b0 <_fwalk_reent+0x38>
 80047a8:	4629      	mov	r1, r5
 80047aa:	4640      	mov	r0, r8
 80047ac:	47c8      	blx	r9
 80047ae:	4306      	orrs	r6, r0
 80047b0:	3568      	adds	r5, #104	; 0x68
 80047b2:	e7ee      	b.n	8004792 <_fwalk_reent+0x1a>

080047b4 <_malloc_r>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	1ccd      	adds	r5, r1, #3
 80047b8:	f025 0503 	bic.w	r5, r5, #3
 80047bc:	3508      	adds	r5, #8
 80047be:	2d0c      	cmp	r5, #12
 80047c0:	bf38      	it	cc
 80047c2:	250c      	movcc	r5, #12
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	4606      	mov	r6, r0
 80047c8:	db01      	blt.n	80047ce <_malloc_r+0x1a>
 80047ca:	42a9      	cmp	r1, r5
 80047cc:	d903      	bls.n	80047d6 <_malloc_r+0x22>
 80047ce:	230c      	movs	r3, #12
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	2000      	movs	r0, #0
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	f000 fd6b 	bl	80052b0 <__malloc_lock>
 80047da:	4a21      	ldr	r2, [pc, #132]	; (8004860 <_malloc_r+0xac>)
 80047dc:	6814      	ldr	r4, [r2, #0]
 80047de:	4621      	mov	r1, r4
 80047e0:	b991      	cbnz	r1, 8004808 <_malloc_r+0x54>
 80047e2:	4c20      	ldr	r4, [pc, #128]	; (8004864 <_malloc_r+0xb0>)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	b91b      	cbnz	r3, 80047f0 <_malloc_r+0x3c>
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 fb05 	bl	8004df8 <_sbrk_r>
 80047ee:	6020      	str	r0, [r4, #0]
 80047f0:	4629      	mov	r1, r5
 80047f2:	4630      	mov	r0, r6
 80047f4:	f000 fb00 	bl	8004df8 <_sbrk_r>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d124      	bne.n	8004846 <_malloc_r+0x92>
 80047fc:	230c      	movs	r3, #12
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	4630      	mov	r0, r6
 8004802:	f000 fd56 	bl	80052b2 <__malloc_unlock>
 8004806:	e7e4      	b.n	80047d2 <_malloc_r+0x1e>
 8004808:	680b      	ldr	r3, [r1, #0]
 800480a:	1b5b      	subs	r3, r3, r5
 800480c:	d418      	bmi.n	8004840 <_malloc_r+0x8c>
 800480e:	2b0b      	cmp	r3, #11
 8004810:	d90f      	bls.n	8004832 <_malloc_r+0x7e>
 8004812:	600b      	str	r3, [r1, #0]
 8004814:	50cd      	str	r5, [r1, r3]
 8004816:	18cc      	adds	r4, r1, r3
 8004818:	4630      	mov	r0, r6
 800481a:	f000 fd4a 	bl	80052b2 <__malloc_unlock>
 800481e:	f104 000b 	add.w	r0, r4, #11
 8004822:	1d23      	adds	r3, r4, #4
 8004824:	f020 0007 	bic.w	r0, r0, #7
 8004828:	1ac3      	subs	r3, r0, r3
 800482a:	d0d3      	beq.n	80047d4 <_malloc_r+0x20>
 800482c:	425a      	negs	r2, r3
 800482e:	50e2      	str	r2, [r4, r3]
 8004830:	e7d0      	b.n	80047d4 <_malloc_r+0x20>
 8004832:	428c      	cmp	r4, r1
 8004834:	684b      	ldr	r3, [r1, #4]
 8004836:	bf16      	itet	ne
 8004838:	6063      	strne	r3, [r4, #4]
 800483a:	6013      	streq	r3, [r2, #0]
 800483c:	460c      	movne	r4, r1
 800483e:	e7eb      	b.n	8004818 <_malloc_r+0x64>
 8004840:	460c      	mov	r4, r1
 8004842:	6849      	ldr	r1, [r1, #4]
 8004844:	e7cc      	b.n	80047e0 <_malloc_r+0x2c>
 8004846:	1cc4      	adds	r4, r0, #3
 8004848:	f024 0403 	bic.w	r4, r4, #3
 800484c:	42a0      	cmp	r0, r4
 800484e:	d005      	beq.n	800485c <_malloc_r+0xa8>
 8004850:	1a21      	subs	r1, r4, r0
 8004852:	4630      	mov	r0, r6
 8004854:	f000 fad0 	bl	8004df8 <_sbrk_r>
 8004858:	3001      	adds	r0, #1
 800485a:	d0cf      	beq.n	80047fc <_malloc_r+0x48>
 800485c:	6025      	str	r5, [r4, #0]
 800485e:	e7db      	b.n	8004818 <_malloc_r+0x64>
 8004860:	200000dc 	.word	0x200000dc
 8004864:	200000e0 	.word	0x200000e0

08004868 <__sfputc_r>:
 8004868:	6893      	ldr	r3, [r2, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	b410      	push	{r4}
 8004870:	6093      	str	r3, [r2, #8]
 8004872:	da08      	bge.n	8004886 <__sfputc_r+0x1e>
 8004874:	6994      	ldr	r4, [r2, #24]
 8004876:	42a3      	cmp	r3, r4
 8004878:	db01      	blt.n	800487e <__sfputc_r+0x16>
 800487a:	290a      	cmp	r1, #10
 800487c:	d103      	bne.n	8004886 <__sfputc_r+0x1e>
 800487e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004882:	f000 bb0d 	b.w	8004ea0 <__swbuf_r>
 8004886:	6813      	ldr	r3, [r2, #0]
 8004888:	1c58      	adds	r0, r3, #1
 800488a:	6010      	str	r0, [r2, #0]
 800488c:	7019      	strb	r1, [r3, #0]
 800488e:	4608      	mov	r0, r1
 8004890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004894:	4770      	bx	lr

08004896 <__sfputs_r>:
 8004896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004898:	4606      	mov	r6, r0
 800489a:	460f      	mov	r7, r1
 800489c:	4614      	mov	r4, r2
 800489e:	18d5      	adds	r5, r2, r3
 80048a0:	42ac      	cmp	r4, r5
 80048a2:	d101      	bne.n	80048a8 <__sfputs_r+0x12>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e007      	b.n	80048b8 <__sfputs_r+0x22>
 80048a8:	463a      	mov	r2, r7
 80048aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ffda 	bl	8004868 <__sfputc_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d1f3      	bne.n	80048a0 <__sfputs_r+0xa>
 80048b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048bc <_vfiprintf_r>:
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	460c      	mov	r4, r1
 80048c2:	b09d      	sub	sp, #116	; 0x74
 80048c4:	4617      	mov	r7, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4606      	mov	r6, r0
 80048ca:	b118      	cbz	r0, 80048d4 <_vfiprintf_r+0x18>
 80048cc:	6983      	ldr	r3, [r0, #24]
 80048ce:	b90b      	cbnz	r3, 80048d4 <_vfiprintf_r+0x18>
 80048d0:	f7ff fee6 	bl	80046a0 <__sinit>
 80048d4:	4b7c      	ldr	r3, [pc, #496]	; (8004ac8 <_vfiprintf_r+0x20c>)
 80048d6:	429c      	cmp	r4, r3
 80048d8:	d158      	bne.n	800498c <_vfiprintf_r+0xd0>
 80048da:	6874      	ldr	r4, [r6, #4]
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	0718      	lsls	r0, r3, #28
 80048e0:	d55e      	bpl.n	80049a0 <_vfiprintf_r+0xe4>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <_vfiprintf_r+0xe4>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	; 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048f8:	9503      	str	r5, [sp, #12]
 80048fa:	f04f 0b01 	mov.w	fp, #1
 80048fe:	46b8      	mov	r8, r7
 8004900:	4645      	mov	r5, r8
 8004902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004906:	b10b      	cbz	r3, 800490c <_vfiprintf_r+0x50>
 8004908:	2b25      	cmp	r3, #37	; 0x25
 800490a:	d154      	bne.n	80049b6 <_vfiprintf_r+0xfa>
 800490c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004910:	d00b      	beq.n	800492a <_vfiprintf_r+0x6e>
 8004912:	4653      	mov	r3, sl
 8004914:	463a      	mov	r2, r7
 8004916:	4621      	mov	r1, r4
 8004918:	4630      	mov	r0, r6
 800491a:	f7ff ffbc 	bl	8004896 <__sfputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80c2 	beq.w	8004aa8 <_vfiprintf_r+0x1ec>
 8004924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004926:	4453      	add	r3, sl
 8004928:	9309      	str	r3, [sp, #36]	; 0x24
 800492a:	f898 3000 	ldrb.w	r3, [r8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ba 	beq.w	8004aa8 <_vfiprintf_r+0x1ec>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493e:	9304      	str	r3, [sp, #16]
 8004940:	9307      	str	r3, [sp, #28]
 8004942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004946:	931a      	str	r3, [sp, #104]	; 0x68
 8004948:	46a8      	mov	r8, r5
 800494a:	2205      	movs	r2, #5
 800494c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004950:	485e      	ldr	r0, [pc, #376]	; (8004acc <_vfiprintf_r+0x210>)
 8004952:	f7fb fc5d 	bl	8000210 <memchr>
 8004956:	9b04      	ldr	r3, [sp, #16]
 8004958:	bb78      	cbnz	r0, 80049ba <_vfiprintf_r+0xfe>
 800495a:	06d9      	lsls	r1, r3, #27
 800495c:	bf44      	itt	mi
 800495e:	2220      	movmi	r2, #32
 8004960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004964:	071a      	lsls	r2, r3, #28
 8004966:	bf44      	itt	mi
 8004968:	222b      	movmi	r2, #43	; 0x2b
 800496a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800496e:	782a      	ldrb	r2, [r5, #0]
 8004970:	2a2a      	cmp	r2, #42	; 0x2a
 8004972:	d02a      	beq.n	80049ca <_vfiprintf_r+0x10e>
 8004974:	9a07      	ldr	r2, [sp, #28]
 8004976:	46a8      	mov	r8, r5
 8004978:	2000      	movs	r0, #0
 800497a:	250a      	movs	r5, #10
 800497c:	4641      	mov	r1, r8
 800497e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004982:	3b30      	subs	r3, #48	; 0x30
 8004984:	2b09      	cmp	r3, #9
 8004986:	d969      	bls.n	8004a5c <_vfiprintf_r+0x1a0>
 8004988:	b360      	cbz	r0, 80049e4 <_vfiprintf_r+0x128>
 800498a:	e024      	b.n	80049d6 <_vfiprintf_r+0x11a>
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <_vfiprintf_r+0x214>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d101      	bne.n	8004996 <_vfiprintf_r+0xda>
 8004992:	68b4      	ldr	r4, [r6, #8]
 8004994:	e7a2      	b.n	80048dc <_vfiprintf_r+0x20>
 8004996:	4b4f      	ldr	r3, [pc, #316]	; (8004ad4 <_vfiprintf_r+0x218>)
 8004998:	429c      	cmp	r4, r3
 800499a:	bf08      	it	eq
 800499c:	68f4      	ldreq	r4, [r6, #12]
 800499e:	e79d      	b.n	80048dc <_vfiprintf_r+0x20>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 fae0 	bl	8004f68 <__swsetup_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d09d      	beq.n	80048e8 <_vfiprintf_r+0x2c>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b01d      	add	sp, #116	; 0x74
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	46a8      	mov	r8, r5
 80049b8:	e7a2      	b.n	8004900 <_vfiprintf_r+0x44>
 80049ba:	4a44      	ldr	r2, [pc, #272]	; (8004acc <_vfiprintf_r+0x210>)
 80049bc:	1a80      	subs	r0, r0, r2
 80049be:	fa0b f000 	lsl.w	r0, fp, r0
 80049c2:	4318      	orrs	r0, r3
 80049c4:	9004      	str	r0, [sp, #16]
 80049c6:	4645      	mov	r5, r8
 80049c8:	e7be      	b.n	8004948 <_vfiprintf_r+0x8c>
 80049ca:	9a03      	ldr	r2, [sp, #12]
 80049cc:	1d11      	adds	r1, r2, #4
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	9103      	str	r1, [sp, #12]
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	db01      	blt.n	80049da <_vfiprintf_r+0x11e>
 80049d6:	9207      	str	r2, [sp, #28]
 80049d8:	e004      	b.n	80049e4 <_vfiprintf_r+0x128>
 80049da:	4252      	negs	r2, r2
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	9207      	str	r2, [sp, #28]
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	f898 3000 	ldrb.w	r3, [r8]
 80049e8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ea:	d10e      	bne.n	8004a0a <_vfiprintf_r+0x14e>
 80049ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80049f0:	2b2a      	cmp	r3, #42	; 0x2a
 80049f2:	d138      	bne.n	8004a66 <_vfiprintf_r+0x1aa>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	9203      	str	r2, [sp, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bfb8      	it	lt
 8004a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a04:	f108 0802 	add.w	r8, r8, #2
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	4d33      	ldr	r5, [pc, #204]	; (8004ad8 <_vfiprintf_r+0x21c>)
 8004a0c:	f898 1000 	ldrb.w	r1, [r8]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fb fbfc 	bl	8000210 <memchr>
 8004a18:	b140      	cbz	r0, 8004a2c <_vfiprintf_r+0x170>
 8004a1a:	2340      	movs	r3, #64	; 0x40
 8004a1c:	1b40      	subs	r0, r0, r5
 8004a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a22:	9b04      	ldr	r3, [sp, #16]
 8004a24:	4303      	orrs	r3, r0
 8004a26:	f108 0801 	add.w	r8, r8, #1
 8004a2a:	9304      	str	r3, [sp, #16]
 8004a2c:	f898 1000 	ldrb.w	r1, [r8]
 8004a30:	482a      	ldr	r0, [pc, #168]	; (8004adc <_vfiprintf_r+0x220>)
 8004a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a36:	2206      	movs	r2, #6
 8004a38:	f108 0701 	add.w	r7, r8, #1
 8004a3c:	f7fb fbe8 	bl	8000210 <memchr>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d037      	beq.n	8004ab4 <_vfiprintf_r+0x1f8>
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <_vfiprintf_r+0x224>)
 8004a46:	bb1b      	cbnz	r3, 8004a90 <_vfiprintf_r+0x1d4>
 8004a48:	9b03      	ldr	r3, [sp, #12]
 8004a4a:	3307      	adds	r3, #7
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	3308      	adds	r3, #8
 8004a52:	9303      	str	r3, [sp, #12]
 8004a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a56:	444b      	add	r3, r9
 8004a58:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5a:	e750      	b.n	80048fe <_vfiprintf_r+0x42>
 8004a5c:	fb05 3202 	mla	r2, r5, r2, r3
 8004a60:	2001      	movs	r0, #1
 8004a62:	4688      	mov	r8, r1
 8004a64:	e78a      	b.n	800497c <_vfiprintf_r+0xc0>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f108 0801 	add.w	r8, r8, #1
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	250a      	movs	r5, #10
 8004a72:	4640      	mov	r0, r8
 8004a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a78:	3a30      	subs	r2, #48	; 0x30
 8004a7a:	2a09      	cmp	r2, #9
 8004a7c:	d903      	bls.n	8004a86 <_vfiprintf_r+0x1ca>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0c3      	beq.n	8004a0a <_vfiprintf_r+0x14e>
 8004a82:	9105      	str	r1, [sp, #20]
 8004a84:	e7c1      	b.n	8004a0a <_vfiprintf_r+0x14e>
 8004a86:	fb05 2101 	mla	r1, r5, r1, r2
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4680      	mov	r8, r0
 8004a8e:	e7f0      	b.n	8004a72 <_vfiprintf_r+0x1b6>
 8004a90:	ab03      	add	r3, sp, #12
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4622      	mov	r2, r4
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <_vfiprintf_r+0x228>)
 8004a98:	a904      	add	r1, sp, #16
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004aa4:	4681      	mov	r9, r0
 8004aa6:	d1d5      	bne.n	8004a54 <_vfiprintf_r+0x198>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	065b      	lsls	r3, r3, #25
 8004aac:	f53f af7e 	bmi.w	80049ac <_vfiprintf_r+0xf0>
 8004ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ab2:	e77d      	b.n	80049b0 <_vfiprintf_r+0xf4>
 8004ab4:	ab03      	add	r3, sp, #12
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	4622      	mov	r2, r4
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <_vfiprintf_r+0x228>)
 8004abc:	a904      	add	r1, sp, #16
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 f888 	bl	8004bd4 <_printf_i>
 8004ac4:	e7ec      	b.n	8004aa0 <_vfiprintf_r+0x1e4>
 8004ac6:	bf00      	nop
 8004ac8:	08005494 	.word	0x08005494
 8004acc:	080054d4 	.word	0x080054d4
 8004ad0:	080054b4 	.word	0x080054b4
 8004ad4:	08005474 	.word	0x08005474
 8004ad8:	080054da 	.word	0x080054da
 8004adc:	080054de 	.word	0x080054de
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	08004897 	.word	0x08004897

08004ae8 <_printf_common>:
 8004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	4691      	mov	r9, r2
 8004aee:	461f      	mov	r7, r3
 8004af0:	688a      	ldr	r2, [r1, #8]
 8004af2:	690b      	ldr	r3, [r1, #16]
 8004af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	bfb8      	it	lt
 8004afc:	4613      	movlt	r3, r2
 8004afe:	f8c9 3000 	str.w	r3, [r9]
 8004b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b06:	4606      	mov	r6, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	b112      	cbz	r2, 8004b12 <_printf_common+0x2a>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f8c9 3000 	str.w	r3, [r9]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b1c:	3302      	addmi	r3, #2
 8004b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d107      	bne.n	8004b3a <_printf_common+0x52>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	f8d9 2000 	ldr.w	r2, [r9]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	42ab      	cmp	r3, r5
 8004b38:	dc28      	bgt.n	8004b8c <_printf_common+0xa4>
 8004b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	3300      	adds	r3, #0
 8004b42:	bf18      	it	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	0692      	lsls	r2, r2, #26
 8004b48:	d42d      	bmi.n	8004ba6 <_printf_common+0xbe>
 8004b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4e:	4639      	mov	r1, r7
 8004b50:	4630      	mov	r0, r6
 8004b52:	47c0      	blx	r8
 8004b54:	3001      	adds	r0, #1
 8004b56:	d020      	beq.n	8004b9a <_printf_common+0xb2>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	68e5      	ldr	r5, [r4, #12]
 8004b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b60:	f003 0306 	and.w	r3, r3, #6
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	bf08      	it	eq
 8004b68:	1aad      	subeq	r5, r5, r2
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	bf0c      	ite	eq
 8004b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b74:	2500      	movne	r5, #0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bfc4      	itt	gt
 8004b7a:	1a9b      	subgt	r3, r3, r2
 8004b7c:	18ed      	addgt	r5, r5, r3
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	341a      	adds	r4, #26
 8004b84:	454d      	cmp	r5, r9
 8004b86:	d11a      	bne.n	8004bbe <_printf_common+0xd6>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e008      	b.n	8004b9e <_printf_common+0xb6>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4639      	mov	r1, r7
 8004b92:	4630      	mov	r0, r6
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d103      	bne.n	8004ba2 <_printf_common+0xba>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7c3      	b.n	8004b2e <_printf_common+0x46>
 8004ba6:	18e1      	adds	r1, r4, r3
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	2030      	movs	r0, #48	; 0x30
 8004bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb0:	4422      	add	r2, r4
 8004bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bba:	3302      	adds	r3, #2
 8004bbc:	e7c5      	b.n	8004b4a <_printf_common+0x62>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	47c0      	blx	r8
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d0e6      	beq.n	8004b9a <_printf_common+0xb2>
 8004bcc:	f109 0901 	add.w	r9, r9, #1
 8004bd0:	e7d8      	b.n	8004b84 <_printf_common+0x9c>
	...

08004bd4 <_printf_i>:
 8004bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bdc:	460c      	mov	r4, r1
 8004bde:	7e09      	ldrb	r1, [r1, #24]
 8004be0:	b085      	sub	sp, #20
 8004be2:	296e      	cmp	r1, #110	; 0x6e
 8004be4:	4617      	mov	r7, r2
 8004be6:	4606      	mov	r6, r0
 8004be8:	4698      	mov	r8, r3
 8004bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bec:	f000 80b3 	beq.w	8004d56 <_printf_i+0x182>
 8004bf0:	d822      	bhi.n	8004c38 <_printf_i+0x64>
 8004bf2:	2963      	cmp	r1, #99	; 0x63
 8004bf4:	d036      	beq.n	8004c64 <_printf_i+0x90>
 8004bf6:	d80a      	bhi.n	8004c0e <_printf_i+0x3a>
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	f000 80b9 	beq.w	8004d70 <_printf_i+0x19c>
 8004bfe:	2958      	cmp	r1, #88	; 0x58
 8004c00:	f000 8083 	beq.w	8004d0a <_printf_i+0x136>
 8004c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c0c:	e032      	b.n	8004c74 <_printf_i+0xa0>
 8004c0e:	2964      	cmp	r1, #100	; 0x64
 8004c10:	d001      	beq.n	8004c16 <_printf_i+0x42>
 8004c12:	2969      	cmp	r1, #105	; 0x69
 8004c14:	d1f6      	bne.n	8004c04 <_printf_i+0x30>
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	0605      	lsls	r5, r0, #24
 8004c1c:	f103 0104 	add.w	r1, r3, #4
 8004c20:	d52a      	bpl.n	8004c78 <_printf_i+0xa4>
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da03      	bge.n	8004c32 <_printf_i+0x5e>
 8004c2a:	222d      	movs	r2, #45	; 0x2d
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c32:	486f      	ldr	r0, [pc, #444]	; (8004df0 <_printf_i+0x21c>)
 8004c34:	220a      	movs	r2, #10
 8004c36:	e039      	b.n	8004cac <_printf_i+0xd8>
 8004c38:	2973      	cmp	r1, #115	; 0x73
 8004c3a:	f000 809d 	beq.w	8004d78 <_printf_i+0x1a4>
 8004c3e:	d808      	bhi.n	8004c52 <_printf_i+0x7e>
 8004c40:	296f      	cmp	r1, #111	; 0x6f
 8004c42:	d020      	beq.n	8004c86 <_printf_i+0xb2>
 8004c44:	2970      	cmp	r1, #112	; 0x70
 8004c46:	d1dd      	bne.n	8004c04 <_printf_i+0x30>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	f043 0320 	orr.w	r3, r3, #32
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	e003      	b.n	8004c5a <_printf_i+0x86>
 8004c52:	2975      	cmp	r1, #117	; 0x75
 8004c54:	d017      	beq.n	8004c86 <_printf_i+0xb2>
 8004c56:	2978      	cmp	r1, #120	; 0x78
 8004c58:	d1d4      	bne.n	8004c04 <_printf_i+0x30>
 8004c5a:	2378      	movs	r3, #120	; 0x78
 8004c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c60:	4864      	ldr	r0, [pc, #400]	; (8004df4 <_printf_i+0x220>)
 8004c62:	e055      	b.n	8004d10 <_printf_i+0x13c>
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	1d19      	adds	r1, r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6011      	str	r1, [r2, #0]
 8004c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c74:	2301      	movs	r3, #1
 8004c76:	e08c      	b.n	8004d92 <_printf_i+0x1be>
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6011      	str	r1, [r2, #0]
 8004c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c80:	bf18      	it	ne
 8004c82:	b21b      	sxthne	r3, r3
 8004c84:	e7cf      	b.n	8004c26 <_printf_i+0x52>
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	6825      	ldr	r5, [r4, #0]
 8004c8a:	1d18      	adds	r0, r3, #4
 8004c8c:	6010      	str	r0, [r2, #0]
 8004c8e:	0628      	lsls	r0, r5, #24
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0xc2>
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <_printf_i+0xc8>
 8004c96:	0668      	lsls	r0, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0xbe>
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	4854      	ldr	r0, [pc, #336]	; (8004df0 <_printf_i+0x21c>)
 8004c9e:	296f      	cmp	r1, #111	; 0x6f
 8004ca0:	bf14      	ite	ne
 8004ca2:	220a      	movne	r2, #10
 8004ca4:	2208      	moveq	r2, #8
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cac:	6865      	ldr	r5, [r4, #4]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	f2c0 8095 	blt.w	8004de0 <_printf_i+0x20c>
 8004cb6:	6821      	ldr	r1, [r4, #0]
 8004cb8:	f021 0104 	bic.w	r1, r1, #4
 8004cbc:	6021      	str	r1, [r4, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d13d      	bne.n	8004d3e <_printf_i+0x16a>
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	f040 808e 	bne.w	8004de4 <_printf_i+0x210>
 8004cc8:	4665      	mov	r5, ip
 8004cca:	2a08      	cmp	r2, #8
 8004ccc:	d10b      	bne.n	8004ce6 <_printf_i+0x112>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d508      	bpl.n	8004ce6 <_printf_i+0x112>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	bfde      	ittt	le
 8004cdc:	2330      	movle	r3, #48	; 0x30
 8004cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ce6:	ebac 0305 	sub.w	r3, ip, r5
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	f8cd 8000 	str.w	r8, [sp]
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	aa03      	add	r2, sp, #12
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7ff fef6 	bl	8004ae8 <_printf_common>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d14d      	bne.n	8004d9c <_printf_i+0x1c8>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b005      	add	sp, #20
 8004d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	4839      	ldr	r0, [pc, #228]	; (8004df0 <_printf_i+0x21c>)
 8004d0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	6821      	ldr	r1, [r4, #0]
 8004d14:	1d1d      	adds	r5, r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6015      	str	r5, [r2, #0]
 8004d1a:	060a      	lsls	r2, r1, #24
 8004d1c:	d50b      	bpl.n	8004d36 <_printf_i+0x162>
 8004d1e:	07ca      	lsls	r2, r1, #31
 8004d20:	bf44      	itt	mi
 8004d22:	f041 0120 	orrmi.w	r1, r1, #32
 8004d26:	6021      	strmi	r1, [r4, #0]
 8004d28:	b91b      	cbnz	r3, 8004d32 <_printf_i+0x15e>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	f022 0220 	bic.w	r2, r2, #32
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	e7b7      	b.n	8004ca6 <_printf_i+0xd2>
 8004d36:	064d      	lsls	r5, r1, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b29b      	uxthmi	r3, r3
 8004d3c:	e7ef      	b.n	8004d1e <_printf_i+0x14a>
 8004d3e:	4665      	mov	r5, ip
 8004d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d44:	fb02 3311 	mls	r3, r2, r1, r3
 8004d48:	5cc3      	ldrb	r3, [r0, r3]
 8004d4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d4e:	460b      	mov	r3, r1
 8004d50:	2900      	cmp	r1, #0
 8004d52:	d1f5      	bne.n	8004d40 <_printf_i+0x16c>
 8004d54:	e7b9      	b.n	8004cca <_printf_i+0xf6>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	6961      	ldr	r1, [r4, #20]
 8004d5c:	1d18      	adds	r0, r3, #4
 8004d5e:	6010      	str	r0, [r2, #0]
 8004d60:	0628      	lsls	r0, r5, #24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0x196>
 8004d66:	6019      	str	r1, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <_printf_i+0x19c>
 8004d6a:	066a      	lsls	r2, r5, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0x192>
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	4665      	mov	r5, ip
 8004d76:	e7b9      	b.n	8004cec <_printf_i+0x118>
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	1d19      	adds	r1, r3, #4
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	681d      	ldr	r5, [r3, #0]
 8004d80:	6862      	ldr	r2, [r4, #4]
 8004d82:	2100      	movs	r1, #0
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7fb fa43 	bl	8000210 <memchr>
 8004d8a:	b108      	cbz	r0, 8004d90 <_printf_i+0x1bc>
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	e7a7      	b.n	8004cec <_printf_i+0x118>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	462a      	mov	r2, r5
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0aa      	beq.n	8004d00 <_printf_i+0x12c>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	079b      	lsls	r3, r3, #30
 8004dae:	d413      	bmi.n	8004dd8 <_printf_i+0x204>
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4298      	cmp	r0, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4618      	movlt	r0, r3
 8004dba:	e7a3      	b.n	8004d04 <_printf_i+0x130>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	464a      	mov	r2, r9
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d09a      	beq.n	8004d00 <_printf_i+0x12c>
 8004dca:	3501      	adds	r5, #1
 8004dcc:	68e3      	ldr	r3, [r4, #12]
 8004dce:	9a03      	ldr	r2, [sp, #12]
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dcf2      	bgt.n	8004dbc <_printf_i+0x1e8>
 8004dd6:	e7eb      	b.n	8004db0 <_printf_i+0x1dc>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	f104 0919 	add.w	r9, r4, #25
 8004dde:	e7f5      	b.n	8004dcc <_printf_i+0x1f8>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ac      	bne.n	8004d3e <_printf_i+0x16a>
 8004de4:	7803      	ldrb	r3, [r0, #0]
 8004de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dee:	e76c      	b.n	8004cca <_printf_i+0xf6>
 8004df0:	080054e5 	.word	0x080054e5
 8004df4:	080054f6 	.word	0x080054f6

08004df8 <_sbrk_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4c06      	ldr	r4, [pc, #24]	; (8004e14 <_sbrk_r+0x1c>)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	f7ff fb36 	bl	8004474 <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_sbrk_r+0x1a>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_sbrk_r+0x1a>
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000340 	.word	0x20000340

08004e18 <__sread>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	f000 fa96 	bl	8005350 <_read_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	bfab      	itete	ge
 8004e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e2c:	181b      	addge	r3, r3, r0
 8004e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e32:	bfac      	ite	ge
 8004e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e36:	81a3      	strhlt	r3, [r4, #12]
 8004e38:	bd10      	pop	{r4, pc}

08004e3a <__swrite>:
 8004e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	461f      	mov	r7, r3
 8004e40:	898b      	ldrh	r3, [r1, #12]
 8004e42:	05db      	lsls	r3, r3, #23
 8004e44:	4605      	mov	r5, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	4616      	mov	r6, r2
 8004e4a:	d505      	bpl.n	8004e58 <__swrite+0x1e>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e54:	f000 f9b6 	bl	80051c4 <_lseek_r>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	4632      	mov	r2, r6
 8004e66:	463b      	mov	r3, r7
 8004e68:	4628      	mov	r0, r5
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	f000 b869 	b.w	8004f44 <_write_r>

08004e72 <__sseek>:
 8004e72:	b510      	push	{r4, lr}
 8004e74:	460c      	mov	r4, r1
 8004e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7a:	f000 f9a3 	bl	80051c4 <_lseek_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	bf15      	itete	ne
 8004e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8e:	81a3      	strheq	r3, [r4, #12]
 8004e90:	bf18      	it	ne
 8004e92:	81a3      	strhne	r3, [r4, #12]
 8004e94:	bd10      	pop	{r4, pc}

08004e96 <__sclose>:
 8004e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9a:	f000 b8d3 	b.w	8005044 <_close_r>
	...

08004ea0 <__swbuf_r>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	460e      	mov	r6, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	b118      	cbz	r0, 8004eb2 <__swbuf_r+0x12>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <__swbuf_r+0x12>
 8004eae:	f7ff fbf7 	bl	80046a0 <__sinit>
 8004eb2:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <__swbuf_r+0x98>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d12a      	bne.n	8004f0e <__swbuf_r+0x6e>
 8004eb8:	686c      	ldr	r4, [r5, #4]
 8004eba:	69a3      	ldr	r3, [r4, #24]
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	071a      	lsls	r2, r3, #28
 8004ec2:	d52e      	bpl.n	8004f22 <__swbuf_r+0x82>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	b363      	cbz	r3, 8004f22 <__swbuf_r+0x82>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1ac0      	subs	r0, r0, r3
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	b2f6      	uxtb	r6, r6
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	4637      	mov	r7, r6
 8004ed6:	dc04      	bgt.n	8004ee2 <__swbuf_r+0x42>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f948 	bl	8005170 <_fflush_r>
 8004ee0:	bb28      	cbnz	r0, 8004f2e <__swbuf_r+0x8e>
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	6022      	str	r2, [r4, #0]
 8004eee:	701e      	strb	r6, [r3, #0]
 8004ef0:	6963      	ldr	r3, [r4, #20]
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	4283      	cmp	r3, r0
 8004ef6:	d004      	beq.n	8004f02 <__swbuf_r+0x62>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	07db      	lsls	r3, r3, #31
 8004efc:	d519      	bpl.n	8004f32 <__swbuf_r+0x92>
 8004efe:	2e0a      	cmp	r6, #10
 8004f00:	d117      	bne.n	8004f32 <__swbuf_r+0x92>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f933 	bl	8005170 <_fflush_r>
 8004f0a:	b190      	cbz	r0, 8004f32 <__swbuf_r+0x92>
 8004f0c:	e00f      	b.n	8004f2e <__swbuf_r+0x8e>
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <__swbuf_r+0x9c>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d101      	bne.n	8004f18 <__swbuf_r+0x78>
 8004f14:	68ac      	ldr	r4, [r5, #8]
 8004f16:	e7d0      	b.n	8004eba <__swbuf_r+0x1a>
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <__swbuf_r+0xa0>)
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	bf08      	it	eq
 8004f1e:	68ec      	ldreq	r4, [r5, #12]
 8004f20:	e7cb      	b.n	8004eba <__swbuf_r+0x1a>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f81f 	bl	8004f68 <__swsetup_r>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d0cc      	beq.n	8004ec8 <__swbuf_r+0x28>
 8004f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004f32:	4638      	mov	r0, r7
 8004f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08005494 	.word	0x08005494
 8004f3c:	080054b4 	.word	0x080054b4
 8004f40:	08005474 	.word	0x08005474

08004f44 <_write_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4c07      	ldr	r4, [pc, #28]	; (8004f64 <_write_r+0x20>)
 8004f48:	4605      	mov	r5, r0
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7ff fa3d 	bl	80043d2 <_write>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_write_r+0x1e>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_write_r+0x1e>
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000340 	.word	0x20000340

08004f68 <__swsetup_r>:
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <__swsetup_r+0xcc>)
 8004f6a:	b570      	push	{r4, r5, r6, lr}
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	b125      	cbz	r5, 8004f7e <__swsetup_r+0x16>
 8004f74:	69ab      	ldr	r3, [r5, #24]
 8004f76:	b913      	cbnz	r3, 8004f7e <__swsetup_r+0x16>
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f7ff fb91 	bl	80046a0 <__sinit>
 8004f7e:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <__swsetup_r+0xd0>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d10f      	bne.n	8004fa4 <__swsetup_r+0x3c>
 8004f84:	686c      	ldr	r4, [r5, #4]
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	0715      	lsls	r5, r2, #28
 8004f8e:	d42c      	bmi.n	8004fea <__swsetup_r+0x82>
 8004f90:	06d0      	lsls	r0, r2, #27
 8004f92:	d411      	bmi.n	8004fb8 <__swsetup_r+0x50>
 8004f94:	2209      	movs	r2, #9
 8004f96:	6032      	str	r2, [r6, #0]
 8004f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	e03e      	b.n	8005022 <__swsetup_r+0xba>
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <__swsetup_r+0xd4>)
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d101      	bne.n	8004fae <__swsetup_r+0x46>
 8004faa:	68ac      	ldr	r4, [r5, #8]
 8004fac:	e7eb      	b.n	8004f86 <__swsetup_r+0x1e>
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <__swsetup_r+0xd8>)
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	bf08      	it	eq
 8004fb4:	68ec      	ldreq	r4, [r5, #12]
 8004fb6:	e7e6      	b.n	8004f86 <__swsetup_r+0x1e>
 8004fb8:	0751      	lsls	r1, r2, #29
 8004fba:	d512      	bpl.n	8004fe2 <__swsetup_r+0x7a>
 8004fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fbe:	b141      	cbz	r1, 8004fd2 <__swsetup_r+0x6a>
 8004fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	d002      	beq.n	8004fce <__swsetup_r+0x66>
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 f973 	bl	80052b4 <_free_r>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6063      	str	r3, [r4, #4]
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	f043 0308 	orr.w	r3, r3, #8
 8004fe8:	81a3      	strh	r3, [r4, #12]
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	b94b      	cbnz	r3, 8005002 <__swsetup_r+0x9a>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff8:	d003      	beq.n	8005002 <__swsetup_r+0x9a>
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 f917 	bl	8005230 <__smakebuf_r>
 8005002:	89a2      	ldrh	r2, [r4, #12]
 8005004:	f012 0301 	ands.w	r3, r2, #1
 8005008:	d00c      	beq.n	8005024 <__swsetup_r+0xbc>
 800500a:	2300      	movs	r3, #0
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	6963      	ldr	r3, [r4, #20]
 8005010:	425b      	negs	r3, r3
 8005012:	61a3      	str	r3, [r4, #24]
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	b953      	cbnz	r3, 800502e <__swsetup_r+0xc6>
 8005018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800501c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005020:	d1ba      	bne.n	8004f98 <__swsetup_r+0x30>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	0792      	lsls	r2, r2, #30
 8005026:	bf58      	it	pl
 8005028:	6963      	ldrpl	r3, [r4, #20]
 800502a:	60a3      	str	r3, [r4, #8]
 800502c:	e7f2      	b.n	8005014 <__swsetup_r+0xac>
 800502e:	2000      	movs	r0, #0
 8005030:	e7f7      	b.n	8005022 <__swsetup_r+0xba>
 8005032:	bf00      	nop
 8005034:	20000038 	.word	0x20000038
 8005038:	08005494 	.word	0x08005494
 800503c:	080054b4 	.word	0x080054b4
 8005040:	08005474 	.word	0x08005474

08005044 <_close_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c06      	ldr	r4, [pc, #24]	; (8005060 <_close_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4605      	mov	r5, r0
 800504c:	4608      	mov	r0, r1
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f7ff f9db 	bl	800440a <_close>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_close_r+0x1a>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	b103      	cbz	r3, 800505e <_close_r+0x1a>
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20000340 	.word	0x20000340

08005064 <__sflush_r>:
 8005064:	898a      	ldrh	r2, [r1, #12]
 8005066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	0710      	lsls	r0, r2, #28
 800506e:	460c      	mov	r4, r1
 8005070:	d458      	bmi.n	8005124 <__sflush_r+0xc0>
 8005072:	684b      	ldr	r3, [r1, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dc05      	bgt.n	8005084 <__sflush_r+0x20>
 8005078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	dc02      	bgt.n	8005084 <__sflush_r+0x20>
 800507e:	2000      	movs	r0, #0
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005086:	2e00      	cmp	r6, #0
 8005088:	d0f9      	beq.n	800507e <__sflush_r+0x1a>
 800508a:	2300      	movs	r3, #0
 800508c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005090:	682f      	ldr	r7, [r5, #0]
 8005092:	6a21      	ldr	r1, [r4, #32]
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	d032      	beq.n	80050fe <__sflush_r+0x9a>
 8005098:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	075a      	lsls	r2, r3, #29
 800509e:	d505      	bpl.n	80050ac <__sflush_r+0x48>
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050a6:	b10b      	cbz	r3, 80050ac <__sflush_r+0x48>
 80050a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050aa:	1ac0      	subs	r0, r0, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	4602      	mov	r2, r0
 80050b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050b2:	6a21      	ldr	r1, [r4, #32]
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b0      	blx	r6
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	d106      	bne.n	80050cc <__sflush_r+0x68>
 80050be:	6829      	ldr	r1, [r5, #0]
 80050c0:	291d      	cmp	r1, #29
 80050c2:	d848      	bhi.n	8005156 <__sflush_r+0xf2>
 80050c4:	4a29      	ldr	r2, [pc, #164]	; (800516c <__sflush_r+0x108>)
 80050c6:	40ca      	lsrs	r2, r1
 80050c8:	07d6      	lsls	r6, r2, #31
 80050ca:	d544      	bpl.n	8005156 <__sflush_r+0xf2>
 80050cc:	2200      	movs	r2, #0
 80050ce:	6062      	str	r2, [r4, #4]
 80050d0:	04d9      	lsls	r1, r3, #19
 80050d2:	6922      	ldr	r2, [r4, #16]
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	d504      	bpl.n	80050e2 <__sflush_r+0x7e>
 80050d8:	1c42      	adds	r2, r0, #1
 80050da:	d101      	bne.n	80050e0 <__sflush_r+0x7c>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b903      	cbnz	r3, 80050e2 <__sflush_r+0x7e>
 80050e0:	6560      	str	r0, [r4, #84]	; 0x54
 80050e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e4:	602f      	str	r7, [r5, #0]
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d0c9      	beq.n	800507e <__sflush_r+0x1a>
 80050ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ee:	4299      	cmp	r1, r3
 80050f0:	d002      	beq.n	80050f8 <__sflush_r+0x94>
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f8de 	bl	80052b4 <_free_r>
 80050f8:	2000      	movs	r0, #0
 80050fa:	6360      	str	r0, [r4, #52]	; 0x34
 80050fc:	e7c0      	b.n	8005080 <__sflush_r+0x1c>
 80050fe:	2301      	movs	r3, #1
 8005100:	4628      	mov	r0, r5
 8005102:	47b0      	blx	r6
 8005104:	1c41      	adds	r1, r0, #1
 8005106:	d1c8      	bne.n	800509a <__sflush_r+0x36>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0c5      	beq.n	800509a <__sflush_r+0x36>
 800510e:	2b1d      	cmp	r3, #29
 8005110:	d001      	beq.n	8005116 <__sflush_r+0xb2>
 8005112:	2b16      	cmp	r3, #22
 8005114:	d101      	bne.n	800511a <__sflush_r+0xb6>
 8005116:	602f      	str	r7, [r5, #0]
 8005118:	e7b1      	b.n	800507e <__sflush_r+0x1a>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	e7ad      	b.n	8005080 <__sflush_r+0x1c>
 8005124:	690f      	ldr	r7, [r1, #16]
 8005126:	2f00      	cmp	r7, #0
 8005128:	d0a9      	beq.n	800507e <__sflush_r+0x1a>
 800512a:	0793      	lsls	r3, r2, #30
 800512c:	680e      	ldr	r6, [r1, #0]
 800512e:	bf08      	it	eq
 8005130:	694b      	ldreq	r3, [r1, #20]
 8005132:	600f      	str	r7, [r1, #0]
 8005134:	bf18      	it	ne
 8005136:	2300      	movne	r3, #0
 8005138:	eba6 0807 	sub.w	r8, r6, r7
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	f1b8 0f00 	cmp.w	r8, #0
 8005142:	dd9c      	ble.n	800507e <__sflush_r+0x1a>
 8005144:	4643      	mov	r3, r8
 8005146:	463a      	mov	r2, r7
 8005148:	6a21      	ldr	r1, [r4, #32]
 800514a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800514c:	4628      	mov	r0, r5
 800514e:	47b0      	blx	r6
 8005150:	2800      	cmp	r0, #0
 8005152:	dc06      	bgt.n	8005162 <__sflush_r+0xfe>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e78e      	b.n	8005080 <__sflush_r+0x1c>
 8005162:	4407      	add	r7, r0
 8005164:	eba8 0800 	sub.w	r8, r8, r0
 8005168:	e7e9      	b.n	800513e <__sflush_r+0xda>
 800516a:	bf00      	nop
 800516c:	20400001 	.word	0x20400001

08005170 <_fflush_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	690b      	ldr	r3, [r1, #16]
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b1db      	cbz	r3, 80051b2 <_fflush_r+0x42>
 800517a:	b118      	cbz	r0, 8005184 <_fflush_r+0x14>
 800517c:	6983      	ldr	r3, [r0, #24]
 800517e:	b90b      	cbnz	r3, 8005184 <_fflush_r+0x14>
 8005180:	f7ff fa8e 	bl	80046a0 <__sinit>
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <_fflush_r+0x48>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d109      	bne.n	800519e <_fflush_r+0x2e>
 800518a:	686c      	ldr	r4, [r5, #4]
 800518c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005190:	b17b      	cbz	r3, 80051b2 <_fflush_r+0x42>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800519a:	f7ff bf63 	b.w	8005064 <__sflush_r>
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <_fflush_r+0x4c>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d101      	bne.n	80051a8 <_fflush_r+0x38>
 80051a4:	68ac      	ldr	r4, [r5, #8]
 80051a6:	e7f1      	b.n	800518c <_fflush_r+0x1c>
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <_fflush_r+0x50>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	bf08      	it	eq
 80051ae:	68ec      	ldreq	r4, [r5, #12]
 80051b0:	e7ec      	b.n	800518c <_fflush_r+0x1c>
 80051b2:	2000      	movs	r0, #0
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
 80051b6:	bf00      	nop
 80051b8:	08005494 	.word	0x08005494
 80051bc:	080054b4 	.word	0x080054b4
 80051c0:	08005474 	.word	0x08005474

080051c4 <_lseek_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4c07      	ldr	r4, [pc, #28]	; (80051e4 <_lseek_r+0x20>)
 80051c8:	4605      	mov	r5, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	6022      	str	r2, [r4, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7ff f940 	bl	8004458 <_lseek>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_lseek_r+0x1e>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_lseek_r+0x1e>
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000340 	.word	0x20000340

080051e8 <__swhatbuf_r>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	460e      	mov	r6, r1
 80051ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f0:	2900      	cmp	r1, #0
 80051f2:	b096      	sub	sp, #88	; 0x58
 80051f4:	4614      	mov	r4, r2
 80051f6:	461d      	mov	r5, r3
 80051f8:	da07      	bge.n	800520a <__swhatbuf_r+0x22>
 80051fa:	2300      	movs	r3, #0
 80051fc:	602b      	str	r3, [r5, #0]
 80051fe:	89b3      	ldrh	r3, [r6, #12]
 8005200:	061a      	lsls	r2, r3, #24
 8005202:	d410      	bmi.n	8005226 <__swhatbuf_r+0x3e>
 8005204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005208:	e00e      	b.n	8005228 <__swhatbuf_r+0x40>
 800520a:	466a      	mov	r2, sp
 800520c:	f000 f8b2 	bl	8005374 <_fstat_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	dbf2      	blt.n	80051fa <__swhatbuf_r+0x12>
 8005214:	9a01      	ldr	r2, [sp, #4]
 8005216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800521a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800521e:	425a      	negs	r2, r3
 8005220:	415a      	adcs	r2, r3
 8005222:	602a      	str	r2, [r5, #0]
 8005224:	e7ee      	b.n	8005204 <__swhatbuf_r+0x1c>
 8005226:	2340      	movs	r3, #64	; 0x40
 8005228:	2000      	movs	r0, #0
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	b016      	add	sp, #88	; 0x58
 800522e:	bd70      	pop	{r4, r5, r6, pc}

08005230 <__smakebuf_r>:
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005234:	079d      	lsls	r5, r3, #30
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	d507      	bpl.n	800524c <__smakebuf_r+0x1c>
 800523c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2301      	movs	r3, #1
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	b002      	add	sp, #8
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	ab01      	add	r3, sp, #4
 800524e:	466a      	mov	r2, sp
 8005250:	f7ff ffca 	bl	80051e8 <__swhatbuf_r>
 8005254:	9900      	ldr	r1, [sp, #0]
 8005256:	4605      	mov	r5, r0
 8005258:	4630      	mov	r0, r6
 800525a:	f7ff faab 	bl	80047b4 <_malloc_r>
 800525e:	b948      	cbnz	r0, 8005274 <__smakebuf_r+0x44>
 8005260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005264:	059a      	lsls	r2, r3, #22
 8005266:	d4ef      	bmi.n	8005248 <__smakebuf_r+0x18>
 8005268:	f023 0303 	bic.w	r3, r3, #3
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	e7e3      	b.n	800523c <__smakebuf_r+0xc>
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <__smakebuf_r+0x7c>)
 8005276:	62b3      	str	r3, [r6, #40]	; 0x28
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	6163      	str	r3, [r4, #20]
 8005286:	9b01      	ldr	r3, [sp, #4]
 8005288:	6120      	str	r0, [r4, #16]
 800528a:	b15b      	cbz	r3, 80052a4 <__smakebuf_r+0x74>
 800528c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f881 	bl	8005398 <_isatty_r>
 8005296:	b128      	cbz	r0, 80052a4 <__smakebuf_r+0x74>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	431d      	orrs	r5, r3
 80052a8:	81a5      	strh	r5, [r4, #12]
 80052aa:	e7cd      	b.n	8005248 <__smakebuf_r+0x18>
 80052ac:	08004669 	.word	0x08004669

080052b0 <__malloc_lock>:
 80052b0:	4770      	bx	lr

080052b2 <__malloc_unlock>:
 80052b2:	4770      	bx	lr

080052b4 <_free_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4605      	mov	r5, r0
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d045      	beq.n	8005348 <_free_r+0x94>
 80052bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c0:	1f0c      	subs	r4, r1, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bfb8      	it	lt
 80052c6:	18e4      	addlt	r4, r4, r3
 80052c8:	f7ff fff2 	bl	80052b0 <__malloc_lock>
 80052cc:	4a1f      	ldr	r2, [pc, #124]	; (800534c <_free_r+0x98>)
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	4610      	mov	r0, r2
 80052d2:	b933      	cbnz	r3, 80052e2 <_free_r+0x2e>
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	6014      	str	r4, [r2, #0]
 80052d8:	4628      	mov	r0, r5
 80052da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052de:	f7ff bfe8 	b.w	80052b2 <__malloc_unlock>
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	d90c      	bls.n	8005300 <_free_r+0x4c>
 80052e6:	6821      	ldr	r1, [r4, #0]
 80052e8:	1862      	adds	r2, r4, r1
 80052ea:	4293      	cmp	r3, r2
 80052ec:	bf04      	itt	eq
 80052ee:	681a      	ldreq	r2, [r3, #0]
 80052f0:	685b      	ldreq	r3, [r3, #4]
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	bf04      	itt	eq
 80052f6:	1852      	addeq	r2, r2, r1
 80052f8:	6022      	streq	r2, [r4, #0]
 80052fa:	6004      	str	r4, [r0, #0]
 80052fc:	e7ec      	b.n	80052d8 <_free_r+0x24>
 80052fe:	4613      	mov	r3, r2
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	b10a      	cbz	r2, 8005308 <_free_r+0x54>
 8005304:	42a2      	cmp	r2, r4
 8005306:	d9fa      	bls.n	80052fe <_free_r+0x4a>
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	1858      	adds	r0, r3, r1
 800530c:	42a0      	cmp	r0, r4
 800530e:	d10b      	bne.n	8005328 <_free_r+0x74>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4401      	add	r1, r0
 8005314:	1858      	adds	r0, r3, r1
 8005316:	4282      	cmp	r2, r0
 8005318:	6019      	str	r1, [r3, #0]
 800531a:	d1dd      	bne.n	80052d8 <_free_r+0x24>
 800531c:	6810      	ldr	r0, [r2, #0]
 800531e:	6852      	ldr	r2, [r2, #4]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	4401      	add	r1, r0
 8005324:	6019      	str	r1, [r3, #0]
 8005326:	e7d7      	b.n	80052d8 <_free_r+0x24>
 8005328:	d902      	bls.n	8005330 <_free_r+0x7c>
 800532a:	230c      	movs	r3, #12
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	e7d3      	b.n	80052d8 <_free_r+0x24>
 8005330:	6820      	ldr	r0, [r4, #0]
 8005332:	1821      	adds	r1, r4, r0
 8005334:	428a      	cmp	r2, r1
 8005336:	bf04      	itt	eq
 8005338:	6811      	ldreq	r1, [r2, #0]
 800533a:	6852      	ldreq	r2, [r2, #4]
 800533c:	6062      	str	r2, [r4, #4]
 800533e:	bf04      	itt	eq
 8005340:	1809      	addeq	r1, r1, r0
 8005342:	6021      	streq	r1, [r4, #0]
 8005344:	605c      	str	r4, [r3, #4]
 8005346:	e7c7      	b.n	80052d8 <_free_r+0x24>
 8005348:	bd38      	pop	{r3, r4, r5, pc}
 800534a:	bf00      	nop
 800534c:	200000dc 	.word	0x200000dc

08005350 <_read_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4c07      	ldr	r4, [pc, #28]	; (8005370 <_read_r+0x20>)
 8005354:	4605      	mov	r5, r0
 8005356:	4608      	mov	r0, r1
 8005358:	4611      	mov	r1, r2
 800535a:	2200      	movs	r2, #0
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7ff f81a 	bl	8004398 <_read>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_read_r+0x1e>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	b103      	cbz	r3, 800536e <_read_r+0x1e>
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000340 	.word	0x20000340

08005374 <_fstat_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4c07      	ldr	r4, [pc, #28]	; (8005394 <_fstat_r+0x20>)
 8005378:	2300      	movs	r3, #0
 800537a:	4605      	mov	r5, r0
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	f7ff f84e 	bl	8004422 <_fstat>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d102      	bne.n	8005390 <_fstat_r+0x1c>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	b103      	cbz	r3, 8005390 <_fstat_r+0x1c>
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	bf00      	nop
 8005394:	20000340 	.word	0x20000340

08005398 <_isatty_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4c06      	ldr	r4, [pc, #24]	; (80053b4 <_isatty_r+0x1c>)
 800539c:	2300      	movs	r3, #0
 800539e:	4605      	mov	r5, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	f7ff f84d 	bl	8004442 <_isatty>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_isatty_r+0x1a>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_isatty_r+0x1a>
 80053b0:	602b      	str	r3, [r5, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000340 	.word	0x20000340

080053b8 <_init>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr

080053c4 <_fini>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr
