
MCU_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000038  08003e28  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003e28  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093ec  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017d7  00000000  00000000  00029454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002ac30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e74  00000000  00000000  0002bba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f84  00000000  00000000  0002da1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4c8d  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa62d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002140  00000000  00000000  000fa6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000038 	.word	0x20000038
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003da8 	.word	0x08003da8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000003c 	.word	0x2000003c
 8000200:	08003da8 	.word	0x08003da8

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295
 8000a54:	f000 b972 	b.w	8000d3c <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9e08      	ldr	r6, [sp, #32]
 8000a76:	4604      	mov	r4, r0
 8000a78:	4688      	mov	r8, r1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d14b      	bne.n	8000b16 <__udivmoddi4+0xa6>
 8000a7e:	428a      	cmp	r2, r1
 8000a80:	4615      	mov	r5, r2
 8000a82:	d967      	bls.n	8000b54 <__udivmoddi4+0xe4>
 8000a84:	fab2 f282 	clz	r2, r2
 8000a88:	b14a      	cbz	r2, 8000a9e <__udivmoddi4+0x2e>
 8000a8a:	f1c2 0720 	rsb	r7, r2, #32
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	fa20 f707 	lsr.w	r7, r0, r7
 8000a96:	4095      	lsls	r5, r2
 8000a98:	ea47 0803 	orr.w	r8, r7, r3
 8000a9c:	4094      	lsls	r4, r2
 8000a9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa2:	0c23      	lsrs	r3, r4, #16
 8000aa4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aa8:	fa1f fc85 	uxth.w	ip, r5
 8000aac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab4:	fb07 f10c 	mul.w	r1, r7, ip
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x60>
 8000abc:	18eb      	adds	r3, r5, r3
 8000abe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac2:	f080 811b 	bcs.w	8000cfc <__udivmoddi4+0x28c>
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	f240 8118 	bls.w	8000cfc <__udivmoddi4+0x28c>
 8000acc:	3f02      	subs	r7, #2
 8000ace:	442b      	add	r3, r5
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ad8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000adc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x8c>
 8000ae8:	192c      	adds	r4, r5, r4
 8000aea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aee:	f080 8107 	bcs.w	8000d00 <__udivmoddi4+0x290>
 8000af2:	45a4      	cmp	ip, r4
 8000af4:	f240 8104 	bls.w	8000d00 <__udivmoddi4+0x290>
 8000af8:	3802      	subs	r0, #2
 8000afa:	442c      	add	r4, r5
 8000afc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b00:	eba4 040c 	sub.w	r4, r4, ip
 8000b04:	2700      	movs	r7, #0
 8000b06:	b11e      	cbz	r6, 8000b10 <__udivmoddi4+0xa0>
 8000b08:	40d4      	lsrs	r4, r2
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b10:	4639      	mov	r1, r7
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0xbe>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f000 80eb 	beq.w	8000cf6 <__udivmoddi4+0x286>
 8000b20:	2700      	movs	r7, #0
 8000b22:	e9c6 0100 	strd	r0, r1, [r6]
 8000b26:	4638      	mov	r0, r7
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	fab3 f783 	clz	r7, r3
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d147      	bne.n	8000bc6 <__udivmoddi4+0x156>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xd0>
 8000b3a:	4282      	cmp	r2, r0
 8000b3c:	f200 80fa 	bhi.w	8000d34 <__udivmoddi4+0x2c4>
 8000b40:	1a84      	subs	r4, r0, r2
 8000b42:	eb61 0303 	sbc.w	r3, r1, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	4698      	mov	r8, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d0e0      	beq.n	8000b10 <__udivmoddi4+0xa0>
 8000b4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000b52:	e7dd      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000b54:	b902      	cbnz	r2, 8000b58 <__udivmoddi4+0xe8>
 8000b56:	deff      	udf	#255	; 0xff
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 808f 	bne.w	8000c80 <__udivmoddi4+0x210>
 8000b62:	1b49      	subs	r1, r1, r5
 8000b64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b68:	fa1f f885 	uxth.w	r8, r5
 8000b6c:	2701      	movs	r7, #1
 8000b6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d907      	bls.n	8000b94 <__udivmoddi4+0x124>
 8000b84:	18eb      	adds	r3, r5, r3
 8000b86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x122>
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	f200 80cd 	bhi.w	8000d2c <__udivmoddi4+0x2bc>
 8000b92:	4684      	mov	ip, r0
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	b2a3      	uxth	r3, r4
 8000b98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba4:	fb08 f800 	mul.w	r8, r8, r0
 8000ba8:	45a0      	cmp	r8, r4
 8000baa:	d907      	bls.n	8000bbc <__udivmoddi4+0x14c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x14a>
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	f200 80b6 	bhi.w	8000d26 <__udivmoddi4+0x2b6>
 8000bba:	4618      	mov	r0, r3
 8000bbc:	eba4 0408 	sub.w	r4, r4, r8
 8000bc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc4:	e79f      	b.n	8000b06 <__udivmoddi4+0x96>
 8000bc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000bca:	40bb      	lsls	r3, r7
 8000bcc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000bd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be4:	4325      	orrs	r5, r4
 8000be6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bea:	0c2c      	lsrs	r4, r5, #16
 8000bec:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf0:	fa1f fa8e 	uxth.w	sl, lr
 8000bf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000c02:	fa00 f107 	lsl.w	r1, r0, r7
 8000c06:	d90b      	bls.n	8000c20 <__udivmoddi4+0x1b0>
 8000c08:	eb1e 0303 	adds.w	r3, lr, r3
 8000c0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c10:	f080 8087 	bcs.w	8000d22 <__udivmoddi4+0x2b2>
 8000c14:	429c      	cmp	r4, r3
 8000c16:	f240 8084 	bls.w	8000d22 <__udivmoddi4+0x2b2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	4473      	add	r3, lr
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	b2ad      	uxth	r5, r5
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c34:	45a2      	cmp	sl, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1da>
 8000c38:	eb1e 0404 	adds.w	r4, lr, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	d26b      	bcs.n	8000d1a <__udivmoddi4+0x2aa>
 8000c42:	45a2      	cmp	sl, r4
 8000c44:	d969      	bls.n	8000d1a <__udivmoddi4+0x2aa>
 8000c46:	3802      	subs	r0, #2
 8000c48:	4474      	add	r4, lr
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c52:	eba4 040a 	sub.w	r4, r4, sl
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c2      	mov	sl, r8
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	d354      	bcc.n	8000d08 <__udivmoddi4+0x298>
 8000c5e:	d051      	beq.n	8000d04 <__udivmoddi4+0x294>
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d069      	beq.n	8000d38 <__udivmoddi4+0x2c8>
 8000c64:	ebb1 050a 	subs.w	r5, r1, sl
 8000c68:	eb64 0403 	sbc.w	r4, r4, r3
 8000c6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c70:	40fd      	lsrs	r5, r7
 8000c72:	40fc      	lsrs	r4, r7
 8000c74:	ea4c 0505 	orr.w	r5, ip, r5
 8000c78:	e9c6 5400 	strd	r5, r4, [r6]
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	e747      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f703 	lsr.w	r7, r0, r3
 8000c88:	4095      	lsls	r5, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c96:	4338      	orrs	r0, r7
 8000c98:	0c01      	lsrs	r1, r0, #16
 8000c9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c9e:	fa1f f885 	uxth.w	r8, r5
 8000ca2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb07 f308 	mul.w	r3, r7, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x256>
 8000cb6:	1869      	adds	r1, r5, r1
 8000cb8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cbc:	d22f      	bcs.n	8000d1e <__udivmoddi4+0x2ae>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d92d      	bls.n	8000d1e <__udivmoddi4+0x2ae>
 8000cc2:	3f02      	subs	r7, #2
 8000cc4:	4429      	add	r1, r5
 8000cc6:	1acb      	subs	r3, r1, r3
 8000cc8:	b281      	uxth	r1, r0
 8000cca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb00 f308 	mul.w	r3, r0, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x27e>
 8000cde:	1869      	adds	r1, r5, r1
 8000ce0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce4:	d217      	bcs.n	8000d16 <__udivmoddi4+0x2a6>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d915      	bls.n	8000d16 <__udivmoddi4+0x2a6>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4429      	add	r1, r5
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf4:	e73b      	b.n	8000b6e <__udivmoddi4+0xfe>
 8000cf6:	4637      	mov	r7, r6
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	e709      	b.n	8000b10 <__udivmoddi4+0xa0>
 8000cfc:	4607      	mov	r7, r0
 8000cfe:	e6e7      	b.n	8000ad0 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fb      	b.n	8000afc <__udivmoddi4+0x8c>
 8000d04:	4541      	cmp	r1, r8
 8000d06:	d2ab      	bcs.n	8000c60 <__udivmoddi4+0x1f0>
 8000d08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000d10:	3801      	subs	r0, #1
 8000d12:	4613      	mov	r3, r2
 8000d14:	e7a4      	b.n	8000c60 <__udivmoddi4+0x1f0>
 8000d16:	4660      	mov	r0, ip
 8000d18:	e7e9      	b.n	8000cee <__udivmoddi4+0x27e>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	e795      	b.n	8000c4a <__udivmoddi4+0x1da>
 8000d1e:	4667      	mov	r7, ip
 8000d20:	e7d1      	b.n	8000cc6 <__udivmoddi4+0x256>
 8000d22:	4681      	mov	r9, r0
 8000d24:	e77c      	b.n	8000c20 <__udivmoddi4+0x1b0>
 8000d26:	3802      	subs	r0, #2
 8000d28:	442c      	add	r4, r5
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0x14c>
 8000d2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d30:	442b      	add	r3, r5
 8000d32:	e72f      	b.n	8000b94 <__udivmoddi4+0x124>
 8000d34:	4638      	mov	r0, r7
 8000d36:	e708      	b.n	8000b4a <__udivmoddi4+0xda>
 8000d38:	4637      	mov	r7, r6
 8000d3a:	e6e9      	b.n	8000b10 <__udivmoddi4+0xa0>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f94d 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f002 fdd4 	bl	8003920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f965 	bl	8001072 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92d 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000034 	.word	0x20000034
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000000 	.word	0x20000000

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000064 	.word	0x20000064

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000064 	.word	0x20000064

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_Delay+0x40>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000004 	.word	0x20000004

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e062      	b.n	8001164 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 fc60 	bl	8003970 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_DCMI_Init+0xe0>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80010e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010f4:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8001100:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800110c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b10      	cmp	r3, #16
 800111c:	d112      	bne.n	8001144 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f1b      	ldrb	r3, [r3, #28]
 8001122:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7f5b      	ldrb	r3, [r3, #29]
 8001128:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800112a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7f9b      	ldrb	r3, [r3, #30]
 8001130:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001132:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7fdb      	ldrb	r3, [r3, #31]
 800113a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001140:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001142:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 021e 	orr.w	r2, r2, #30
 8001152:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	ffe0f007 	.word	0xffe0f007

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fe46 	bl	8000e0c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e099      	b.n	80012c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e00f      	b.n	80011ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe2d 	bl	8000e0c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d908      	bls.n	80011ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e078      	b.n	80012c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_DMA_Init+0x158>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d107      	bne.n	8001238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4313      	orrs	r3, r2
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	2b04      	cmp	r3, #4
 8001260:	d117      	bne.n	8001292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f9e9 	bl	800164c <DMA_CheckFifoParam>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	e016      	b.n	80012c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f9a0 	bl	80015e0 <DMA_CalcBaseAndBitshift>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	f010803f 	.word	0xf010803f

080012cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012d8:	4b92      	ldr	r3, [pc, #584]	; (8001524 <HAL_DMA_IRQHandler+0x258>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_DMA_IRQHandler+0x25c>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0a9b      	lsrs	r3, r3, #10
 80012e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2208      	movs	r2, #8
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01a      	beq.n	8001338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	2208      	movs	r2, #8
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d012      	beq.n	800136e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	2201      	movs	r2, #1
 800135c:	409a      	lsls	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	2204      	movs	r2, #4
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2204      	movs	r2, #4
 8001392:	409a      	lsls	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	f043 0204 	orr.w	r2, r3, #4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2210      	movs	r2, #16
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d043      	beq.n	800143c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03c      	beq.n	800143c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2210      	movs	r2, #16
 80013c8:	409a      	lsls	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d018      	beq.n	800140e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d024      	beq.n	800143c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
 80013fa:	e01f      	b.n	800143c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01b      	beq.n	800143c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
 800140c:	e016      	b.n	800143c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0208 	bic.w	r2, r2, #8
 800142a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2220      	movs	r2, #32
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 808e 	beq.w	800156a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8086 	beq.w	800156a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2220      	movs	r2, #32
 8001464:	409a      	lsls	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b05      	cmp	r3, #5
 8001474:	d136      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0216 	bic.w	r2, r2, #22
 8001484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <HAL_DMA_IRQHandler+0x1da>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0208 	bic.w	r2, r2, #8
 80014b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	223f      	movs	r2, #63	; 0x3f
 80014bc:	409a      	lsls	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d07d      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
        }
        return;
 80014e2:	e078      	b.n	80015d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01c      	beq.n	800152c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d108      	bne.n	8001512 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	2b00      	cmp	r3, #0
 8001506:	d030      	beq.n	800156a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
 8001510:	e02b      	b.n	800156a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d027      	beq.n	800156a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
 8001522:	e022      	b.n	800156a <HAL_DMA_IRQHandler+0x29e>
 8001524:	20000034 	.word	0x20000034
 8001528:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0210 	bic.w	r2, r2, #16
 8001548:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	2b00      	cmp	r3, #0
 8001570:	d032      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d022      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d307      	bcc.n	80015b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <HAL_DMA_IRQHandler+0x2ca>
 80015b0:	e000      	b.n	80015b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e000      	b.n	80015d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015d6:	bf00      	nop
    }
  }
}
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop

080015e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b10      	subs	r3, #16
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <DMA_CalcBaseAndBitshift+0x64>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <DMA_CalcBaseAndBitshift+0x68>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d909      	bls.n	8001622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001616:	f023 0303 	bic.w	r3, r3, #3
 800161a:	1d1a      	adds	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
 8001620:	e007      	b.n	8001632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	aaaaaaab 	.word	0xaaaaaaab
 8001648:	08003dc0 	.word	0x08003dc0

0800164c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d855      	bhi.n	8001718 <DMA_CheckFifoParam+0xcc>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <DMA_CheckFifoParam+0x28>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	08001685 	.word	0x08001685
 8001678:	08001697 	.word	0x08001697
 800167c:	08001685 	.word	0x08001685
 8001680:	08001719 	.word	0x08001719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d045      	beq.n	800171c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001694:	e042      	b.n	800171c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800169e:	d13f      	bne.n	8001720 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a4:	e03c      	b.n	8001720 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ae:	d121      	bne.n	80016f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d836      	bhi.n	8001724 <DMA_CheckFifoParam+0xd8>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <DMA_CheckFifoParam+0x70>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d3 	.word	0x080016d3
 80016c4:	080016cd 	.word	0x080016cd
 80016c8:	080016e5 	.word	0x080016e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e02f      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e2:	e021      	b.n	8001728 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ec:	d11e      	bne.n	800172c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016f2:	e01b      	b.n	800172c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d902      	bls.n	8001700 <DMA_CheckFifoParam+0xb4>
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d003      	beq.n	8001706 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016fe:	e018      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      break;
 8001704:	e015      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
      break;
 8001716:	e00b      	b.n	8001730 <DMA_CheckFifoParam+0xe4>
      break;
 8001718:	bf00      	nop
 800171a:	e00a      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 800171c:	bf00      	nop
 800171e:	e008      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001720:	bf00      	nop
 8001722:	e006      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001724:	bf00      	nop
 8001726:	e004      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;   
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001730:	bf00      	nop
    }
  } 
  
  return status; 
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e165      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8154 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x4a>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b12      	cmp	r3, #18
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	69b9      	ldr	r1, [r7, #24]
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d00b      	beq.n	8001826 <HAL_GPIO_Init+0xe6>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800181a:	2b11      	cmp	r3, #17
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b12      	cmp	r3, #18
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80ae 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_GPIO_Init+0x300>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x304>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d025      	beq.n	800195a <HAL_GPIO_Init+0x21a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x308>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01f      	beq.n	8001956 <HAL_GPIO_Init+0x216>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x30c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x212>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x310>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x314>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x20a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_GPIO_Init+0x318>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x206>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x31c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x202>
 800193e:	2306      	movs	r3, #6
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x21c>
 8001942:	2307      	movs	r3, #7
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x21c>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x21c>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x21c>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x21c>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x21c>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x21c>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_GPIO_Init+0x300>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_GPIO_Init+0x320>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c8:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_GPIO_Init+0x320>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae96 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	3724      	adds	r7, #36	; 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d104      	bne.n	8001aba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f806 	bl	8001afc <HAL_GPIO_EXTI_Callback>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e10f      	b.n	8001d46 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f002 f818 	bl	8003b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	; 0x24
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b58:	f001 f888 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a7b      	ldr	r2, [pc, #492]	; (8001d50 <HAL_I2C_Init+0x23c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d807      	bhi.n	8001b78 <HAL_I2C_Init+0x64>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_I2C_Init+0x240>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e006      	b.n	8001b86 <HAL_I2C_Init+0x72>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	; (8001d58 <HAL_I2C_Init+0x244>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0db      	b.n	8001d46 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <HAL_I2C_Init+0x248>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_I2C_Init+0x23c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_I2C_Init+0xb4>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	e009      	b.n	8001bdc <HAL_I2C_Init+0xc8>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <HAL_I2C_Init+0x24c>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3301      	adds	r3, #1
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4956      	ldr	r1, [pc, #344]	; (8001d50 <HAL_I2C_Init+0x23c>)
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	d80d      	bhi.n	8001c18 <HAL_I2C_Init+0x104>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e59      	subs	r1, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	bf38      	it	cc
 8001c14:	2304      	movcc	r3, #4
 8001c16:	e04f      	b.n	8001cb8 <HAL_I2C_Init+0x1a4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d111      	bne.n	8001c44 <HAL_I2C_Init+0x130>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e012      	b.n	8001c6a <HAL_I2C_Init+0x156>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Init+0x15e>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e022      	b.n	8001cb8 <HAL_I2C_Init+0x1a4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10e      	bne.n	8001c98 <HAL_I2C_Init+0x184>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e58      	subs	r0, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	440b      	add	r3, r1
 8001c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c96:	e00f      	b.n	8001cb8 <HAL_I2C_Init+0x1a4>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	6809      	ldr	r1, [r1, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6911      	ldr	r1, [r2, #16]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68d2      	ldr	r2, [r2, #12]
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	000186a0 	.word	0x000186a0
 8001d54:	001e847f 	.word	0x001e847f
 8001d58:	003d08ff 	.word	0x003d08ff
 8001d5c:	431bde83 	.word	0x431bde83
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	460b      	mov	r3, r1
 8001d72:	817b      	strh	r3, [r7, #10]
 8001d74:	4613      	mov	r3, r2
 8001d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff f848 	bl	8000e0c <HAL_GetTick>
 8001d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 80e0 	bne.w	8001f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2319      	movs	r3, #25
 8001d92:	2201      	movs	r2, #1
 8001d94:	4970      	ldr	r1, [pc, #448]	; (8001f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fc34 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	e0d3      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x50>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e0cc      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d007      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2221      	movs	r2, #33	; 0x21
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2210      	movs	r2, #16
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6a3a      	ldr	r2, [r7, #32]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fac2 	bl	80023ac <I2C_MasterRequestWrite>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e08d      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e48:	e066      	b.n	8001f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fcae 	bl	80027b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d107      	bne.n	8001e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06b      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_I2C_Master_Transmit+0x188>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d017      	beq.n	8001eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	6a39      	ldr	r1, [r7, #32]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fc9e 	bl	8002832 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d107      	bne.n	8001f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e01a      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d194      	bne.n	8001e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	00100002 	.word	0x00100002
 8001f5c:	ffff0000 	.word	0xffff0000

08001f60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7fe ff4a 	bl	8000e0c <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 820b 	bne.w	800239e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2319      	movs	r3, #25
 8001f8e:	2201      	movs	r2, #1
 8001f90:	497c      	ldr	r1, [pc, #496]	; (8002184 <HAL_I2C_Master_Receive+0x224>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fb36 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e1fe      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_I2C_Master_Receive+0x50>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e1f7      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d007      	beq.n	8001fd6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2222      	movs	r2, #34	; 0x22
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_I2C_Master_Receive+0x228>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa3a 	bl	8002498 <I2C_MasterRequestRead>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1b8      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e18c      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	2b01      	cmp	r3, #1
 8002064:	d11b      	bne.n	800209e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e16c      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d11b      	bne.n	80020de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	e14c      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002104:	e138      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	2b03      	cmp	r3, #3
 800210c:	f200 80f1 	bhi.w	80022f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b01      	cmp	r3, #1
 8002116:	d123      	bne.n	8002160 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fbc9 	bl	80028b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e139      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800215e:	e10b      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b02      	cmp	r3, #2
 8002166:	d14e      	bne.n	8002206 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	2200      	movs	r2, #0
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <HAL_I2C_Master_Receive+0x22c>)
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fa46 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e10e      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
 8002182:	bf00      	nop
 8002184:	00100002 	.word	0x00100002
 8002188:	ffff0000 	.word	0xffff0000
 800218c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002204:	e0b8      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	2200      	movs	r2, #0
 800220e:	4966      	ldr	r1, [pc, #408]	; (80023a8 <HAL_I2C_Master_Receive+0x448>)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f9f7 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0bf      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	2200      	movs	r2, #0
 800226a:	494f      	ldr	r1, [pc, #316]	; (80023a8 <HAL_I2C_Master_Receive+0x448>)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f9c9 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e091      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f0:	e042      	b.n	8002378 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fadc 	bl	80028b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e04c      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d118      	bne.n	8002378 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	f47f aec2 	bne.w	8002106 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010004 	.word	0x00010004

080023ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	460b      	mov	r3, r1
 80023ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d006      	beq.n	80023d6 <I2C_MasterRequestWrite+0x2a>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d003      	beq.n	80023d6 <I2C_MasterRequestWrite+0x2a>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d4:	d108      	bne.n	80023e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e00b      	b.n	8002400 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	d107      	bne.n	8002400 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f8f9 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e035      	b.n	8002488 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002424:	d108      	bne.n	8002438 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	e01b      	b.n	8002470 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002438:	897b      	ldrh	r3, [r7, #10]
 800243a:	11db      	asrs	r3, r3, #7
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 0306 	and.w	r3, r3, #6
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f063 030f 	orn	r3, r3, #15
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <I2C_MasterRequestWrite+0xe4>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f92b 	bl	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e010      	b.n	8002488 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <I2C_MasterRequestWrite+0xe8>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f91b 	bl	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00010008 	.word	0x00010008
 8002494:	00010002 	.word	0x00010002

08002498 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d006      	beq.n	80024d2 <I2C_MasterRequestRead+0x3a>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d003      	beq.n	80024d2 <I2C_MasterRequestRead+0x3a>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00b      	b.n	80024fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	2b11      	cmp	r3, #17
 80024ea:	d107      	bne.n	80024fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f87b 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e06d      	b.n	80025f4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002520:	d108      	bne.n	8002534 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	e053      	b.n	80025dc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002534:	897b      	ldrh	r3, [r7, #10]
 8002536:	11db      	asrs	r3, r3, #7
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 0306 	and.w	r3, r3, #6
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f063 030f 	orn	r3, r3, #15
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	492a      	ldr	r1, [pc, #168]	; (80025fc <I2C_MasterRequestRead+0x164>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f8ad 	bl	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e048      	b.n	80025f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4923      	ldr	r1, [pc, #140]	; (8002600 <I2C_MasterRequestRead+0x168>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f89d 	bl	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e038      	b.n	80025f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f825 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e017      	b.n	80025f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	11db      	asrs	r3, r3, #7
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0306 	and.w	r3, r3, #6
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f063 030e 	orn	r3, r3, #14
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <I2C_MasterRequestRead+0x168>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f865 	bl	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00010008 	.word	0x00010008
 8002600:	00010002 	.word	0x00010002

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e025      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d021      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fbf5 	bl	8000e0c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e023      	b.n	80026aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10d      	bne.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	e00c      	b.n	80026a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d0b6      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c0:	e051      	b.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d123      	bne.n	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e046      	b.n	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d021      	beq.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7fe fb73 	bl	8000e0c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d116      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e020      	b.n	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10c      	bne.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e00b      	b.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d18d      	bne.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027bc:	e02d      	b.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8ce 	bl	8002960 <I2C_IsAcknowledgeFailed>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e02d      	b.n	800282a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d021      	beq.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d6:	f7fe fb19 	bl	8000e0c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e007      	b.n	800282a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d1ca      	bne.n	80027be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800283e:	e02d      	b.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f88d 	bl	8002960 <I2C_IsAcknowledgeFailed>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e02d      	b.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d021      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002858:	f7fe fad8 	bl	8000e0c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d302      	bcc.n	800286e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e007      	b.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d1ca      	bne.n	8002840 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028c0:	e042      	b.n	8002948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d119      	bne.n	8002904 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e029      	b.n	8002958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7fe fa82 	bl	8000e0c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d302      	bcc.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d1b5      	bne.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d11b      	bne.n	80029b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0ca      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b6      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494c      	ldr	r1, [pc, #304]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07d      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06d      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e065      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4933      	ldr	r1, [pc, #204]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe f9ac 	bl	8000e0c <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe f9a8 	bl	8000e0c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04d      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_RCC_ClockConfig+0x1b4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e030      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4915      	ldr	r1, [pc, #84]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490d      	ldr	r1, [pc, #52]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f8a5 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f90e 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08003dc8 	.word	0x08003dc8
 8002b80:	20000034 	.word	0x20000034

08002b84 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d129      	bne.n	8002bea <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	481f      	ldr	r0, [pc, #124]	; (8002c4c <HAL_RCC_MCOConfig+0xc8>)
 8002bd0:	f7fe fdb6 	bl	8001740 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	4919      	ldr	r1, [pc, #100]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002be8:	e029      	b.n	8002c3e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4619      	mov	r1, r3
 8002c22:	480b      	ldr	r0, [pc, #44]	; (8002c50 <HAL_RCC_MCOConfig+0xcc>)
 8002c24:	f7fe fd8c 	bl	8001740 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	00d9      	lsls	r1, r3, #3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	4903      	ldr	r1, [pc, #12]	; (8002c48 <HAL_RCC_MCOConfig+0xc4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
}
 8002c3e:	bf00      	nop
 8002c40:	3730      	adds	r7, #48	; 0x30
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020800 	.word	0x40020800

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000034 	.word	0x20000034

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4601      	mov	r1, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08003dd8 	.word	0x08003dd8

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cae:	4b9f      	ldr	r3, [pc, #636]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	f200 8130 	bhi.w	8002f1c <HAL_RCC_GetSysClockFreq+0x288>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	08002f1d 	.word	0x08002f1d
 8002ccc:	08002f1d 	.word	0x08002f1d
 8002cd0:	08002f1d 	.word	0x08002f1d
 8002cd4:	08002cff 	.word	0x08002cff
 8002cd8:	08002f1d 	.word	0x08002f1d
 8002cdc:	08002f1d 	.word	0x08002f1d
 8002ce0:	08002f1d 	.word	0x08002f1d
 8002ce4:	08002d05 	.word	0x08002d05
 8002ce8:	08002f1d 	.word	0x08002f1d
 8002cec:	08002f1d 	.word	0x08002f1d
 8002cf0:	08002f1d 	.word	0x08002f1d
 8002cf4:	08002e13 	.word	0x08002e13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b8d      	ldr	r3, [pc, #564]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002cfa:	613b      	str	r3, [r7, #16]
       break;
 8002cfc:	e111      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b8d      	ldr	r3, [pc, #564]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d00:	613b      	str	r3, [r7, #16]
      break;
 8002d02:	e10e      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d023      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea03 0501 	and.w	r5, r3, r1
 8002d30:	ea04 0602 	and.w	r6, r4, r2
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d36:	fb02 f106 	mul.w	r1, r2, r6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	fb02 f205 	mul.w	r2, r2, r5
 8002d40:	440a      	add	r2, r1
 8002d42:	497c      	ldr	r1, [pc, #496]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d44:	fba5 0101 	umull	r0, r1, r5, r1
 8002d48:	1853      	adds	r3, r2, r1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f04f 0400 	mov.w	r4, #0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	f7fd fe73 	bl	8000a40 <__aeabi_uldivmod>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e049      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	f04f 0400 	mov.w	r4, #0
 8002d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	ea03 0501 	and.w	r5, r3, r1
 8002d78:	ea04 0602 	and.w	r6, r4, r2
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	0154      	lsls	r4, r2, #5
 8002d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d8e:	014b      	lsls	r3, r1, #5
 8002d90:	4619      	mov	r1, r3
 8002d92:	4622      	mov	r2, r4
 8002d94:	1b49      	subs	r1, r1, r5
 8002d96:	eb62 0206 	sbc.w	r2, r2, r6
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f04f 0400 	mov.w	r4, #0
 8002da2:	0194      	lsls	r4, r2, #6
 8002da4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002da8:	018b      	lsls	r3, r1, #6
 8002daa:	1a5b      	subs	r3, r3, r1
 8002dac:	eb64 0402 	sbc.w	r4, r4, r2
 8002db0:	f04f 0100 	mov.w	r1, #0
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	00e2      	lsls	r2, r4, #3
 8002dba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dbe:	00d9      	lsls	r1, r3, #3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4614      	mov	r4, r2
 8002dc4:	195b      	adds	r3, r3, r5
 8002dc6:	eb44 0406 	adc.w	r4, r4, r6
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	02a2      	lsls	r2, r4, #10
 8002dd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dd8:	0299      	lsls	r1, r3, #10
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	4621      	mov	r1, r4
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	f7fd fe28 	bl	8000a40 <__aeabi_uldivmod>
 8002df0:	4603      	mov	r3, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df6:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	3301      	adds	r3, #1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	613b      	str	r3, [r7, #16]
      break;
 8002e10:	e087      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e12:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1c:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	f04f 0400 	mov.w	r4, #0
 8002e32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	ea03 0501 	and.w	r5, r3, r1
 8002e3e:	ea04 0602 	and.w	r6, r4, r2
 8002e42:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e44:	fb02 f106 	mul.w	r1, r2, r6
 8002e48:	2200      	movs	r2, #0
 8002e4a:	fb02 f205 	mul.w	r2, r2, r5
 8002e4e:	440a      	add	r2, r1
 8002e50:	4938      	ldr	r1, [pc, #224]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e52:	fba5 0101 	umull	r0, r1, r5, r1
 8002e56:	1853      	adds	r3, r2, r1
 8002e58:	4619      	mov	r1, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4623      	mov	r3, r4
 8002e64:	f7fd fdec 	bl	8000a40 <__aeabi_uldivmod>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e049      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	ea03 0501 	and.w	r5, r3, r1
 8002e86:	ea04 0602 	and.w	r6, r4, r2
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	0154      	lsls	r4, r2, #5
 8002e98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e9c:	014b      	lsls	r3, r1, #5
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	1b49      	subs	r1, r1, r5
 8002ea4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0194      	lsls	r4, r2, #6
 8002eb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	1a5b      	subs	r3, r3, r1
 8002eba:	eb64 0402 	sbc.w	r4, r4, r2
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ecc:	00d9      	lsls	r1, r3, #3
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	195b      	adds	r3, r3, r5
 8002ed4:	eb44 0406 	adc.w	r4, r4, r6
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	02a2      	lsls	r2, r4, #10
 8002ee2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ee6:	0299      	lsls	r1, r3, #10
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	4621      	mov	r1, r4
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f04f 0400 	mov.w	r4, #0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	f7fd fda1 	bl	8000a40 <__aeabi_uldivmod>
 8002efe:	4603      	mov	r3, r0
 8002f00:	460c      	mov	r4, r1
 8002f02:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x298>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0f1b      	lsrs	r3, r3, #28
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	613b      	str	r3, [r7, #16]
      break;
 8002f1a:	e002      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002f1e:	613b      	str	r3, [r7, #16]
      break;
 8002f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f22:	693b      	ldr	r3, [r7, #16]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	017d7840 	.word	0x017d7840

08002f38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8083 	beq.w	8003058 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f52:	4b95      	ldr	r3, [pc, #596]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d019      	beq.n	8002f92 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f76:	d00c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f78:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f84:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f90:	d10b      	bne.n	8002faa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f92:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d05b      	beq.n	8003056 <HAL_RCC_OscConfig+0x11e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d157      	bne.n	8003056 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e216      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x8a>
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a7b      	ldr	r2, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e01d      	b.n	8002ffe <HAL_RCC_OscConfig+0xc6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xae>
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0xc6>
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6f      	ldr	r2, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6c      	ldr	r2, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fd ff01 	bl	8000e0c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300e:	f7fd fefd 	bl	8000e0c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b64      	cmp	r3, #100	; 0x64
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1db      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003020:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0xd6>
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fd feed 	bl	8000e0c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003036:	f7fd fee9 	bl	8000e0c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1c7      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0xfe>
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003056:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d06f      	beq.n	8003144 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003078:	2b08      	cmp	r3, #8
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d11c      	bne.n	80030ce <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003094:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x180>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e18f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4938      	ldr	r1, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030cc:	e03a      	b.n	8003144 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCC_OscConfig+0x274>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fd fe96 	bl	8000e0c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fd fe92 	bl	8000e0c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e170      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4925      	ldr	r1, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	e015      	b.n	8003144 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_OscConfig+0x274>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fd fe75 	bl	8000e0c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003126:	f7fd fe71 	bl	8000e0c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e14f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d037      	beq.n	80031c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003158:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x278>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd fe55 	bl	8000e0c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd fe51 	bl	8000e0c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e12f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x22e>
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_OscConfig+0x278>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fd fe3e 	bl	8000e0c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003192:	e00f      	b.n	80031b4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003194:	f7fd fe3a 	bl	8000e0c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d908      	bls.n	80031b4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e118      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	4b8a      	ldr	r3, [pc, #552]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e9      	bne.n	8003194 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8097 	beq.w	80032fc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b7f      	ldr	r3, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b7c      	ldr	r3, [pc, #496]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fdf9 	bl	8000e0c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fd fdf5 	bl	8000e0c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0d3      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x4ac>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x31a>
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0x354>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x33c>
 800325a:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a60      	ldr	r2, [pc, #384]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a5d      	ldr	r2, [pc, #372]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x354>
 8003274:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a59      	ldr	r2, [pc, #356]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a56      	ldr	r2, [pc, #344]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003286:	f023 0304 	bic.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd fdba 	bl	8000e0c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fd fdb6 	bl	8000e0c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e092      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b2:	4b4b      	ldr	r3, [pc, #300]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ee      	beq.n	800329c <HAL_RCC_OscConfig+0x364>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd fda4 	bl	8000e0c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fd fda0 	bl	8000e0c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e07c      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ee      	bne.n	80032c8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d068      	beq.n	80033d6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d060      	beq.n	80033d2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d145      	bne.n	80033a4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_RCC_OscConfig+0x4b0>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fd fd75 	bl	8000e0c <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fd fd71 	bl	8000e0c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e04f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	019b      	lsls	r3, r3, #6
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	491b      	ldr	r1, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_RCC_OscConfig+0x4b0>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fd fd46 	bl	8000e0c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd fd42 	bl	8000e0c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e020      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x44c>
 80033a2:	e018      	b.n	80033d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_RCC_OscConfig+0x4b0>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd fd2f 	bl	8000e0c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fd fd2b 	bl	8000e0c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e009      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_OscConfig+0x4a8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0x47a>
 80033d0:	e001      	b.n	80033d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42470060 	.word	0x42470060

080033ec <ADC_init>:

static uint8_t tmp_reg;


void ADC_init(I2C_HandleTypeDef *p_hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
	adc_i2c = p_hi2c;
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <ADC_init+0xc8>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]

	tmp_reg = 0;
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <ADC_init+0xcc>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]

	tmp_reg |= (ADC_LOW_POW_MODE_BIT<<7); //bit 7
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <ADC_init+0xcc>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <ADC_init+0xcc>)
 800340c:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_INP_MUX_CONF_BIT<<4); //bit 6, 5, 4
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <ADC_init+0xcc>)
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <ADC_init+0xcc>)
 8003414:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_PRG_GAIN_AMP_BIT<<1); //bit 3, 2, 1
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <ADC_init+0xcc>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <ADC_init+0xcc>)
 8003422:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DEV_OP_MODE_BIT); //bit 0
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <ADC_init+0xcc>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <ADC_init+0xcc>)
 8003430:	701a      	strb	r2, [r3, #0]
	conf_buffer[1] = tmp_reg;
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <ADC_init+0xcc>)
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <ADC_init+0xd0>)
 8003438:	705a      	strb	r2, [r3, #1]


	tmp_reg = 0;
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <ADC_init+0xcc>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DATA_RATE_BIT)<<5; //bit 7, 6, 5
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <ADC_init+0xcc>)
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <ADC_init+0xcc>)
 8003446:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_MODE_BIT)<<4;  //bit 4
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <ADC_init+0xcc>)
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <ADC_init+0xcc>)
 800344e:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_POL_BIT)<<3;   //bit 3
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <ADC_init+0xcc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <ADC_init+0xcc>)
 800345c:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_LAT_BIT)<<2;   //bit 2
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <ADC_init+0xcc>)
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <ADC_init+0xcc>)
 8003464:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_QUEUE_BIT)<<1; //bit 1, 0
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <ADC_init+0xcc>)
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <ADC_init+0xcc>)
 800346c:	701a      	strb	r2, [r3, #0]
	conf_buffer[2] = tmp_reg;
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <ADC_init+0xcc>)
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <ADC_init+0xd0>)
 8003474:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,     3, 250);
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <ADC_init+0xc8>)
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	23fa      	movs	r3, #250	; 0xfa
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2303      	movs	r3, #3
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <ADC_init+0xd0>)
 8003482:	2190      	movs	r1, #144	; 0x90
 8003484:	f7fe fc6e 	bl	8001d64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, LO_cmp_buffer,   3, 250);
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <ADC_init+0xc8>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	23fa      	movs	r3, #250	; 0xfa
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2303      	movs	r3, #3
 8003492:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <ADC_init+0xd4>)
 8003494:	2190      	movs	r1, #144	; 0x90
 8003496:	f7fe fc65 	bl	8001d64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, HI_cmp_buffer,   3, 250);
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <ADC_init+0xc8>)
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	23fa      	movs	r3, #250	; 0xfa
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2303      	movs	r3, #3
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <ADC_init+0xd8>)
 80034a6:	2190      	movs	r1, #144	; 0x90
 80034a8:	f7fe fc5c 	bl	8001d64 <HAL_I2C_Master_Transmit>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000054 	.word	0x20000054
 80034b8:	20000060 	.word	0x20000060
 80034bc:	20000008 	.word	0x20000008
 80034c0:	2000000c 	.word	0x2000000c
 80034c4:	20000010 	.word	0x20000010

080034c8 <ADC_do_conversion>:

float ADC_do_conversion()
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,   3, 250); //command itself
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <ADC_do_conversion+0xb4>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	23fa      	movs	r3, #250	; 0xfa
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2303      	movs	r3, #3
 80034d8:	4a29      	ldr	r2, [pc, #164]	; (8003580 <ADC_do_conversion+0xb8>)
 80034da:	2190      	movs	r1, #144	; 0x90
 80034dc:	f7fe fc42 	bl	8001d64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS<<1, ADC_CONV_REG, 1, 250);
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <ADC_do_conversion+0xb4>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	23fa      	movs	r3, #250	; 0xfa
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2301      	movs	r3, #1
 80034ea:	2200      	movs	r2, #0
 80034ec:	2190      	movs	r1, #144	; 0x90
 80034ee:	f7fe fc39 	bl	8001d64 <HAL_I2C_Master_Transmit>
    HAL_Delay(25);
 80034f2:	2019      	movs	r0, #25
 80034f4:	f7fd fc96 	bl	8000e24 <HAL_Delay>
    HAL_I2C_Master_Receive(adc_i2c, ADC_ADDRESS<<1, lux, 2, 250);
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <ADC_do_conversion+0xb4>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	23fa      	movs	r3, #250	; 0xfa
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2302      	movs	r3, #2
 8003502:	4a20      	ldr	r2, [pc, #128]	; (8003584 <ADC_do_conversion+0xbc>)
 8003504:	2190      	movs	r1, #144	; 0x90
 8003506:	f7fe fd2b 	bl	8001f60 <HAL_I2C_Master_Receive>

    reading = (lux[0] << 8 | lux[1]);
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <ADC_do_conversion+0xbc>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	b21a      	sxth	r2, r3
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <ADC_do_conversion+0xbc>)
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	b21b      	sxth	r3, r3
 8003518:	4313      	orrs	r3, r2
 800351a:	b21b      	sxth	r3, r3
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <ADC_do_conversion+0xc0>)
 8003520:	801a      	strh	r2, [r3, #0]
    voltage = (float)reading*((gains[ADC_PRG_GAIN_AMP_BIT-1])/(32768.0));
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <ADC_do_conversion+0xc0>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	ee17 0a90 	vmov	r0, s15
 8003532:	f7fc ffcb 	bl	80004cc <__aeabi_f2d>
 8003536:	4604      	mov	r4, r0
 8003538:	460d      	mov	r5, r1
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <ADC_do_conversion+0xc4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc ffc4 	bl	80004cc <__aeabi_f2d>
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <ADC_do_conversion+0xc8>)
 800354a:	f7fd f941 	bl	80007d0 <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fd f811 	bl	800057c <__aeabi_dmul>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	4618      	mov	r0, r3
 8003560:	4621      	mov	r1, r4
 8003562:	f7fd fa1d 	bl	80009a0 <__aeabi_d2f>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <ADC_do_conversion+0xcc>)
 800356a:	601a      	str	r2, [r3, #0]

    return voltage;
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <ADC_do_conversion+0xcc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	ee07 3a90 	vmov	s15, r3
}
 8003574:	eeb0 0a67 	vmov.f32	s0, s15
 8003578:	46bd      	mov	sp, r7
 800357a:	bdb0      	pop	{r4, r5, r7, pc}
 800357c:	20000054 	.word	0x20000054
 8003580:	20000008 	.word	0x20000008
 8003584:	20000058 	.word	0x20000058
 8003588:	2000005a 	.word	0x2000005a
 800358c:	20000014 	.word	0x20000014
 8003590:	40e00000 	.word	0x40e00000
 8003594:	2000005c 	.word	0x2000005c

08003598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800359e:	f7fd fbcf 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a2:	f000 f817 	bl	80035d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a6:	f000 f8fd 	bl	80037a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80035aa:	f000 f8db 	bl	8003764 <MX_DMA_Init>
  MX_I2C1_Init();
 80035ae:	f000 f8ab 	bl	8003708 <MX_I2C1_Init>
  MX_DCMI_Init();
 80035b2:	f000 f875 	bl	80036a0 <MX_DCMI_Init>
  /* USER CODE BEGIN 2 */
  //OV7676_init()
  ADC_init(&hi2c1);
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <main+0x38>)
 80035b8:	f7ff ff18 	bl	80033ec <ADC_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    measure = ADC_do_conversion();
 80035bc:	f7ff ff84 	bl	80034c8 <ADC_do_conversion>
 80035c0:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_Delay(1000);
 80035c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035c8:	f7fd fc2c 	bl	8000e24 <HAL_Delay>
    measure = ADC_do_conversion();
 80035cc:	e7f6      	b.n	80035bc <main+0x24>
 80035ce:	bf00      	nop
 80035d0:	20000068 	.word	0x20000068

080035d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b094      	sub	sp, #80	; 0x50
 80035d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	2234      	movs	r2, #52	; 0x34
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fbd8 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <SystemClock_Config+0xc4>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <SystemClock_Config+0xc4>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <SystemClock_Config+0xc4>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003614:	2300      	movs	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <SystemClock_Config+0xc8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <SystemClock_Config+0xc8>)
 8003622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <SystemClock_Config+0xc8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003634:	2302      	movs	r3, #2
 8003636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003638:	2301      	movs	r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800363c:	2310      	movs	r3, #16
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003640:	2300      	movs	r3, #0
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fc75 	bl	8002f38 <HAL_RCC_OscConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003654:	f000 f95c 	bl	8003910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003658:	230f      	movs	r3, #15
 800365a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff f9a4 	bl	80029c0 <HAL_RCC_ClockConfig>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800367e:	f000 f947 	bl	8003910 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_4);
 8003682:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003686:	2100      	movs	r1, #0
 8003688:	2000      	movs	r0, #0
 800368a:	f7ff fa7b 	bl	8002b84 <HAL_RCC_MCOConfig>
}
 800368e:	bf00      	nop
 8003690:	3750      	adds	r7, #80	; 0x50
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000

080036a0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <MX_DCMI_Init+0x60>)
 80036a6:	4a17      	ldr	r2, [pc, #92]	; (8003704 <MX_DCMI_Init+0x64>)
 80036a8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <MX_DCMI_Init+0x60>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <MX_DCMI_Init+0x60>)
 80036b2:	2220      	movs	r2, #32
 80036b4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <MX_DCMI_Init+0x60>)
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <MX_DCMI_Init+0x60>)
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <MX_DCMI_Init+0x60>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <MX_DCMI_Init+0x60>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <MX_DCMI_Init+0x60>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <MX_DCMI_Init+0x60>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <MX_DCMI_Init+0x60>)
 80036dc:	2200      	movs	r2, #0
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <MX_DCMI_Init+0x60>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <MX_DCMI_Init+0x60>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80036ec:	4804      	ldr	r0, [pc, #16]	; (8003700 <MX_DCMI_Init+0x60>)
 80036ee:	f7fd fccd 	bl	800108c <HAL_DCMI_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80036f8:	f000 f90a 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	2000011c 	.word	0x2000011c
 8003704:	50050000 	.word	0x50050000

08003708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <MX_I2C1_Init+0x50>)
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <MX_I2C1_Init+0x54>)
 8003710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <MX_I2C1_Init+0x50>)
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <MX_I2C1_Init+0x58>)
 8003716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <MX_I2C1_Init+0x50>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <MX_I2C1_Init+0x50>)
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <MX_I2C1_Init+0x50>)
 8003726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800372a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <MX_I2C1_Init+0x50>)
 800372e:	2200      	movs	r2, #0
 8003730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <MX_I2C1_Init+0x50>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <MX_I2C1_Init+0x50>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <MX_I2C1_Init+0x50>)
 8003740:	2200      	movs	r2, #0
 8003742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003744:	4804      	ldr	r0, [pc, #16]	; (8003758 <MX_I2C1_Init+0x50>)
 8003746:	f7fe f9e5 	bl	8001b14 <HAL_I2C_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003750:	f000 f8de 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000068 	.word	0x20000068
 800375c:	40005400 	.word	0x40005400
 8003760:	000186a0 	.word	0x000186a0

08003764 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MX_DMA_Init+0x3c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <MX_DMA_Init+0x3c>)
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <MX_DMA_Init+0x3c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2039      	movs	r0, #57	; 0x39
 800378c:	f7fd fc47 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003790:	2039      	movs	r0, #57	; 0x39
 8003792:	f7fd fc60 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	4b4f      	ldr	r3, [pc, #316]	; (80038fc <MX_GPIO_Init+0x158>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a4e      	ldr	r2, [pc, #312]	; (80038fc <MX_GPIO_Init+0x158>)
 80037c4:	f043 0310 	orr.w	r3, r3, #16
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <MX_GPIO_Init+0x158>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	4b48      	ldr	r3, [pc, #288]	; (80038fc <MX_GPIO_Init+0x158>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a47      	ldr	r2, [pc, #284]	; (80038fc <MX_GPIO_Init+0x158>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b45      	ldr	r3, [pc, #276]	; (80038fc <MX_GPIO_Init+0x158>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <MX_GPIO_Init+0x158>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a40      	ldr	r2, [pc, #256]	; (80038fc <MX_GPIO_Init+0x158>)
 80037fc:	f043 0320 	orr.w	r3, r3, #32
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <MX_GPIO_Init+0x158>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <MX_GPIO_Init+0x158>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a39      	ldr	r2, [pc, #228]	; (80038fc <MX_GPIO_Init+0x158>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <MX_GPIO_Init+0x158>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <MX_GPIO_Init+0x158>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a32      	ldr	r2, [pc, #200]	; (80038fc <MX_GPIO_Init+0x158>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <MX_GPIO_Init+0x158>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <MX_GPIO_Init+0x158>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <MX_GPIO_Init+0x158>)
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <MX_GPIO_Init+0x158>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <MX_GPIO_Init+0x158>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a24      	ldr	r2, [pc, #144]	; (80038fc <MX_GPIO_Init+0x158>)
 800386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <MX_GPIO_Init+0x158>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_LED_GPIO_Port, ADC_LED_Pin, GPIO_PIN_RESET);
 800387e:	2200      	movs	r2, #0
 8003880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003884:	481e      	ldr	r0, [pc, #120]	; (8003900 <MX_GPIO_Init+0x15c>)
 8003886:	f7fe f8ed 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800388a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <MX_GPIO_Init+0x160>)
 8003892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	4619      	mov	r1, r3
 800389e:	481a      	ldr	r0, [pc, #104]	; (8003908 <MX_GPIO_Init+0x164>)
 80038a0:	f7fd ff4e 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_LED_Pin */
  GPIO_InitStruct.Pin = ADC_LED_Pin;
 80038a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038aa:	2301      	movs	r3, #1
 80038ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ADC_LED_GPIO_Port, &GPIO_InitStruct);
 80038b6:	f107 031c 	add.w	r3, r7, #28
 80038ba:	4619      	mov	r1, r3
 80038bc:	4810      	ldr	r0, [pc, #64]	; (8003900 <MX_GPIO_Init+0x15c>)
 80038be:	f7fd ff3f 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	480b      	ldr	r0, [pc, #44]	; (800390c <MX_GPIO_Init+0x168>)
 80038e0:	f7fd ff2e 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2028      	movs	r0, #40	; 0x28
 80038ea:	f7fd fb98 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80038ee:	2028      	movs	r0, #40	; 0x28
 80038f0:	f7fd fbb1 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 80038f4:	bf00      	nop
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020400 	.word	0x40020400
 8003904:	10110000 	.word	0x10110000
 8003908:	40021400 	.word	0x40021400
 800390c:	40020000 	.word	0x40020000

08003910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_MspInit+0x4c>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a0f      	ldr	r2, [pc, #60]	; (800396c <HAL_MspInit+0x4c>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_MspInit+0x4c>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_MspInit+0x4c>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a08      	ldr	r2, [pc, #32]	; (800396c <HAL_MspInit+0x4c>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_MspInit+0x4c>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6f      	ldr	r2, [pc, #444]	; (8003b4c <HAL_DCMI_MspInit+0x1dc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	f040 80d7 	bne.w	8003b42 <HAL_DCMI_MspInit+0x1d2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	4a6c      	ldr	r2, [pc, #432]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6353      	str	r3, [r2, #52]	; 0x34
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	4b66      	ldr	r3, [pc, #408]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039ba:	f043 0310 	orr.w	r3, r3, #16
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4a5e      	ldr	r2, [pc, #376]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6313      	str	r3, [r2, #48]	; 0x30
 80039dc:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4a57      	ldr	r2, [pc, #348]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b55      	ldr	r3, [pc, #340]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	6313      	str	r3, [r2, #48]	; 0x30
 8003a14:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	4a49      	ldr	r2, [pc, #292]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a30:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_DCMI_MspInit+0x1e0>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003a3c:	2370      	movs	r3, #112	; 0x70
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a4c:	230d      	movs	r3, #13
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a54:	4619      	mov	r1, r3
 8003a56:	483f      	ldr	r0, [pc, #252]	; (8003b54 <HAL_DCMI_MspInit+0x1e4>)
 8003a58:	f7fd fe72 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003a5c:	2350      	movs	r3, #80	; 0x50
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a6c:	230d      	movs	r3, #13
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a74:	4619      	mov	r1, r3
 8003a76:	4838      	ldr	r0, [pc, #224]	; (8003b58 <HAL_DCMI_MspInit+0x1e8>)
 8003a78:	f7fd fe62 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a7c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a8e:	230d      	movs	r3, #13
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a96:	4619      	mov	r1, r3
 8003a98:	4830      	ldr	r0, [pc, #192]	; (8003b5c <HAL_DCMI_MspInit+0x1ec>)
 8003a9a:	f7fd fe51 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003aae:	230d      	movs	r3, #13
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4829      	ldr	r0, [pc, #164]	; (8003b60 <HAL_DCMI_MspInit+0x1f0>)
 8003aba:	f7fd fe41 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	2300      	movs	r3, #0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003ad0:	230d      	movs	r3, #13
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4822      	ldr	r0, [pc, #136]	; (8003b64 <HAL_DCMI_MspInit+0x1f4>)
 8003adc:	f7fd fe30 	bl	8001740 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_DCMI_MspInit+0x1fc>)
 8003ae4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aec:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af4:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b00:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b08:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b10:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b18:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003b26:	4810      	ldr	r0, [pc, #64]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b28:	f7fd fb22 	bl	8001170 <HAL_DMA_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_DCMI_MspInit+0x1c6>
    {
      Error_Handler();
 8003b32:	f7ff feed 	bl	8003910 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b3a:	649a      	str	r2, [r3, #72]	; 0x48
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_DCMI_MspInit+0x1f8>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003b42:	bf00      	nop
 8003b44:	3738      	adds	r7, #56	; 0x38
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	50050000 	.word	0x50050000
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021800 	.word	0x40021800
 8003b68:	200000bc 	.word	0x200000bc
 8003b6c:	40026428 	.word	0x40026428

08003b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_I2C_MspInit+0x84>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d12c      	bne.n	8003bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bb4:	2312      	movs	r3, #18
 8003bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4619      	mov	r1, r3
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <HAL_I2C_MspInit+0x8c>)
 8003bcc:	f7fd fdb8 	bl	8001740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bde:	6413      	str	r3, [r2, #64]	; 0x40
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_I2C_MspInit+0x88>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bec:	bf00      	nop
 8003bee:	3728      	adds	r7, #40	; 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40005400 	.word	0x40005400
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020400 	.word	0x40020400

08003c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <BusFault_Handler+0x4>

08003c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <UsageFault_Handler+0x4>

08003c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c54:	f7fd f8c6 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c64:	f7fd ff32 	bl	8001acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_TogglePin(ADC_LED_GPIO_Port, ADC_LED_Pin);
 8003c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <EXTI15_10_IRQHandler+0x1c>)
 8003c6e:	f7fd ff12 	bl	8001a96 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40020400 	.word	0x40020400

08003c7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003c80:	4802      	ldr	r0, [pc, #8]	; (8003c8c <DMA2_Stream1_IRQHandler+0x10>)
 8003c82:	f7fd fb23 	bl	80012cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200000bc 	.word	0x200000bc

08003c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <SystemInit+0x60>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <SystemInit+0x60>)
 8003c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <SystemInit+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <SystemInit+0x64>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <SystemInit+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <SystemInit+0x64>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <SystemInit+0x64>)
 8003cbc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <SystemInit+0x64>)
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <SystemInit+0x68>)
 8003cca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <SystemInit+0x64>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a08      	ldr	r2, [pc, #32]	; (8003cf4 <SystemInit+0x64>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <SystemInit+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <SystemInit+0x60>)
 8003ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ce4:	609a      	str	r2, [r3, #8]
#endif
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	24003010 	.word	0x24003010

08003cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d02:	e003      	b.n	8003d0c <LoopCopyDataInit>

08003d04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d0a:	3104      	adds	r1, #4

08003d0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d0c:	480b      	ldr	r0, [pc, #44]	; (8003d3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d14:	d3f6      	bcc.n	8003d04 <CopyDataInit>
  ldr  r2, =_sbss
 8003d16:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d18:	e002      	b.n	8003d20 <LoopFillZerobss>

08003d1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d1c:	f842 3b04 	str.w	r3, [r2], #4

08003d20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d24:	d3f9      	bcc.n	8003d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d26:	f7ff ffb3 	bl	8003c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f000 f811 	bl	8003d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2e:	f7ff fc33 	bl	8003598 <main>
  bx  lr    
 8003d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d38:	08003df0 	.word	0x08003df0
  ldr  r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d40:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8003d44:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8003d48:	2000016c 	.word	0x2000016c

08003d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC_IRQHandler>
	...

08003d50 <__libc_init_array>:
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	4e0d      	ldr	r6, [pc, #52]	; (8003d88 <__libc_init_array+0x38>)
 8003d54:	4c0d      	ldr	r4, [pc, #52]	; (8003d8c <__libc_init_array+0x3c>)
 8003d56:	1ba4      	subs	r4, r4, r6
 8003d58:	10a4      	asrs	r4, r4, #2
 8003d5a:	2500      	movs	r5, #0
 8003d5c:	42a5      	cmp	r5, r4
 8003d5e:	d109      	bne.n	8003d74 <__libc_init_array+0x24>
 8003d60:	4e0b      	ldr	r6, [pc, #44]	; (8003d90 <__libc_init_array+0x40>)
 8003d62:	4c0c      	ldr	r4, [pc, #48]	; (8003d94 <__libc_init_array+0x44>)
 8003d64:	f000 f820 	bl	8003da8 <_init>
 8003d68:	1ba4      	subs	r4, r4, r6
 8003d6a:	10a4      	asrs	r4, r4, #2
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	42a5      	cmp	r5, r4
 8003d70:	d105      	bne.n	8003d7e <__libc_init_array+0x2e>
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d78:	4798      	blx	r3
 8003d7a:	3501      	adds	r5, #1
 8003d7c:	e7ee      	b.n	8003d5c <__libc_init_array+0xc>
 8003d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d82:	4798      	blx	r3
 8003d84:	3501      	adds	r5, #1
 8003d86:	e7f2      	b.n	8003d6e <__libc_init_array+0x1e>
 8003d88:	08003de8 	.word	0x08003de8
 8003d8c:	08003de8 	.word	0x08003de8
 8003d90:	08003de8 	.word	0x08003de8
 8003d94:	08003dec 	.word	0x08003dec

08003d98 <memset>:
 8003d98:	4402      	add	r2, r0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
