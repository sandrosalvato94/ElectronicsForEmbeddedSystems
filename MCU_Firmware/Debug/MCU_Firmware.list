
MCU_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080085d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000009c  08008674  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08008674  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011634  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002711  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  00034e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e71  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5d5  00000000  00000000  00059b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d393c  00000000  00000000  00068116  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ba52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a80  00000000  00000000  0013bad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008478 	.word	0x08008478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08008478 	.word	0x08008478

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <ov7670_init>:
static void ov7670_write(uint8_t regAddr, uint8_t data);
static void ov7670_read(uint8_t regAddr, uint8_t *data);


void ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <ov7670_init+0x7c>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <ov7670_init+0x80>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <ov7670_init+0x84>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <ov7670_init+0x88>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(ResetCamera_GPIO_Port, ResetCamera_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	4818      	ldr	r0, [pc, #96]	; (8000e78 <ov7670_init+0x8c>)
 8000e16:	f002 fb9d 	bl	8003554 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	; 0x64
 8000e1c:	f000 f920 	bl	8001060 <HAL_Delay>
  HAL_GPIO_WritePin(ResetCamera_GPIO_Port, ResetCamera_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4814      	ldr	r0, [pc, #80]	; (8000e78 <ov7670_init+0x8c>)
 8000e26:	f002 fb95 	bl	8003554 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f000 f918 	bl	8001060 <HAL_Delay>

 // ov7670_write(0x12, 0x80);  // RESET
  HAL_Delay(30);
 8000e30:	201e      	movs	r0, #30
 8000e32:	f000 f915 	bl	8001060 <HAL_Delay>
  ov7670_write(0x12, 0x80);  // RESET
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	2012      	movs	r0, #18
 8000e3a:	f000 f85b 	bl	8000ef4 <ov7670_write>
  uint8_t buffer[4];
  buffer[0] = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	753b      	strb	r3, [r7, #20]
  ov7670_read(0x0b, buffer);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	200b      	movs	r0, #11
 8000e4a:	f000 f871 	bl	8000f30 <ov7670_read>
  ov7670_write(0x12, 0x80);  // RESET
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	2012      	movs	r0, #18
 8000e52:	f000 f84f 	bl	8000ef4 <ov7670_write>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000e56:	7d3b      	ldrb	r3, [r7, #20]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <ov7670_init+0x90>)
 8000e5c:	f006 fc28 	bl	80076b0 <iprintf>

}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000b8 	.word	0x200000b8
 8000e6c:	200000bc 	.word	0x200000bc
 8000e70:	200000c0 	.word	0x200000c0
 8000e74:	200000c4 	.word	0x200000c4
 8000e78:	40021800 	.word	0x40021800
 8000e7c:	08008490 	.word	0x08008490

08000e80 <ov7670_config>:

void ov7670_config(uint32_t mode)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000e88:	f000 f828 	bl	8000edc <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	2012      	movs	r0, #18
 8000e90:	f000 f830 	bl	8000ef4 <ov7670_write>
  HAL_Delay(30);
 8000e94:	201e      	movs	r0, #30
 8000e96:	f000 f8e3 	bl	8001060 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	e011      	b.n	8000ec4 <ov7670_config+0x44>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <ov7670_config+0x58>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <ov7670_config+0x58>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f000 f81e 	bl	8000ef4 <ov7670_write>
    HAL_Delay(30);
 8000eb8:	201e      	movs	r0, #30
 8000eba:	f000 f8d1 	bl	8001060 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <ov7670_config+0x58>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d1e7      	bne.n	8000ea0 <ov7670_config+0x20>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	080084b4 	.word	0x080084b4

08000edc <ov7670_stopCap>:
  }

}

void ov7670_stopCap()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <ov7670_stopCap+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fa8f 	bl	8001408 <HAL_DCMI_Stop>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000b8 	.word	0x200000b8

08000ef4 <ov7670_write>:


//
///*** Internal Function Defines ***/
static void ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR<<1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <ov7670_write+0x38>)
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	2142      	movs	r1, #66	; 0x42
 8000f1c:	f002 ff80 	bl	8003e20 <HAL_I2C_Mem_Write>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000c0 	.word	0x200000c0

08000f30 <ov7670_read>:

static void ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR<<1, &regAddr, 1, 100);
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <ov7670_read+0x48>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	1dfa      	adds	r2, r7, #7
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	2142      	movs	r1, #66	; 0x42
 8000f4a:	f002 fc45 	bl	80037d8 <HAL_I2C_Master_Transmit>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR<<1, data, 1, 100);
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <ov7670_read+0x48>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	2142      	movs	r1, #66	; 0x42
 8000f60:	f002 fd38 	bl	80039d4 <HAL_I2C_Master_Receive>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f6e:	bf00      	nop
}
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000c0 	.word	0x200000c0

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94d 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f005 ff5c 	bl	8006e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f965 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92d 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000034 	.word	0x20000034
 8001018:	20000004 	.word	0x20000004
 800101c:	20000000 	.word	0x20000000

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	200000e4 	.word	0x200000e4

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000e4 	.word	0x200000e4

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000004 	.word	0x20000004

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_DCMI_Start_DMA+0x20>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e086      	b.n	80013f6 <HAL_DCMI_Start_DMA+0x12e>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001306:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0202 	bic.w	r2, r2, #2
 8001316:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6819      	ldr	r1, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_DCMI_Start_DMA+0x138>)
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_DCMI_Start_DMA+0x13c>)
 8001336:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	2200      	movs	r2, #0
 800133e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d20a      	bcs.n	800136a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3328      	adds	r3, #40	; 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	f000 fa82 	bl	800186c <HAL_DMA_Start_IT>
 8001368:	e038      	b.n	80013dc <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <HAL_DCMI_Start_DMA+0x138>)
 8001370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001384:	e009      	b.n	800139a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	085a      	lsrs	r2, r3, #1
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	005a      	lsls	r2, r3, #1
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d2f0      	bcs.n	8001386 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a8:	1e9a      	subs	r2, r3, #2
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3328      	adds	r3, #40	; 0x28
 80013cc:	4619      	mov	r1, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	f000 fda2 	bl	8001f20 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	080014d5 	.word	0x080014d5
 8001404:	080015ff 	.word	0x080015ff

08001408 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_DCMI_Stop+0xb0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_DCMI_Stop+0xb4>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_DCMI_Stop+0x2a>
 800142e:	2302      	movs	r3, #2
 8001430:	e03e      	b.n	80014b0 <HAL_DCMI_Stop+0xa8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	60ba      	str	r2, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f043 0220 	orr.w	r2, r3, #32
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	73fb      	strb	r3, [r7, #15]
      break;
 800146c:	e006      	b.n	800147c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ea      	bne.n	8001452 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800148a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa4b 	bl	800192c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000034 	.word	0x20000034
 80014bc:	92492493 	.word	0x92492493

080014c0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d043      	beq.n	8001576 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014fa:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d118      	bne.n	800153a <DCMI_DMAXferCplt+0x66>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	00da      	lsls	r2, r3, #3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	f001 fe41 	bl	80031b0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	1e5a      	subs	r2, r3, #1
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
 8001538:	e044      	b.n	80015c4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d13c      	bne.n	80015c4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	00da      	lsls	r2, r3, #3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	f001 fe23 	bl	80031b0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	1e5a      	subs	r2, r3, #1
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
 8001574:	e026      	b.n	80015c4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e017      	b.n	80015c4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10f      	bne.n	80015c4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	440a      	add	r2, r1
 80015ba:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d112      	bne.n	80015f6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d103      	bne.n	80015f6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff4e 	bl	80014c0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e062      	b.n	8001704 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f005 fc36 	bl	8006ebc <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_DCMI_Init+0xe0>)
 8001664:	400b      	ands	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800167c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001688:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001694:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80016a0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80016ac:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d112      	bne.n	80016e4 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7f1b      	ldrb	r3, [r3, #28]
 80016c2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7f5b      	ldrb	r3, [r3, #29]
 80016c8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80016ca:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7f9b      	ldrb	r3, [r3, #30]
 80016d0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7fdb      	ldrb	r3, [r3, #31]
 80016da:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80016e0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80016e2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 021e 	orr.w	r2, r2, #30
 80016f2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffe0f007 	.word	0xffe0f007

08001710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fc94 	bl	8001048 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e099      	b.n	8001860 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	e00f      	b.n	800176e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174e:	f7ff fc7b 	bl	8001048 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b05      	cmp	r3, #5
 800175a:	d908      	bls.n	800176e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e078      	b.n	8001860 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e8      	bne.n	800174e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_DMA_Init+0x158>)
 8001788:	4013      	ands	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d107      	bne.n	80017d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4313      	orrs	r3, r2
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f023 0307 	bic.w	r3, r3, #7
 80017ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d117      	bne.n	8001832 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fb09 	bl	8001e2c <DMA_CheckFifoParam>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800182e:	2301      	movs	r3, #1
 8001830:	e016      	b.n	8001860 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fac0 	bl	8001dc0 <DMA_CalcBaseAndBitshift>
 8001840:	4603      	mov	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	223f      	movs	r2, #63	; 0x3f
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	f010803f 	.word	0xf010803f

0800186c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_DMA_Start_IT+0x26>
 800188e:	2302      	movs	r3, #2
 8001890:	e048      	b.n	8001924 <HAL_DMA_Start_IT+0xb8>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d137      	bne.n	8001916 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fa52 	bl	8001d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	223f      	movs	r2, #63	; 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0216 	orr.w	r2, r2, #22
 80018da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0208 	orr.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e005      	b.n	8001922 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800191e:	2302      	movs	r3, #2
 8001920:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001922:	7dfb      	ldrb	r3, [r7, #23]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800193a:	f7ff fb85 	bl	8001048 <HAL_GetTick>
 800193e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e052      	b.n	8001a04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0216 	bic.w	r2, r2, #22
 800196c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800197c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_DMA_Abort+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0208 	bic.w	r2, r2, #8
 800199c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ae:	e013      	b.n	80019d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b0:	f7ff fb4a 	bl	8001048 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d90c      	bls.n	80019d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e015      	b.n	8001a04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e4      	bne.n	80019b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	223f      	movs	r2, #63	; 0x3f
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d004      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00c      	b.n	8001a44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_DMA_IRQHandler+0x258>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_DMA_IRQHandler+0x25c>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0204 	bic.w	r2, r2, #4
 8001aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2201      	movs	r2, #1
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2204      	movs	r2, #4
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2204      	movs	r2, #4
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d043      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03c      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d024      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
 8001b7e:	e01f      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e016      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0208 	bic.w	r2, r2, #8
 8001bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 808e 	beq.w	8001cee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8086 	beq.w	8001cee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2220      	movs	r2, #32
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d136      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0216 	bic.w	r2, r2, #22
 8001c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x1da>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0208 	bic.w	r2, r2, #8
 8001c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	223f      	movs	r2, #63	; 0x3f
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d07d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
        }
        return;
 8001c66:	e078      	b.n	8001d5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01c      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d030      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
 8001c94:	e02b      	b.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d027      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	e022      	b.n	8001cee <HAL_DMA_IRQHandler+0x29e>
 8001ca8:	20000034 	.word	0x20000034
 8001cac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0210 	bic.w	r2, r2, #16
 8001ccc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d032      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d307      	bcc.n	8001d36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f2      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x2ca>
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d5a:	bf00      	nop
    }
  }
}
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d108      	bne.n	8001da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da2:	e007      	b.n	8001db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b10      	subs	r3, #16
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d909      	bls.n	8001e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001e00:	e007      	b.n	8001e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	aaaaaaab 	.word	0xaaaaaaab
 8001e28:	08008510 	.word	0x08008510

08001e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d855      	bhi.n	8001ef8 <DMA_CheckFifoParam+0xcc>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <DMA_CheckFifoParam+0x28>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e77 	.word	0x08001e77
 8001e5c:	08001e65 	.word	0x08001e65
 8001e60:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d045      	beq.n	8001efc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e042      	b.n	8001efc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7e:	d13f      	bne.n	8001f00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e84:	e03c      	b.n	8001f00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d121      	bne.n	8001ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d836      	bhi.n	8001f04 <DMA_CheckFifoParam+0xd8>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <DMA_CheckFifoParam+0x70>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001eb3 	.word	0x08001eb3
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001ec5 	.word	0x08001ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e02f      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec2:	e021      	b.n	8001f08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ecc:	d11e      	bne.n	8001f0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed2:	e01b      	b.n	8001f0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <DMA_CheckFifoParam+0xb4>
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d003      	beq.n	8001ee6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ede:	e018      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e015      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef6:	e00b      	b.n	8001f10 <DMA_CheckFifoParam+0xe4>
      break;
 8001ef8:	bf00      	nop
 8001efa:	e00a      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001efc:	bf00      	nop
 8001efe:	e008      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f00:	bf00      	nop
 8001f02:	e006      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f04:	bf00      	nop
 8001f06:	e004      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f08:	bf00      	nop
 8001f0a:	e002      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f0c:	bf00      	nop
 8001f0e:	e000      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f10:	bf00      	nop
    }
  } 
  
  return status; 
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d106      	bne.n	8001f48 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f001 b913 	b.w	800316e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f001 b901 	b.w	800316e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f001 b8f9 	b.w	800316e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f041 80e7 	bne.w	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fae:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f001 f910 	bl	80031e4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b99      	ldr	r3, [pc, #612]	; (8002230 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d960      	bls.n	8002092 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a97      	ldr	r2, [pc, #604]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d057      	beq.n	800208a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a96      	ldr	r2, [pc, #600]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d050      	beq.n	8002086 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a94      	ldr	r2, [pc, #592]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d049      	beq.n	8002082 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a93      	ldr	r2, [pc, #588]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d042      	beq.n	800207e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a91      	ldr	r2, [pc, #580]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d03a      	beq.n	8002078 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a90      	ldr	r2, [pc, #576]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d032      	beq.n	8002072 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a8e      	ldr	r2, [pc, #568]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d02a      	beq.n	800206c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a8d      	ldr	r2, [pc, #564]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a8b      	ldr	r2, [pc, #556]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a8a      	ldr	r2, [pc, #552]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d012      	beq.n	800205a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a88      	ldr	r2, [pc, #544]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a87      	ldr	r2, [pc, #540]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800204c:	e01e      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800204e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002052:	e01b      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002058:	e018      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800205a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800205e:	e015      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	e012      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800206a:	e00f      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800206c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002070:	e00c      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002076:	e009      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800207c:	e006      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800207e:	2320      	movs	r3, #32
 8002080:	e004      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002082:	2320      	movs	r3, #32
 8002084:	e002      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002086:	2320      	movs	r3, #32
 8002088:	e000      	b.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800208a:	2320      	movs	r3, #32
 800208c:	4a75      	ldr	r2, [pc, #468]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800208e:	60d3      	str	r3, [r2, #12]
 8002090:	e150      	b.n	8002334 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 800209a:	429a      	cmp	r2, r3
 800209c:	d960      	bls.n	8002160 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a64      	ldr	r2, [pc, #400]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d057      	beq.n	8002158 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a62      	ldr	r2, [pc, #392]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d050      	beq.n	8002154 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a61      	ldr	r2, [pc, #388]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d049      	beq.n	8002150 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5f      	ldr	r2, [pc, #380]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d042      	beq.n	800214c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d03a      	beq.n	8002146 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5c      	ldr	r2, [pc, #368]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d032      	beq.n	8002140 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5b      	ldr	r2, [pc, #364]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02a      	beq.n	800213a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a59      	ldr	r2, [pc, #356]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a58      	ldr	r2, [pc, #352]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01a      	beq.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d012      	beq.n	8002128 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00a      	beq.n	8002122 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a53      	ldr	r2, [pc, #332]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d102      	bne.n	800211c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002116:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800211a:	e01e      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800211c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002120:	e01b      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002122:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002126:	e018      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800212c:	e015      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800212e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002132:	e012      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002138:	e00f      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800213a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800213e:	e00c      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002144:	e009      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800214a:	e006      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800214c:	2320      	movs	r3, #32
 800214e:	e004      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002150:	2320      	movs	r3, #32
 8002152:	e002      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002154:	2320      	movs	r3, #32
 8002156:	e000      	b.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002158:	2320      	movs	r3, #32
 800215a:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	e0e9      	b.n	8002334 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002168:	429a      	cmp	r2, r3
 800216a:	f240 8083 	bls.w	8002274 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d057      	beq.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d050      	beq.n	8002224 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2d      	ldr	r2, [pc, #180]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d049      	beq.n	8002220 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d042      	beq.n	800221c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d03a      	beq.n	8002216 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d032      	beq.n	8002210 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d02a      	beq.n	800220a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d01a      	beq.n	80021fe <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d012      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00a      	beq.n	80021f2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d102      	bne.n	80021ec <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80021e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021ea:	e01e      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021f0:	e01b      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021f6:	e018      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021fc:	e015      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002202:	e012      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002208:	e00f      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800220a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220e:	e00c      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002214:	e009      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800221a:	e006      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800221c:	2320      	movs	r3, #32
 800221e:	e004      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002220:	2320      	movs	r3, #32
 8002222:	e002      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002224:	2320      	movs	r3, #32
 8002226:	e000      	b.n	800222a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002228:	2320      	movs	r3, #32
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 800222c:	60d3      	str	r3, [r2, #12]
 800222e:	e081      	b.n	8002334 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002230:	40026458 	.word	0x40026458
 8002234:	40026010 	.word	0x40026010
 8002238:	40026410 	.word	0x40026410
 800223c:	40026070 	.word	0x40026070
 8002240:	40026470 	.word	0x40026470
 8002244:	40026028 	.word	0x40026028
 8002248:	40026428 	.word	0x40026428
 800224c:	40026088 	.word	0x40026088
 8002250:	40026488 	.word	0x40026488
 8002254:	40026040 	.word	0x40026040
 8002258:	40026440 	.word	0x40026440
 800225c:	400260a0 	.word	0x400260a0
 8002260:	400264a0 	.word	0x400264a0
 8002264:	40026400 	.word	0x40026400
 8002268:	400260b8 	.word	0x400260b8
 800226c:	40026058 	.word	0x40026058
 8002270:	40026000 	.word	0x40026000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a96      	ldr	r2, [pc, #600]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d057      	beq.n	800232e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d050      	beq.n	800232a <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a93      	ldr	r2, [pc, #588]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d049      	beq.n	8002326 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a92      	ldr	r2, [pc, #584]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d042      	beq.n	8002322 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a90      	ldr	r2, [pc, #576]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d03a      	beq.n	800231c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a8f      	ldr	r2, [pc, #572]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d032      	beq.n	8002316 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a8d      	ldr	r2, [pc, #564]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02a      	beq.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a8c      	ldr	r2, [pc, #560]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01a      	beq.n	8002304 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a89      	ldr	r2, [pc, #548]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d012      	beq.n	80022fe <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a87      	ldr	r2, [pc, #540]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00a      	beq.n	80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a86      	ldr	r2, [pc, #536]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d102      	bne.n	80022f2 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80022ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f0:	e01e      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80022f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022f6:	e01b      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80022f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022fc:	e018      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80022fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002302:	e015      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002308:	e012      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800230a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230e:	e00f      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002314:	e00c      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231a:	e009      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800231c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002320:	e006      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002326:	2320      	movs	r3, #32
 8002328:	e002      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800232a:	2320      	movs	r3, #32
 800232c:	e000      	b.n	8002330 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800232e:	2320      	movs	r3, #32
 8002330:	4a74      	ldr	r2, [pc, #464]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002332:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 800233c:	429a      	cmp	r2, r3
 800233e:	d960      	bls.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d057      	beq.n	80023fa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a62      	ldr	r2, [pc, #392]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d050      	beq.n	80023f6 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a60      	ldr	r2, [pc, #384]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d049      	beq.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d042      	beq.n	80023ee <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5d      	ldr	r2, [pc, #372]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d03a      	beq.n	80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5c      	ldr	r2, [pc, #368]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d032      	beq.n	80023e2 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02a      	beq.n	80023dc <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a59      	ldr	r2, [pc, #356]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01a      	beq.n	80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a54      	ldr	r2, [pc, #336]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a53      	ldr	r2, [pc, #332]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80023b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023bc:	e01e      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023c2:	e01b      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023c8:	e018      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023ce:	e015      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023d4:	e012      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	e00f      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e0:	e00c      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e6:	e009      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ec:	e006      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023ee:	2310      	movs	r3, #16
 80023f0:	e004      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023f2:	2310      	movs	r3, #16
 80023f4:	e002      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023f6:	2310      	movs	r3, #16
 80023f8:	e000      	b.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023fa:	2310      	movs	r3, #16
 80023fc:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80023fe:	60d3      	str	r3, [r2, #12]
 8002400:	e14f      	b.n	80026a2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800240a:	429a      	cmp	r2, r3
 800240c:	f240 8082 	bls.w	8002514 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d057      	beq.n	80024ca <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2e      	ldr	r2, [pc, #184]	; (80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d050      	beq.n	80024c6 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d049      	beq.n	80024c2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d042      	beq.n	80024be <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03a      	beq.n	80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d032      	beq.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02a      	beq.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01a      	beq.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d012      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00a      	beq.n	8002494 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800248c:	e01e      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800248e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002492:	e01b      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002498:	e018      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800249a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800249e:	e015      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024a4:	e012      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024aa:	e00f      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b0:	e00c      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	e009      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	e006      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024be:	2310      	movs	r3, #16
 80024c0:	e004      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024c2:	2310      	movs	r3, #16
 80024c4:	e002      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024c6:	2310      	movs	r3, #16
 80024c8:	e000      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ca:	2310      	movs	r3, #16
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80024ce:	6093      	str	r3, [r2, #8]
 80024d0:	e0e7      	b.n	80026a2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80024d2:	bf00      	nop
 80024d4:	40026010 	.word	0x40026010
 80024d8:	40026410 	.word	0x40026410
 80024dc:	40026070 	.word	0x40026070
 80024e0:	40026470 	.word	0x40026470
 80024e4:	40026028 	.word	0x40026028
 80024e8:	40026428 	.word	0x40026428
 80024ec:	40026088 	.word	0x40026088
 80024f0:	40026488 	.word	0x40026488
 80024f4:	40026040 	.word	0x40026040
 80024f8:	40026440 	.word	0x40026440
 80024fc:	400260a0 	.word	0x400260a0
 8002500:	400264a0 	.word	0x400264a0
 8002504:	40026000 	.word	0x40026000
 8002508:	40026458 	.word	0x40026458
 800250c:	40026400 	.word	0x40026400
 8002510:	400260b8 	.word	0x400260b8
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b96      	ldr	r3, [pc, #600]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800251c:	429a      	cmp	r2, r3
 800251e:	d960      	bls.n	80025e2 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d057      	beq.n	80025da <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a93      	ldr	r2, [pc, #588]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d050      	beq.n	80025d6 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a91      	ldr	r2, [pc, #580]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d049      	beq.n	80025d2 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a90      	ldr	r2, [pc, #576]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d042      	beq.n	80025ce <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a8e      	ldr	r2, [pc, #568]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d03a      	beq.n	80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8d      	ldr	r2, [pc, #564]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d032      	beq.n	80025c2 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a8b      	ldr	r2, [pc, #556]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02a      	beq.n	80025bc <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a8a      	ldr	r2, [pc, #552]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d022      	beq.n	80025b6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a88      	ldr	r2, [pc, #544]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01a      	beq.n	80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d012      	beq.n	80025aa <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a85      	ldr	r2, [pc, #532]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a84      	ldr	r2, [pc, #528]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d102      	bne.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002598:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800259c:	e01e      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800259e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025a2:	e01b      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a8:	e018      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ae:	e015      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b4:	e012      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ba:	e00f      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	e00c      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c6:	e009      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	e006      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025ce:	2310      	movs	r3, #16
 80025d0:	e004      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025d2:	2310      	movs	r3, #16
 80025d4:	e002      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025d6:	2310      	movs	r3, #16
 80025d8:	e000      	b.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025da:	2310      	movs	r3, #16
 80025dc:	4a72      	ldr	r2, [pc, #456]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80025de:	60d3      	str	r3, [r2, #12]
 80025e0:	e05f      	b.n	80026a2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a64      	ldr	r2, [pc, #400]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d057      	beq.n	800269c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a62      	ldr	r2, [pc, #392]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d050      	beq.n	8002698 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a61      	ldr	r2, [pc, #388]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d049      	beq.n	8002694 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5f      	ldr	r2, [pc, #380]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d042      	beq.n	8002690 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d03a      	beq.n	800268a <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5c      	ldr	r2, [pc, #368]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d032      	beq.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d02a      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a59      	ldr	r2, [pc, #356]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d022      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01a      	beq.n	8002672 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d012      	beq.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a55      	ldr	r2, [pc, #340]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00a      	beq.n	8002666 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d102      	bne.n	8002660 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800265a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800265e:	e01e      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002660:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002664:	e01b      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800266a:	e018      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800266c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002670:	e015      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002676:	e012      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267c:	e00f      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	e00c      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002688:	e009      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800268a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268e:	e006      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002690:	2310      	movs	r3, #16
 8002692:	e004      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002694:	2310      	movs	r3, #16
 8002696:	e002      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002698:	2310      	movs	r3, #16
 800269a:	e000      	b.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800269c:	2310      	movs	r3, #16
 800269e:	4a42      	ldr	r2, [pc, #264]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80026a0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80026aa:	429a      	cmp	r2, r3
 80026ac:	f240 8082 	bls.w	80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d057      	beq.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2f      	ldr	r2, [pc, #188]	; (800277c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d050      	beq.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d049      	beq.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2c      	ldr	r2, [pc, #176]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d042      	beq.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d03a      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d032      	beq.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02a      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d022      	beq.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01a      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d012      	beq.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00a      	beq.n	8002734 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d102      	bne.n	800272e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800272c:	e01e      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800272e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002732:	e01b      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002734:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002738:	e018      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800273a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800273e:	e015      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002744:	e012      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800274a:	e00f      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800274c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002750:	e00c      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002756:	e009      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275c:	e006      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800275e:	2308      	movs	r3, #8
 8002760:	e004      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002762:	2308      	movs	r3, #8
 8002764:	e002      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002766:	2308      	movs	r3, #8
 8002768:	e000      	b.n	800276c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800276a:	2308      	movs	r3, #8
 800276c:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800276e:	60d3      	str	r3, [r2, #12]
 8002770:	e16f      	b.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002772:	bf00      	nop
 8002774:	40026058 	.word	0x40026058
 8002778:	40026010 	.word	0x40026010
 800277c:	40026410 	.word	0x40026410
 8002780:	40026070 	.word	0x40026070
 8002784:	40026470 	.word	0x40026470
 8002788:	40026028 	.word	0x40026028
 800278c:	40026428 	.word	0x40026428
 8002790:	40026088 	.word	0x40026088
 8002794:	40026488 	.word	0x40026488
 8002798:	40026040 	.word	0x40026040
 800279c:	40026440 	.word	0x40026440
 80027a0:	400260a0 	.word	0x400260a0
 80027a4:	400264a0 	.word	0x400264a0
 80027a8:	40026000 	.word	0x40026000
 80027ac:	40026458 	.word	0x40026458
 80027b0:	40026400 	.word	0x40026400
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	d960      	bls.n	8002882 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d057      	beq.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a91      	ldr	r2, [pc, #580]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d050      	beq.n	8002876 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8f      	ldr	r2, [pc, #572]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d049      	beq.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a8e      	ldr	r2, [pc, #568]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d042      	beq.n	800286e <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8c      	ldr	r2, [pc, #560]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d03a      	beq.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a8b      	ldr	r2, [pc, #556]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d032      	beq.n	8002862 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a89      	ldr	r2, [pc, #548]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02a      	beq.n	800285c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a88      	ldr	r2, [pc, #544]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a86      	ldr	r2, [pc, #536]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01a      	beq.n	8002850 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a85      	ldr	r2, [pc, #532]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d012      	beq.n	800284a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00a      	beq.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a82      	ldr	r2, [pc, #520]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002838:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800283c:	e01e      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800283e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002842:	e01b      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002848:	e018      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800284a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800284e:	e015      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002850:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002854:	e012      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	e00f      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800285c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002860:	e00c      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002866:	e009      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286c:	e006      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800286e:	2308      	movs	r3, #8
 8002870:	e004      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002872:	2308      	movs	r3, #8
 8002874:	e002      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002876:	2308      	movs	r3, #8
 8002878:	e000      	b.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800287a:	2308      	movs	r3, #8
 800287c:	4a70      	ldr	r2, [pc, #448]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	e0e7      	b.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b6e      	ldr	r3, [pc, #440]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800288a:	429a      	cmp	r2, r3
 800288c:	d960      	bls.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5f      	ldr	r2, [pc, #380]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d057      	beq.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d050      	beq.n	8002944 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d049      	beq.n	8002940 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5a      	ldr	r2, [pc, #360]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d042      	beq.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03a      	beq.n	8002936 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a57      	ldr	r2, [pc, #348]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d032      	beq.n	8002930 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02a      	beq.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01a      	beq.n	800291e <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d012      	beq.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a50      	ldr	r2, [pc, #320]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00a      	beq.n	8002912 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d102      	bne.n	800290c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800290a:	e01e      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800290c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002910:	e01b      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002916:	e018      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800291c:	e015      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800291e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002922:	e012      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	e00f      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800292a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292e:	e00c      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002934:	e009      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	e006      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800293c:	2308      	movs	r3, #8
 800293e:	e004      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002940:	2308      	movs	r3, #8
 8002942:	e002      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002944:	2308      	movs	r3, #8
 8002946:	e000      	b.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002948:	2308      	movs	r3, #8
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	e080      	b.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d078      	beq.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d050      	beq.n	8002a06 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d049      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2a      	ldr	r2, [pc, #168]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d042      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d03a      	beq.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d032      	beq.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02a      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a24      	ldr	r2, [pc, #144]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01a      	beq.n	80029e0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d012      	beq.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d102      	bne.n	80029ce <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80029c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029cc:	e03f      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	e03c      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d8:	e039      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029de:	e036      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029e4:	e033      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	e030      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	e02d      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f6:	e02a      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	e027      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e025      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a02:	2308      	movs	r3, #8
 8002a04:	e023      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e021      	b.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a0a:	bf00      	nop
 8002a0c:	400260b8 	.word	0x400260b8
 8002a10:	40026010 	.word	0x40026010
 8002a14:	40026410 	.word	0x40026410
 8002a18:	40026070 	.word	0x40026070
 8002a1c:	40026470 	.word	0x40026470
 8002a20:	40026028 	.word	0x40026028
 8002a24:	40026428 	.word	0x40026428
 8002a28:	40026088 	.word	0x40026088
 8002a2c:	40026488 	.word	0x40026488
 8002a30:	40026040 	.word	0x40026040
 8002a34:	40026440 	.word	0x40026440
 8002a38:	400260a0 	.word	0x400260a0
 8002a3c:	400264a0 	.word	0x400264a0
 8002a40:	40026400 	.word	0x40026400
 8002a44:	40026058 	.word	0x40026058
 8002a48:	40026000 	.word	0x40026000
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	4a9a      	ldr	r2, [pc, #616]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002a50:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b98      	ldr	r3, [pc, #608]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d960      	bls.n	8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a97      	ldr	r2, [pc, #604]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d057      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a95      	ldr	r2, [pc, #596]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d050      	beq.n	8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d049      	beq.n	8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a92      	ldr	r2, [pc, #584]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d042      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a91      	ldr	r2, [pc, #580]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d03a      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8f      	ldr	r2, [pc, #572]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d032      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02a      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8c      	ldr	r2, [pc, #560]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8b      	ldr	r2, [pc, #556]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01a      	beq.n	8002aee <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a89      	ldr	r2, [pc, #548]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a88      	ldr	r2, [pc, #544]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00a      	beq.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a86      	ldr	r2, [pc, #536]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d102      	bne.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002ad6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ada:	e01e      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae0:	e01b      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ae2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ae6:	e018      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ae8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002aec:	e015      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002aee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002af2:	e012      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af8:	e00f      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afe:	e00c      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b04:	e009      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	e006      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e004      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b10:	2304      	movs	r3, #4
 8002b12:	e002      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e000      	b.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	4a75      	ldr	r2, [pc, #468]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002b1c:	60d3      	str	r3, [r2, #12]
 8002b1e:	e151      	b.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d960      	bls.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a63      	ldr	r2, [pc, #396]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d057      	beq.n	8002be6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a62      	ldr	r2, [pc, #392]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d050      	beq.n	8002be2 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a60      	ldr	r2, [pc, #384]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d049      	beq.n	8002bde <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d042      	beq.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03a      	beq.n	8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5c      	ldr	r2, [pc, #368]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d032      	beq.n	8002bce <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02a      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a59      	ldr	r2, [pc, #356]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01a      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a56      	ldr	r2, [pc, #344]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d012      	beq.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00a      	beq.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a53      	ldr	r2, [pc, #332]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba8:	e01e      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bae:	e01b      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bb4:	e018      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bba:	e015      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc0:	e012      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc6:	e00f      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bcc:	e00c      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd2:	e009      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	e006      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	e004      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e002      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e000      	b.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002be6:	2304      	movs	r3, #4
 8002be8:	4a41      	ldr	r2, [pc, #260]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002bea:	6093      	str	r3, [r2, #8]
 8002bec:	e0ea      	b.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f240 8084 	bls.w	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d07a      	beq.n	8002cfc <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d050      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d049      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d042      	beq.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d03a      	beq.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d032      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02a      	beq.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d012      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00a      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c78:	e041      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c7e:	e03e      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c84:	e03b      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c8a:	e038      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c90:	e035      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c96:	e032      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9c:	e02f      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca2:	e02c      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca8:	e029      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e027      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e025      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e023      	b.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cb6:	bf00      	nop
 8002cb8:	40026000 	.word	0x40026000
 8002cbc:	40026458 	.word	0x40026458
 8002cc0:	40026010 	.word	0x40026010
 8002cc4:	40026410 	.word	0x40026410
 8002cc8:	40026070 	.word	0x40026070
 8002ccc:	40026470 	.word	0x40026470
 8002cd0:	40026028 	.word	0x40026028
 8002cd4:	40026428 	.word	0x40026428
 8002cd8:	40026088 	.word	0x40026088
 8002cdc:	40026488 	.word	0x40026488
 8002ce0:	40026040 	.word	0x40026040
 8002ce4:	40026440 	.word	0x40026440
 8002ce8:	400260a0 	.word	0x400260a0
 8002cec:	400264a0 	.word	0x400264a0
 8002cf0:	40026400 	.word	0x40026400
 8002cf4:	400260b8 	.word	0x400260b8
 8002cf8:	40026058 	.word	0x40026058
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	4a94      	ldr	r2, [pc, #592]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002d00:	60d3      	str	r3, [r2, #12]
 8002d02:	e05f      	b.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a92      	ldr	r2, [pc, #584]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d057      	beq.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a91      	ldr	r2, [pc, #580]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d050      	beq.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a8f      	ldr	r2, [pc, #572]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d049      	beq.n	8002db6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a8e      	ldr	r2, [pc, #568]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d042      	beq.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8c      	ldr	r2, [pc, #560]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03a      	beq.n	8002dac <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a8b      	ldr	r2, [pc, #556]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d032      	beq.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a89      	ldr	r2, [pc, #548]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02a      	beq.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a88      	ldr	r2, [pc, #544]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a86      	ldr	r2, [pc, #536]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01a      	beq.n	8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a85      	ldr	r2, [pc, #532]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d012      	beq.n	8002d8e <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00a      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a82      	ldr	r2, [pc, #520]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d80:	e01e      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d86:	e01b      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d8c:	e018      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d92:	e015      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d98:	e012      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9e:	e00f      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da4:	e00c      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	e009      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db0:	e006      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e004      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e002      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e000      	b.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002dc2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b6e      	ldr	r3, [pc, #440]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d95c      	bls.n	8002e8a <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5f      	ldr	r2, [pc, #380]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d053      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5e      	ldr	r2, [pc, #376]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04c      	beq.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d045      	beq.n	8002e7a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5b      	ldr	r2, [pc, #364]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d03e      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a59      	ldr	r2, [pc, #356]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d037      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d030      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a56      	ldr	r2, [pc, #344]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d029      	beq.n	8002e6a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a55      	ldr	r2, [pc, #340]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a53      	ldr	r2, [pc, #332]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01a      	beq.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d012      	beq.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a50      	ldr	r2, [pc, #320]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00a      	beq.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a4f      	ldr	r2, [pc, #316]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4c:	e01a      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e52:	e017      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e58:	e014      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	e011      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e64:	e00e      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	e00c      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e6a:	2340      	movs	r3, #64	; 0x40
 8002e6c:	e00a      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	e008      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e72:	2340      	movs	r3, #64	; 0x40
 8002e74:	e006      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e004      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e002      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	e141      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b3e      	ldr	r3, [pc, #248]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d97c      	bls.n	8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d053      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d04c      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d045      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d03e      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d037      	beq.n	8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d030      	beq.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d029      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01a      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d012      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00a      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d102      	bne.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f12:	e01a      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f18:	e017      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f1e:	e014      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f24:	e011      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f2a:	e00e      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f2c:	2340      	movs	r3, #64	; 0x40
 8002f2e:	e00c      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f30:	2340      	movs	r3, #64	; 0x40
 8002f32:	e00a      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f34:	2340      	movs	r3, #64	; 0x40
 8002f36:	e008      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	e006      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e004      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e002      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	e0de      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002f50:	40026000 	.word	0x40026000
 8002f54:	40026010 	.word	0x40026010
 8002f58:	40026410 	.word	0x40026410
 8002f5c:	40026070 	.word	0x40026070
 8002f60:	40026470 	.word	0x40026470
 8002f64:	40026028 	.word	0x40026028
 8002f68:	40026428 	.word	0x40026428
 8002f6c:	40026088 	.word	0x40026088
 8002f70:	40026488 	.word	0x40026488
 8002f74:	40026040 	.word	0x40026040
 8002f78:	40026440 	.word	0x40026440
 8002f7c:	400260a0 	.word	0x400260a0
 8002f80:	400264a0 	.word	0x400264a0
 8002f84:	40026458 	.word	0x40026458
 8002f88:	40026400 	.word	0x40026400
 8002f8c:	400260b8 	.word	0x400260b8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d95c      	bls.n	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a76      	ldr	r2, [pc, #472]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d053      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a75      	ldr	r2, [pc, #468]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04c      	beq.n	800304a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d045      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a72      	ldr	r2, [pc, #456]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d03e      	beq.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a70      	ldr	r2, [pc, #448]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d037      	beq.n	800303e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d030      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6d      	ldr	r2, [pc, #436]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d029      	beq.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6c      	ldr	r2, [pc, #432]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01a      	beq.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d012      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a67      	ldr	r2, [pc, #412]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00a      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a66      	ldr	r2, [pc, #408]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003018:	e01a      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800301a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800301e:	e017      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	e014      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302a:	e011      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800302c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003030:	e00e      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	e00c      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	e00a      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	e008      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	e006      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003042:	2301      	movs	r3, #1
 8003044:	e004      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003046:	2301      	movs	r3, #1
 8003048:	e002      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800304e:	2301      	movs	r3, #1
 8003050:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003052:	60d3      	str	r3, [r2, #12]
 8003054:	e05b      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a48      	ldr	r2, [pc, #288]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d053      	beq.n	8003108 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a46      	ldr	r2, [pc, #280]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04c      	beq.n	8003104 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a45      	ldr	r2, [pc, #276]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d045      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03e      	beq.n	80030fc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a42      	ldr	r2, [pc, #264]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d037      	beq.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a40      	ldr	r2, [pc, #256]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d030      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3f      	ldr	r2, [pc, #252]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d029      	beq.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3c      	ldr	r2, [pc, #240]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d01a      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d012      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00a      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d102      	bne.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80030ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d2:	e01a      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d8:	e017      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030de:	e014      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e4:	e011      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ea:	e00e      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030ec:	2340      	movs	r3, #64	; 0x40
 80030ee:	e00c      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	e00a      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	e008      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	e006      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e004      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003100:	2301      	movs	r3, #1
 8003102:	e002      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003108:	2301      	movs	r3, #1
 800310a:	4a28      	ldr	r2, [pc, #160]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800310c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0216 	orr.w	r2, r2, #22
 800311c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800312c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0208 	orr.w	r2, r2, #8
 800314c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e005      	b.n	800316c <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800316c:	7dfb      	ldrb	r3, [r7, #23]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40026058 	.word	0x40026058
 800317c:	40026010 	.word	0x40026010
 8003180:	40026410 	.word	0x40026410
 8003184:	40026070 	.word	0x40026070
 8003188:	40026470 	.word	0x40026470
 800318c:	40026028 	.word	0x40026028
 8003190:	40026428 	.word	0x40026428
 8003194:	40026088 	.word	0x40026088
 8003198:	40026488 	.word	0x40026488
 800319c:	40026040 	.word	0x40026040
 80031a0:	40026440 	.word	0x40026440
 80031a4:	400260a0 	.word	0x400260a0
 80031a8:	400264a0 	.word	0x400264a0
 80031ac:	40026000 	.word	0x40026000

080031b0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	e003      	b.n	80031d6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d108      	bne.n	8003214 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003212:	e007      	b.n	8003224 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	e165      	b.n	8003518 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800324c:	2201      	movs	r2, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	429a      	cmp	r2, r3
 8003266:	f040 8154 	bne.w	8003512 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x4a>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b12      	cmp	r3, #18
 8003278:	d123      	bne.n	80032c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d00b      	beq.n	8003316 <HAL_GPIO_Init+0xe6>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800330a:	2b11      	cmp	r3, #17
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b12      	cmp	r3, #18
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80ae 	beq.w	8003512 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_GPIO_Init+0x2fc>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <HAL_GPIO_Init+0x2fc>)
 80033c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_GPIO_Init+0x2fc>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d2:	4a57      	ldr	r2, [pc, #348]	; (8003530 <HAL_GPIO_Init+0x300>)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3302      	adds	r3, #2
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4e      	ldr	r2, [pc, #312]	; (8003534 <HAL_GPIO_Init+0x304>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d025      	beq.n	800344a <HAL_GPIO_Init+0x21a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4d      	ldr	r2, [pc, #308]	; (8003538 <HAL_GPIO_Init+0x308>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01f      	beq.n	8003446 <HAL_GPIO_Init+0x216>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4c      	ldr	r2, [pc, #304]	; (800353c <HAL_GPIO_Init+0x30c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_GPIO_Init+0x310>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <HAL_GPIO_Init+0x314>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x20a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a49      	ldr	r2, [pc, #292]	; (8003548 <HAL_GPIO_Init+0x318>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x206>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a48      	ldr	r2, [pc, #288]	; (800354c <HAL_GPIO_Init+0x31c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x202>
 800342e:	2306      	movs	r3, #6
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x21c>
 8003432:	2307      	movs	r3, #7
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x21c>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x21c>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x21c>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x21c>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x21c>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x21c>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x300>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_GPIO_Init+0x320>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348e:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_GPIO_Init+0x320>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_GPIO_Init+0x320>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_GPIO_Init+0x320>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_GPIO_Init+0x320>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_GPIO_Init+0x320>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_GPIO_Init+0x320>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800350c:	4a10      	ldr	r2, [pc, #64]	; (8003550 <HAL_GPIO_Init+0x320>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f ae96 	bls.w	800324c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3724      	adds	r7, #36	; 0x24
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40023800 	.word	0x40023800
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40021400 	.word	0x40021400
 800354c:	40021800 	.word	0x40021800
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e10f      	b.n	80037ba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f003 fd8e 	bl	80070d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035cc:	f001 fa0c 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80035d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a7b      	ldr	r2, [pc, #492]	; (80037c4 <HAL_I2C_Init+0x23c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d807      	bhi.n	80035ec <HAL_I2C_Init+0x64>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a7a      	ldr	r2, [pc, #488]	; (80037c8 <HAL_I2C_Init+0x240>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e006      	b.n	80035fa <HAL_I2C_Init+0x72>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a77      	ldr	r2, [pc, #476]	; (80037cc <HAL_I2C_Init+0x244>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0db      	b.n	80037ba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a72      	ldr	r2, [pc, #456]	; (80037d0 <HAL_I2C_Init+0x248>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0c9b      	lsrs	r3, r3, #18
 800360c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a64      	ldr	r2, [pc, #400]	; (80037c4 <HAL_I2C_Init+0x23c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <HAL_I2C_Init+0xb4>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	e009      	b.n	8003650 <HAL_I2C_Init+0xc8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_I2C_Init+0x24c>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	3301      	adds	r3, #1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4956      	ldr	r1, [pc, #344]	; (80037c4 <HAL_I2C_Init+0x23c>)
 800366c:	428b      	cmp	r3, r1
 800366e:	d80d      	bhi.n	800368c <HAL_I2C_Init+0x104>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e59      	subs	r1, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fbb1 f3f3 	udiv	r3, r1, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	bf38      	it	cc
 8003688:	2304      	movcc	r3, #4
 800368a:	e04f      	b.n	800372c <HAL_I2C_Init+0x1a4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d111      	bne.n	80036b8 <HAL_I2C_Init+0x130>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e58      	subs	r0, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e012      	b.n	80036de <HAL_I2C_Init+0x156>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e58      	subs	r0, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	0099      	lsls	r1, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Init+0x15e>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e022      	b.n	800372c <HAL_I2C_Init+0x1a4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10e      	bne.n	800370c <HAL_I2C_Init+0x184>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e58      	subs	r0, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	440b      	add	r3, r1
 80036fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	e00f      	b.n	800372c <HAL_I2C_Init+0x1a4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	0099      	lsls	r1, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6809      	ldr	r1, [r1, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800375a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6911      	ldr	r1, [r2, #16]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	000186a0 	.word	0x000186a0
 80037c8:	001e847f 	.word	0x001e847f
 80037cc:	003d08ff 	.word	0x003d08ff
 80037d0:	431bde83 	.word	0x431bde83
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	817b      	strh	r3, [r7, #10]
 80037e8:	4613      	mov	r3, r2
 80037ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7fd fc2c 	bl	8001048 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	f040 80e0 	bne.w	80039c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2319      	movs	r3, #25
 8003806:	2201      	movs	r2, #1
 8003808:	4970      	ldr	r1, [pc, #448]	; (80039cc <HAL_I2C_Master_Transmit+0x1f4>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fdb8 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	e0d3      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_I2C_Master_Transmit+0x50>
 8003824:	2302      	movs	r3, #2
 8003826:	e0cc      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d007      	beq.n	800384e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2210      	movs	r2, #16
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	893a      	ldrh	r2, [r7, #8]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a50      	ldr	r2, [pc, #320]	; (80039d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fbbc 	bl	8004014 <I2C_MasterRequestWrite>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e08d      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038bc:	e066      	b.n	800398c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fe32 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11b      	bne.n	8003960 <HAL_I2C_Master_Transmit+0x188>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	6a39      	ldr	r1, [r7, #32]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fe22 	bl	80045ae <I2C_WaitOnBTFFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2b04      	cmp	r3, #4
 8003976:	d107      	bne.n	8003988 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e01a      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d194      	bne.n	80038be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000

080039d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	4613      	mov	r3, r2
 80039e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7fd fb2e 	bl	8001048 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 820b 	bne.w	8003e12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	497c      	ldr	r1, [pc, #496]	; (8003bf8 <HAL_I2C_Master_Receive+0x224>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fcba 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e1fe      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2C_Master_Receive+0x50>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e1f7      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d007      	beq.n	8003a4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2222      	movs	r2, #34	; 0x22
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2210      	movs	r2, #16
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a5c      	ldr	r2, [pc, #368]	; (8003bfc <HAL_I2C_Master_Receive+0x228>)
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a8c:	8979      	ldrh	r1, [r7, #10]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fb34 	bl	8004100 <I2C_MasterRequestRead>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1b8      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e18c      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d11b      	bne.n	8003b12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e16c      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d11b      	bne.n	8003b52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	e14c      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b78:	e138      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	f200 80f1 	bhi.w	8003d66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d123      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fd4d 	bl	8004630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e139      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd2:	e10b      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d14e      	bne.n	8003c7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	2200      	movs	r2, #0
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <HAL_I2C_Master_Receive+0x22c>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fbca 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e10e      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
 8003bf6:	bf00      	nop
 8003bf8:	00100002 	.word	0x00100002
 8003bfc:	ffff0000 	.word	0xffff0000
 8003c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c78:	e0b8      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	4966      	ldr	r1, [pc, #408]	; (8003e1c <HAL_I2C_Master_Receive+0x448>)
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fb7b 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0bf      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2200      	movs	r2, #0
 8003cde:	494f      	ldr	r1, [pc, #316]	; (8003e1c <HAL_I2C_Master_Receive+0x448>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb4d 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e091      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d64:	e042      	b.n	8003dec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fc60 	bl	8004630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e04c      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d118      	bne.n	8003dec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f aec2 	bne.w	8003b7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3728      	adds	r7, #40	; 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	00010004 	.word	0x00010004

08003e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7fd f905 	bl	8001048 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	f040 80d9 	bne.w	8004000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2319      	movs	r3, #25
 8003e54:	2201      	movs	r2, #1
 8003e56:	496d      	ldr	r1, [pc, #436]	; (800400c <HAL_I2C_Mem_Write+0x1ec>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fa91 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0cc      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Mem_Write+0x56>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e0c5      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d007      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	; 0x21
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a4d      	ldr	r2, [pc, #308]	; (8004010 <HAL_I2C_Mem_Write+0x1f0>)
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ede:	88f8      	ldrh	r0, [r7, #6]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f9bc 	bl	800426c <I2C_RequestMemoryWrite>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d052      	beq.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e081      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb12 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1aa      	bne.n	8003efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fafe 	bl	80045ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d107      	bne.n	8003fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e016      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	00100002 	.word	0x00100002
 8004010:	ffff0000 	.word	0xffff0000

08004014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	460b      	mov	r3, r1
 8004022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d006      	beq.n	800403e <I2C_MasterRequestWrite+0x2a>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d003      	beq.n	800403e <I2C_MasterRequestWrite+0x2a>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800403c:	d108      	bne.n	8004050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e00b      	b.n	8004068 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	2b12      	cmp	r3, #18
 8004056:	d107      	bne.n	8004068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f983 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e035      	b.n	80040f0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d108      	bne.n	80040a0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e01b      	b.n	80040d8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	11db      	asrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f063 030f 	orn	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <I2C_MasterRequestWrite+0xe4>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f9b5 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e010      	b.n	80040f0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <I2C_MasterRequestWrite+0xe8>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f9a5 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	00010008 	.word	0x00010008
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	460b      	mov	r3, r1
 800410e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d006      	beq.n	800413a <I2C_MasterRequestRead+0x3a>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d003      	beq.n	800413a <I2C_MasterRequestRead+0x3a>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004138:	d108      	bne.n	800414c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e00b      	b.n	8004164 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	2b11      	cmp	r3, #17
 8004152:	d107      	bne.n	8004164 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f905 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e06d      	b.n	800425c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d108      	bne.n	800419c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	e053      	b.n	8004244 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	11db      	asrs	r3, r3, #7
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f063 030f 	orn	r3, r3, #15
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	492a      	ldr	r1, [pc, #168]	; (8004264 <I2C_MasterRequestRead+0x164>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f937 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e048      	b.n	800425c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4923      	ldr	r1, [pc, #140]	; (8004268 <I2C_MasterRequestRead+0x168>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f927 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e038      	b.n	800425c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8af 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e017      	b.n	800425c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	11db      	asrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 030e 	orn	r3, r3, #14
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4907      	ldr	r1, [pc, #28]	; (8004268 <I2C_MasterRequestRead+0x168>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8ef 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	00010008 	.word	0x00010008
 8004268:	00010002 	.word	0x00010002

0800426c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2200      	movs	r2, #0
 800429e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f86c 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e05f      	b.n	8004372 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	492d      	ldr	r1, [pc, #180]	; (800437c <I2C_RequestMemoryWrite+0x110>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f8b0 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04c      	b.n	8004372 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	6a39      	ldr	r1, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f91a 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02b      	b.n	8004372 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e021      	b.n	8004370 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f8f4 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b04      	cmp	r3, #4
 8004350:	d107      	bne.n	8004362 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e005      	b.n	8004372 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	00010002 	.word	0x00010002

08004380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004390:	e025      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d021      	beq.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fc fe55 	bl	8001048 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e023      	b.n	8004426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10d      	bne.n	8004404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	e00c      	b.n	800441e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d0b6      	beq.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800443c:	e051      	b.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d123      	bne.n	8004496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e046      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d021      	beq.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fc fdd3 	bl	8001048 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e020      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e00b      	b.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d18d      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004538:	e02d      	b.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f8ce 	bl	80046dc <I2C_IsAcknowledgeFailed>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e02d      	b.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d021      	beq.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fc fd79 	bl	8001048 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e007      	b.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d1ca      	bne.n	800453a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ba:	e02d      	b.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f88d 	bl	80046dc <I2C_IsAcknowledgeFailed>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e02d      	b.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d021      	beq.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fc fd38 	bl	8001048 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e007      	b.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d1ca      	bne.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800463c:	e042      	b.n	80046c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b10      	cmp	r3, #16
 800464a:	d119      	bne.n	8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0210 	mvn.w	r2, #16
 8004654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e029      	b.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004680:	f7fc fce2 	bl	8001048 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e007      	b.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d1b5      	bne.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d11b      	bne.n	800472c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0ca      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d90c      	bls.n	8004778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b52      	ldr	r3, [pc, #328]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a51      	ldr	r2, [pc, #324]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b4f      	ldr	r3, [pc, #316]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494c      	ldr	r1, [pc, #304]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d044      	beq.n	800485c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d119      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07d      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06d      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e065      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4933      	ldr	r1, [pc, #204]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800482c:	f7fc fc0c 	bl	8001048 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fc fc08 	bl	8001048 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e04d      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d20c      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e030      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4915      	ldr	r1, [pc, #84]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490d      	ldr	r1, [pc, #52]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 f8b9 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80048c6:	4601      	mov	r1, r0
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	fa21 f303 	lsr.w	r3, r1, r3
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80048de:	2000      	movs	r0, #0
 80048e0:	f7fc fb6e 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00
 80048f4:	40023800 	.word	0x40023800
 80048f8:	08008518 	.word	0x08008518
 80048fc:	20000034 	.word	0x20000034

08004900 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	; 0x30
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d129      	bne.n	8004966 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800492e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004944:	f107 031c 	add.w	r3, r7, #28
 8004948:	4619      	mov	r1, r3
 800494a:	481f      	ldr	r0, [pc, #124]	; (80049c8 <HAL_RCC_MCOConfig+0xc8>)
 800494c:	f7fe fc70 	bl	8003230 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	430b      	orrs	r3, r1
 800495e:	4919      	ldr	r1, [pc, #100]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004964:	e029      	b.n	80049ba <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498c:	2303      	movs	r3, #3
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004994:	2300      	movs	r3, #0
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	4619      	mov	r1, r3
 800499e:	480b      	ldr	r0, [pc, #44]	; (80049cc <HAL_RCC_MCOConfig+0xcc>)
 80049a0:	f7fe fc46 	bl	8003230 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	00d9      	lsls	r1, r3, #3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	4903      	ldr	r1, [pc, #12]	; (80049c4 <HAL_RCC_MCOConfig+0xc4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
}
 80049ba:	bf00      	nop
 80049bc:	3730      	adds	r7, #48	; 0x30
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	40020800 	.word	0x40020800

080049d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000034 	.word	0x20000034

080049e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049ec:	f7ff fff0 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 80049f0:	4601      	mov	r1, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0a9b      	lsrs	r3, r3, #10
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4a03      	ldr	r2, [pc, #12]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	08008528 	.word	0x08008528

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a14:	f7ff ffdc 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0b5b      	lsrs	r3, r3, #13
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4a03      	ldr	r2, [pc, #12]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40023800 	.word	0x40023800
 8004a34:	08008528 	.word	0x08008528

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a52:	4b9f      	ldr	r3, [pc, #636]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	f200 8130 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x288>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_RCC_GetSysClockFreq+0x30>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004cc1 	.word	0x08004cc1
 8004a70:	08004cc1 	.word	0x08004cc1
 8004a74:	08004cc1 	.word	0x08004cc1
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004cc1 	.word	0x08004cc1
 8004a80:	08004cc1 	.word	0x08004cc1
 8004a84:	08004cc1 	.word	0x08004cc1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004cc1 	.word	0x08004cc1
 8004a90:	08004cc1 	.word	0x08004cc1
 8004a94:	08004cc1 	.word	0x08004cc1
 8004a98:	08004bb7 	.word	0x08004bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a9c:	4b8d      	ldr	r3, [pc, #564]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8004a9e:	613b      	str	r3, [r7, #16]
       break;
 8004aa0:	e111      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa2:	4b8d      	ldr	r3, [pc, #564]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004aa4:	613b      	str	r3, [r7, #16]
      break;
 8004aa6:	e10e      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa8:	4b89      	ldr	r3, [pc, #548]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab2:	4b87      	ldr	r3, [pc, #540]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d023      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b84      	ldr	r3, [pc, #528]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	f04f 0400 	mov.w	r4, #0
 8004ac8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	ea03 0501 	and.w	r5, r3, r1
 8004ad4:	ea04 0602 	and.w	r6, r4, r2
 8004ad8:	4a7f      	ldr	r2, [pc, #508]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004ada:	fb02 f106 	mul.w	r1, r2, r6
 8004ade:	2200      	movs	r2, #0
 8004ae0:	fb02 f205 	mul.w	r2, r2, r5
 8004ae4:	440a      	add	r2, r1
 8004ae6:	497c      	ldr	r1, [pc, #496]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004ae8:	fba5 0101 	umull	r0, r1, r5, r1
 8004aec:	1853      	adds	r3, r2, r1
 8004aee:	4619      	mov	r1, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f04f 0400 	mov.w	r4, #0
 8004af6:	461a      	mov	r2, r3
 8004af8:	4623      	mov	r3, r4
 8004afa:	f7fb fff7 	bl	8000aec <__aeabi_uldivmod>
 8004afe:	4603      	mov	r3, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e049      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	ea03 0501 	and.w	r5, r3, r1
 8004b1c:	ea04 0602 	and.w	r6, r4, r2
 8004b20:	4629      	mov	r1, r5
 8004b22:	4632      	mov	r2, r6
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	0154      	lsls	r4, r2, #5
 8004b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b32:	014b      	lsls	r3, r1, #5
 8004b34:	4619      	mov	r1, r3
 8004b36:	4622      	mov	r2, r4
 8004b38:	1b49      	subs	r1, r1, r5
 8004b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	0194      	lsls	r4, r2, #6
 8004b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b4c:	018b      	lsls	r3, r1, #6
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	eb64 0402 	sbc.w	r4, r4, r2
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	00e2      	lsls	r2, r4, #3
 8004b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b62:	00d9      	lsls	r1, r3, #3
 8004b64:	460b      	mov	r3, r1
 8004b66:	4614      	mov	r4, r2
 8004b68:	195b      	adds	r3, r3, r5
 8004b6a:	eb44 0406 	adc.w	r4, r4, r6
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	02a2      	lsls	r2, r4, #10
 8004b78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b7c:	0299      	lsls	r1, r3, #10
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	4621      	mov	r1, r4
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	f7fb ffac 	bl	8000aec <__aeabi_uldivmod>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	613b      	str	r3, [r7, #16]
      break;
 8004bb4:	e087      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb6:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbe:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d023      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	f04f 0400 	mov.w	r4, #0
 8004bd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	ea03 0501 	and.w	r5, r3, r1
 8004be2:	ea04 0602 	and.w	r6, r4, r2
 8004be6:	4a3c      	ldr	r2, [pc, #240]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004be8:	fb02 f106 	mul.w	r1, r2, r6
 8004bec:	2200      	movs	r2, #0
 8004bee:	fb02 f205 	mul.w	r2, r2, r5
 8004bf2:	440a      	add	r2, r1
 8004bf4:	4938      	ldr	r1, [pc, #224]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004bf6:	fba5 0101 	umull	r0, r1, r5, r1
 8004bfa:	1853      	adds	r3, r2, r1
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	461a      	mov	r2, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	f7fb ff70 	bl	8000aec <__aeabi_uldivmod>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e049      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c14:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	f04f 0400 	mov.w	r4, #0
 8004c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	ea03 0501 	and.w	r5, r3, r1
 8004c2a:	ea04 0602 	and.w	r6, r4, r2
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4632      	mov	r2, r6
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	f04f 0400 	mov.w	r4, #0
 8004c3a:	0154      	lsls	r4, r2, #5
 8004c3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c40:	014b      	lsls	r3, r1, #5
 8004c42:	4619      	mov	r1, r3
 8004c44:	4622      	mov	r2, r4
 8004c46:	1b49      	subs	r1, r1, r5
 8004c48:	eb62 0206 	sbc.w	r2, r2, r6
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	0194      	lsls	r4, r2, #6
 8004c56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c5a:	018b      	lsls	r3, r1, #6
 8004c5c:	1a5b      	subs	r3, r3, r1
 8004c5e:	eb64 0402 	sbc.w	r4, r4, r2
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	00e2      	lsls	r2, r4, #3
 8004c6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c70:	00d9      	lsls	r1, r3, #3
 8004c72:	460b      	mov	r3, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	195b      	adds	r3, r3, r5
 8004c78:	eb44 0406 	adc.w	r4, r4, r6
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	02a2      	lsls	r2, r4, #10
 8004c86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c8a:	0299      	lsls	r1, r3, #10
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4614      	mov	r4, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	4621      	mov	r1, r4
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	f7fb ff25 	bl	8000aec <__aeabi_uldivmod>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0f1b      	lsrs	r3, r3, #28
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	613b      	str	r3, [r7, #16]
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8004cc2:	613b      	str	r3, [r7, #16]
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	693b      	ldr	r3, [r7, #16]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	017d7840 	.word	0x017d7840

08004cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8083 	beq.w	8004dfc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cf6:	4b95      	ldr	r3, [pc, #596]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d019      	beq.n	8004d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d02:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d0e:	4b8f      	ldr	r3, [pc, #572]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1a:	d00c      	beq.n	8004d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d1c:	4b8b      	ldr	r3, [pc, #556]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d112      	bne.n	8004d4e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d28:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d34:	d10b      	bne.n	8004d4e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d05b      	beq.n	8004dfa <HAL_RCC_OscConfig+0x11e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d157      	bne.n	8004dfa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e216      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x8a>
 8004d58:	4b7c      	ldr	r3, [pc, #496]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a7b      	ldr	r2, [pc, #492]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e01d      	b.n	8004da2 <HAL_RCC_OscConfig+0xc6>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCC_OscConfig+0xae>
 8004d70:	4b76      	ldr	r3, [pc, #472]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a75      	ldr	r2, [pc, #468]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b73      	ldr	r3, [pc, #460]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a72      	ldr	r2, [pc, #456]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e00b      	b.n	8004da2 <HAL_RCC_OscConfig+0xc6>
 8004d8a:	4b70      	ldr	r3, [pc, #448]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6f      	ldr	r2, [pc, #444]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b6d      	ldr	r3, [pc, #436]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6c      	ldr	r2, [pc, #432]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d013      	beq.n	8004dd2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fc f94d 	bl	8001048 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db2:	f7fc f949 	bl	8001048 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e1db      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0xd6>
 8004dd0:	e014      	b.n	8004dfc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fc f939 	bl	8001048 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dda:	f7fc f935 	bl	8001048 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1c7      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dec:	4b57      	ldr	r3, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0xfe>
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d06f      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e08:	4b50      	ldr	r3, [pc, #320]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e14:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e20:	4b4a      	ldr	r3, [pc, #296]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2c:	4b47      	ldr	r3, [pc, #284]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d11c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e38:	4b44      	ldr	r3, [pc, #272]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e44:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_OscConfig+0x180>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e18f      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4938      	ldr	r1, [pc, #224]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e70:	e03a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e7a:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc f8e2 	bl	8001048 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e88:	f7fc f8de 	bl	8001048 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e170      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9a:	4b2c      	ldr	r3, [pc, #176]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea6:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4925      	ldr	r1, [pc, #148]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
 8004eba:	e015      	b.n	8004ee8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fc f8c1 	bl	8001048 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fc f8bd 	bl	8001048 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e14f      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d037      	beq.n	8004f64 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d016      	beq.n	8004f2a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <HAL_RCC_OscConfig+0x278>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7fc f8a1 	bl	8001048 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0a:	f7fc f89d 	bl	8001048 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e12f      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCC_OscConfig+0x270>)
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x22e>
 8004f28:	e01c      	b.n	8004f64 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_OscConfig+0x278>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fc f88a 	bl	8001048 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f36:	e00f      	b.n	8004f58 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fc f886 	bl	8001048 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d908      	bls.n	8004f58 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e118      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	42470000 	.word	0x42470000
 8004f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f58:	4b8a      	ldr	r3, [pc, #552]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e9      	bne.n	8004f38 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8097 	beq.w	80050a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f76:	4b83      	ldr	r3, [pc, #524]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b7f      	ldr	r3, [pc, #508]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
 8004f92:	4b7c      	ldr	r3, [pc, #496]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa2:	4b79      	ldr	r3, [pc, #484]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d118      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fae:	4b76      	ldr	r3, [pc, #472]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a75      	ldr	r2, [pc, #468]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fba:	f7fc f845 	bl	8001048 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc2:	f7fc f841 	bl	8001048 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0d3      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x31a>
 8004fe8:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff4:	e01c      	b.n	8005030 <HAL_RCC_OscConfig+0x354>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x33c>
 8004ffe:	4b61      	ldr	r3, [pc, #388]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a60      	ldr	r2, [pc, #384]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
 800500a:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a5d      	ldr	r2, [pc, #372]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0x354>
 8005018:	4b5a      	ldr	r3, [pc, #360]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	4a59      	ldr	r2, [pc, #356]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	; 0x70
 8005024:	4b57      	ldr	r3, [pc, #348]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a56      	ldr	r2, [pc, #344]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800502a:	f023 0304 	bic.w	r3, r3, #4
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fc f806 	bl	8001048 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fc f802 	bl	8001048 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e092      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005056:	4b4b      	ldr	r3, [pc, #300]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ee      	beq.n	8005040 <HAL_RCC_OscConfig+0x364>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fb fff0 	bl	8001048 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fb ffec 	bl	8001048 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e07c      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005082:	4b40      	ldr	r3, [pc, #256]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ee      	bne.n	800506c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	4a3a      	ldr	r2, [pc, #232]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d068      	beq.n	800517a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d060      	beq.n	8005176 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d145      	bne.n	8005148 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050bc:	4b33      	ldr	r3, [pc, #204]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fb ffc1 	bl	8001048 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fb ffbd 	bl	8001048 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e04f      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050dc:	4b29      	ldr	r3, [pc, #164]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	019b      	lsls	r3, r3, #6
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	491b      	ldr	r1, [pc, #108]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511a:	4b1c      	ldr	r3, [pc, #112]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fb ff92 	bl	8001048 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005128:	f7fb ff8e 	bl	8001048 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e020      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x44c>
 8005146:	e018      	b.n	800517a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fb ff7b 	bl	8001048 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7fb ff77 	bl	8001048 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e009      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCC_OscConfig+0x4a8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x47a>
 8005174:	e001      	b.n	800517a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40023800 	.word	0x40023800
 8005188:	40007000 	.word	0x40007000
 800518c:	42470060 	.word	0x42470060

08005190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e01d      	b.n	80051de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f002 f808 	bl	80071cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 f99a 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e01d      	b.n	8005234 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f815 	bl	800523c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 f96f 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2201      	movs	r2, #1
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fba0 	bl	80059a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_TIM_PWM_Start+0x74>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIM_PWM_Start+0x2c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_TIM_PWM_Start+0x78>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_TIM_PWM_Start+0x30>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_TIM_PWM_Start+0x32>
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d007      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400

080052cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fb62 	bl	80059a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_TIM_PWM_Stop+0xa8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_PWM_Stop+0x2c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <HAL_TIM_PWM_Stop+0xac>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_PWM_Stop+0x30>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Stop+0x32>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d017      	beq.n	8005332 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	f241 1311 	movw	r3, #4369	; 0x1111
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <HAL_TIM_PWM_Stop+0x66>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	f240 4344 	movw	r3, #1092	; 0x444
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <HAL_TIM_PWM_Stop+0x66>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	f241 1311 	movw	r3, #4369	; 0x1111
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <HAL_TIM_PWM_Stop+0x96>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	f240 4344 	movw	r3, #1092	; 0x444
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <HAL_TIM_PWM_Stop+0x96>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400

0800537c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005392:	2302      	movs	r3, #2
 8005394:	e0b4      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	f200 809f 	bhi.w	80054ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080054ed 	.word	0x080054ed
 80053bc:	080054ed 	.word	0x080054ed
 80053c0:	080054ed 	.word	0x080054ed
 80053c4:	08005429 	.word	0x08005429
 80053c8:	080054ed 	.word	0x080054ed
 80053cc:	080054ed 	.word	0x080054ed
 80053d0:	080054ed 	.word	0x080054ed
 80053d4:	0800546b 	.word	0x0800546b
 80053d8:	080054ed 	.word	0x080054ed
 80053dc:	080054ed 	.word	0x080054ed
 80053e0:	080054ed 	.word	0x080054ed
 80053e4:	080054ab 	.word	0x080054ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f92a 	bl	8005648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0204 	bic.w	r2, r2, #4
 8005412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6999      	ldr	r1, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	619a      	str	r2, [r3, #24]
      break;
 8005426:	e062      	b.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f97a 	bl	8005728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6999      	ldr	r1, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	619a      	str	r2, [r3, #24]
      break;
 8005468:	e041      	b.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f9cf 	bl	8005814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0208 	orr.w	r2, r2, #8
 8005484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0204 	bic.w	r2, r2, #4
 8005494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69d9      	ldr	r1, [r3, #28]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	61da      	str	r2, [r3, #28]
      break;
 80054a8:	e021      	b.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fa23 	bl	80058fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	021a      	lsls	r2, r3, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	61da      	str	r2, [r3, #28]
      break;
 80054ea:	e000      	b.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80054ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a40      	ldr	r2, [pc, #256]	; (800561c <TIM_Base_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d00f      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3d      	ldr	r2, [pc, #244]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3c      	ldr	r2, [pc, #240]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <TIM_Base_SetConfig+0x114>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d027      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d023      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d017      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_Base_SetConfig+0x128>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <TIM_Base_SetConfig+0x12c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <TIM_Base_SetConfig+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <TIM_Base_SetConfig+0x134>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <TIM_Base_SetConfig+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a23      	ldr	r2, [pc, #140]	; (8005644 <TIM_Base_SetConfig+0x13c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0a      	ldr	r2, [pc, #40]	; (800561c <TIM_Base_SetConfig+0x114>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d103      	bne.n	8005608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	615a      	str	r2, [r3, #20]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800
 800563c:	40001800 	.word	0x40001800
 8005640:	40001c00 	.word	0x40001c00
 8005644:	40002000 	.word	0x40002000

08005648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0302 	bic.w	r3, r3, #2
 8005690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a20      	ldr	r2, [pc, #128]	; (8005720 <TIM_OC1_SetConfig+0xd8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC1_SetConfig+0x64>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <TIM_OC1_SetConfig+0xdc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10c      	bne.n	80056c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0308 	bic.w	r3, r3, #8
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <TIM_OC1_SetConfig+0xd8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC1_SetConfig+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <TIM_OC1_SetConfig+0xdc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	621a      	str	r2, [r3, #32]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400

08005728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0210 	bic.w	r2, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0320 	bic.w	r3, r3, #32
 8005772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a22      	ldr	r2, [pc, #136]	; (800580c <TIM_OC2_SetConfig+0xe4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_OC2_SetConfig+0x68>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a21      	ldr	r2, [pc, #132]	; (8005810 <TIM_OC2_SetConfig+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10d      	bne.n	80057ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a17      	ldr	r2, [pc, #92]	; (800580c <TIM_OC2_SetConfig+0xe4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x94>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <TIM_OC2_SetConfig+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d113      	bne.n	80057e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40010000 	.word	0x40010000
 8005810:	40010400 	.word	0x40010400

08005814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800585c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <TIM_OC3_SetConfig+0xe0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC3_SetConfig+0x66>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <TIM_OC3_SetConfig+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10d      	bne.n	8005896 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <TIM_OC3_SetConfig+0xe0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC3_SetConfig+0x92>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <TIM_OC3_SetConfig+0xe4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d113      	bne.n	80058ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TIM_OC4_SetConfig+0xa4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC4_SetConfig+0x68>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <TIM_OC4_SetConfig+0xa8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2201      	movs	r2, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e03f      	b.n	8005a84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fc33 	bl	8007284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2224      	movs	r2, #36	; 0x24
 8005a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fbf2 	bl	8006220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e047      	b.n	8005b2e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fbe6 	bl	8007284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	; 0x24
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fba5 	bl	8006220 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0208 	orr.w	r2, r2, #8
 8005b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b088      	sub	sp, #32
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	f040 8083 	bne.w	8005c5e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Transmit+0x2e>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e07b      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Transmit+0x40>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e074      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2221      	movs	r2, #33	; 0x21
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b8c:	f7fb fa5c 	bl	8001048 <HAL_GetTick>
 8005b90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b9e:	e042      	b.n	8005c26 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d122      	bne.n	8005bfe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f9c0 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e046      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	e017      	b.n	8005c26 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	e013      	b.n	8005c26 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2200      	movs	r2, #0
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f99d 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e023      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	60ba      	str	r2, [r7, #8]
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1b7      	bne.n	8005ba0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2140      	movs	r1, #64	; 0x40
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f984 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00a      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d140      	bne.n	8005d04 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_UART_Receive_IT+0x26>
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e039      	b.n	8005d06 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_UART_Receive_IT+0x38>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e032      	b.n	8005d06 <HAL_UART_Receive_IT+0x9e>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2222      	movs	r2, #34	; 0x22
 8005cc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cde:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0220 	orr.w	r2, r2, #32
 8005cfe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10d      	bne.n	8005d66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_UART_IRQHandler+0x52>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9dc 	bl	800611c <UART_Receive_IT>
      return;
 8005d64:	e0cc      	b.n	8005f00 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80ab 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x1b0>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <HAL_UART_IRQHandler+0x70>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80a0 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_UART_IRQHandler+0x90>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	f043 0201 	orr.w	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_UART_IRQHandler+0xb0>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	f043 0202 	orr.w	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_UART_IRQHandler+0xd0>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	f043 0204 	orr.w	r2, r3, #4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_UART_IRQHandler+0xf0>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	f043 0208 	orr.w	r2, r3, #8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d078      	beq.n	8005efe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_UART_IRQHandler+0x112>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f97b 	bl	800611c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <HAL_UART_IRQHandler+0x13a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d031      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8c4 	bl	8005fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d123      	bne.n	8005eaa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d013      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <HAL_UART_IRQHandler+0x1f4>)
 8005e80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fb fdc0 	bl	8001a0c <HAL_DMA_Abort_IT>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	e00e      	b.n	8005ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f846 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	e00a      	b.n	8005ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f842 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e006      	b.n	8005ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f83e 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ebe:	e01e      	b.n	8005efe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	bf00      	nop
    return;
 8005ec2:	e01c      	b.n	8005efe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x1cc>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f8b1 	bl	8006040 <UART_Transmit_IT>
    return;
 8005ede:	e00f      	b.n	8005f00 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_UART_IRQHandler+0x1ec>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8f9 	bl	80060ec <UART_EndTransmit_IT>
    return;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005efe:	bf00      	nop
  }
}
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08006019 	.word	0x08006019

08005f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	e02c      	b.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d028      	beq.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f68:	f7fb f86e 	bl	8001048 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d21d      	bcs.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e00f      	b.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d0c3      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ff2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff7e 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b21      	cmp	r3, #33	; 0x21
 8006052:	d144      	bne.n	80060de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605c:	d11a      	bne.n	8006094 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006072:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	1c9a      	adds	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	621a      	str	r2, [r3, #32]
 8006086:	e00e      	b.n	80060a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	621a      	str	r2, [r3, #32]
 8006092:	e008      	b.n	80060a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6211      	str	r1, [r2, #32]
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4619      	mov	r1, r3
 80060b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006102:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fefd 	bl	8005f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b22      	cmp	r3, #34	; 0x22
 800612e:	d171      	bne.n	8006214 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d123      	bne.n	8006182 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10e      	bne.n	8006166 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e029      	b.n	80061ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2db      	uxtb	r3, r3
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
 8006180:	e01b      	b.n	80061ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6858      	ldr	r0, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6291      	str	r1, [r2, #40]	; 0x28
 800619a:	b2c2      	uxtb	r2, r0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e00c      	b.n	80061ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	1c58      	adds	r0, r3, #1
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	6288      	str	r0, [r1, #40]	; 0x28
 80061b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4619      	mov	r1, r3
 80061c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d120      	bne.n	8006210 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0220 	bic.w	r2, r2, #32
 80061dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695a      	ldr	r2, [r3, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fe8a 	bl	8005f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e002      	b.n	8006216 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006260:	f023 030c 	bic.w	r3, r3, #12
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	68f9      	ldr	r1, [r7, #12]
 800626a:	430b      	orrs	r3, r1
 800626c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	f040 80e4 	bne.w	8006458 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4aab      	ldr	r2, [pc, #684]	; (8006544 <UART_SetConfig+0x324>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <UART_SetConfig+0x84>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4aaa      	ldr	r2, [pc, #680]	; (8006548 <UART_SetConfig+0x328>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d16c      	bne.n	800637e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80062a4:	f7fe fbb4 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009a      	lsls	r2, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	4aa3      	ldr	r2, [pc, #652]	; (800654c <UART_SetConfig+0x32c>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	011c      	lsls	r4, r3, #4
 80062c8:	f7fe fba2 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009a      	lsls	r2, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	fbb2 f5f3 	udiv	r5, r2, r3
 80062e2:	f7fe fb95 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009a      	lsls	r2, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	4a93      	ldr	r2, [pc, #588]	; (800654c <UART_SetConfig+0x32c>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2264      	movs	r2, #100	; 0x64
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	1aeb      	subs	r3, r5, r3
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a8e      	ldr	r2, [pc, #568]	; (800654c <UART_SetConfig+0x32c>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800631e:	441c      	add	r4, r3
 8006320:	f7fe fb76 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006324:	4602      	mov	r2, r0
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009a      	lsls	r2, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fbb2 f5f3 	udiv	r5, r2, r3
 800633a:	f7fe fb69 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 800633e:	4602      	mov	r2, r0
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009a      	lsls	r2, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	4a7d      	ldr	r2, [pc, #500]	; (800654c <UART_SetConfig+0x32c>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2264      	movs	r2, #100	; 0x64
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	1aeb      	subs	r3, r5, r3
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	3332      	adds	r3, #50	; 0x32
 8006368:	4a78      	ldr	r2, [pc, #480]	; (800654c <UART_SetConfig+0x32c>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f003 0207 	and.w	r2, r3, #7
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4422      	add	r2, r4
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	e154      	b.n	8006628 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800637e:	f7fe fb33 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006382:	4602      	mov	r2, r0
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009a      	lsls	r2, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	4a6c      	ldr	r2, [pc, #432]	; (800654c <UART_SetConfig+0x32c>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	011c      	lsls	r4, r3, #4
 80063a2:	f7fe fb21 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80063a6:	4602      	mov	r2, r0
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009a      	lsls	r2, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80063bc:	f7fe fb14 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009a      	lsls	r2, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d6:	4a5d      	ldr	r2, [pc, #372]	; (800654c <UART_SetConfig+0x32c>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2264      	movs	r2, #100	; 0x64
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
 80063e4:	1aeb      	subs	r3, r5, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a58      	ldr	r2, [pc, #352]	; (800654c <UART_SetConfig+0x32c>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f8:	441c      	add	r4, r3
 80063fa:	f7fe faf5 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80063fe:	4602      	mov	r2, r0
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009a      	lsls	r2, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	fbb2 f5f3 	udiv	r5, r2, r3
 8006414:	f7fe fae8 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006418:	4602      	mov	r2, r0
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009a      	lsls	r2, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	4a47      	ldr	r2, [pc, #284]	; (800654c <UART_SetConfig+0x32c>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	2264      	movs	r2, #100	; 0x64
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	1aeb      	subs	r3, r5, r3
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	3332      	adds	r3, #50	; 0x32
 8006442:	4a42      	ldr	r2, [pc, #264]	; (800654c <UART_SetConfig+0x32c>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f003 0207 	and.w	r2, r3, #7
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4422      	add	r2, r4
 8006454:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006456:	e0e7      	b.n	8006628 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a39      	ldr	r2, [pc, #228]	; (8006544 <UART_SetConfig+0x324>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <UART_SetConfig+0x24c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a38      	ldr	r2, [pc, #224]	; (8006548 <UART_SetConfig+0x328>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d171      	bne.n	8006550 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800646c:	f7fe fad0 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006470:	4602      	mov	r2, r0
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009a      	lsls	r2, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	4a31      	ldr	r2, [pc, #196]	; (800654c <UART_SetConfig+0x32c>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	011c      	lsls	r4, r3, #4
 8006490:	f7fe fabe 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006494:	4602      	mov	r2, r0
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009a      	lsls	r2, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80064aa:	f7fe fab1 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009a      	lsls	r2, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <UART_SetConfig+0x32c>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	; 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1aeb      	subs	r3, r5, r3
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <UART_SetConfig+0x32c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e4:	441c      	add	r4, r3
 80064e6:	f7fe fa93 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009a      	lsls	r2, r3, #2
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8006500:	f7fe fa86 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006504:	4602      	mov	r2, r0
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009a      	lsls	r2, r3, #2
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	4a0c      	ldr	r2, [pc, #48]	; (800654c <UART_SetConfig+0x32c>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	2264      	movs	r2, #100	; 0x64
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	1aeb      	subs	r3, r5, r3
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	3332      	adds	r3, #50	; 0x32
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <UART_SetConfig+0x32c>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f003 020f 	and.w	r2, r3, #15
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4422      	add	r2, r4
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	e071      	b.n	8006628 <UART_SetConfig+0x408>
 8006544:	40011000 	.word	0x40011000
 8006548:	40011400 	.word	0x40011400
 800654c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006550:	f7fe fa4a 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006554:	4602      	mov	r2, r0
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009a      	lsls	r2, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	4a31      	ldr	r2, [pc, #196]	; (8006630 <UART_SetConfig+0x410>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	011c      	lsls	r4, r3, #4
 8006574:	f7fe fa38 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006578:	4602      	mov	r2, r0
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009a      	lsls	r2, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	fbb2 f5f3 	udiv	r5, r2, r3
 800658e:	f7fe fa2b 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006592:	4602      	mov	r2, r0
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009a      	lsls	r2, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	4a21      	ldr	r2, [pc, #132]	; (8006630 <UART_SetConfig+0x410>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2264      	movs	r2, #100	; 0x64
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	1aeb      	subs	r3, r5, r3
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	3332      	adds	r3, #50	; 0x32
 80065bc:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <UART_SetConfig+0x410>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c8:	441c      	add	r4, r3
 80065ca:	f7fe fa0d 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009a      	lsls	r2, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80065e4:	f7fe fa00 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80065e8:	4602      	mov	r2, r0
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009a      	lsls	r2, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <UART_SetConfig+0x410>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	2264      	movs	r2, #100	; 0x64
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	1aeb      	subs	r3, r5, r3
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	3332      	adds	r3, #50	; 0x32
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <UART_SetConfig+0x410>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f003 020f 	and.w	r2, r3, #15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4422      	add	r2, r4
 8006624:	609a      	str	r2, [r3, #8]
}
 8006626:	e7ff      	b.n	8006628 <UART_SetConfig+0x408>
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bdb0      	pop	{r4, r5, r7, pc}
 8006630:	51eb851f 	.word	0x51eb851f

08006634 <ADC_init>:

static uint8_t tmp_reg;


void ADC_init(I2C_HandleTypeDef *p_hi2c)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
	adc_i2c = p_hi2c;
 800663c:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <ADC_init+0xc8>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]

	tmp_reg = 0;
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <ADC_init+0xcc>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]

	tmp_reg |= (ADC_LOW_POW_MODE_BIT<<7); //bit 7
 8006648:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <ADC_init+0xcc>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <ADC_init+0xcc>)
 8006654:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_INP_MUX_CONF_BIT<<4); //bit 6, 5, 4
 8006656:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <ADC_init+0xcc>)
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	4b29      	ldr	r3, [pc, #164]	; (8006700 <ADC_init+0xcc>)
 800665c:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_PRG_GAIN_AMP_BIT<<1); //bit 3, 2, 1
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <ADC_init+0xcc>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b25      	ldr	r3, [pc, #148]	; (8006700 <ADC_init+0xcc>)
 800666a:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DEV_OP_MODE_BIT); //bit 0
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <ADC_init+0xcc>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b22      	ldr	r3, [pc, #136]	; (8006700 <ADC_init+0xcc>)
 8006678:	701a      	strb	r2, [r3, #0]
	conf_buffer[1] = tmp_reg;
 800667a:	4b21      	ldr	r3, [pc, #132]	; (8006700 <ADC_init+0xcc>)
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <ADC_init+0xd0>)
 8006680:	705a      	strb	r2, [r3, #1]


	tmp_reg = 0;
 8006682:	4b1f      	ldr	r3, [pc, #124]	; (8006700 <ADC_init+0xcc>)
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_DATA_RATE_BIT)<<5; //bit 7, 6, 5
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <ADC_init+0xcc>)
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <ADC_init+0xcc>)
 800668e:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_MODE_BIT)<<4;  //bit 4
 8006690:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <ADC_init+0xcc>)
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <ADC_init+0xcc>)
 8006696:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_POL_BIT)<<3;   //bit 3
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <ADC_init+0xcc>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f043 0308 	orr.w	r3, r3, #8
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <ADC_init+0xcc>)
 80066a4:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_LAT_BIT)<<2;   //bit 2
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <ADC_init+0xcc>)
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <ADC_init+0xcc>)
 80066ac:	701a      	strb	r2, [r3, #0]
	tmp_reg |= (ADC_CMP_QUEUE_BIT)<<1; //bit 1, 0
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <ADC_init+0xcc>)
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <ADC_init+0xcc>)
 80066b4:	701a      	strb	r2, [r3, #0]
	conf_buffer[2] = tmp_reg;
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <ADC_init+0xcc>)
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	4b12      	ldr	r3, [pc, #72]	; (8006704 <ADC_init+0xd0>)
 80066bc:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,     3, 250);
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <ADC_init+0xc8>)
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	23fa      	movs	r3, #250	; 0xfa
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	2303      	movs	r3, #3
 80066c8:	4a0e      	ldr	r2, [pc, #56]	; (8006704 <ADC_init+0xd0>)
 80066ca:	2190      	movs	r1, #144	; 0x90
 80066cc:	f7fd f884 	bl	80037d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, LO_cmp_buffer,   3, 250);
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <ADC_init+0xc8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	23fa      	movs	r3, #250	; 0xfa
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2303      	movs	r3, #3
 80066da:	4a0b      	ldr	r2, [pc, #44]	; (8006708 <ADC_init+0xd4>)
 80066dc:	2190      	movs	r1, #144	; 0x90
 80066de:	f7fd f87b 	bl	80037d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, HI_cmp_buffer,   3, 250);
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <ADC_init+0xc8>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	23fa      	movs	r3, #250	; 0xfa
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2303      	movs	r3, #3
 80066ec:	4a07      	ldr	r2, [pc, #28]	; (800670c <ADC_init+0xd8>)
 80066ee:	2190      	movs	r1, #144	; 0x90
 80066f0:	f7fd f872 	bl	80037d8 <HAL_I2C_Master_Transmit>
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200000c8 	.word	0x200000c8
 8006700:	200000d4 	.word	0x200000d4
 8006704:	20000008 	.word	0x20000008
 8006708:	2000000c 	.word	0x2000000c
 800670c:	20000010 	.word	0x20000010

08006710 <ADC_do_conversion>:

float ADC_do_conversion()
{
 8006710:	b5b0      	push	{r4, r5, r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS <<1, conf_buffer,   3, 250); //command itself
 8006716:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <ADC_do_conversion+0xb4>)
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	23fa      	movs	r3, #250	; 0xfa
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	2303      	movs	r3, #3
 8006720:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <ADC_do_conversion+0xb8>)
 8006722:	2190      	movs	r1, #144	; 0x90
 8006724:	f7fd f858 	bl	80037d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(adc_i2c, ADC_ADDRESS<<1, ADC_CONV_REG, 1, 250);
 8006728:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <ADC_do_conversion+0xb4>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	23fa      	movs	r3, #250	; 0xfa
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2301      	movs	r3, #1
 8006732:	2200      	movs	r2, #0
 8006734:	2190      	movs	r1, #144	; 0x90
 8006736:	f7fd f84f 	bl	80037d8 <HAL_I2C_Master_Transmit>
    HAL_Delay(25);
 800673a:	2019      	movs	r0, #25
 800673c:	f7fa fc90 	bl	8001060 <HAL_Delay>
    HAL_I2C_Master_Receive(adc_i2c, ADC_ADDRESS<<1, lux, 2, 250);
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <ADC_do_conversion+0xb4>)
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	23fa      	movs	r3, #250	; 0xfa
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2302      	movs	r3, #2
 800674a:	4a20      	ldr	r2, [pc, #128]	; (80067cc <ADC_do_conversion+0xbc>)
 800674c:	2190      	movs	r1, #144	; 0x90
 800674e:	f7fd f941 	bl	80039d4 <HAL_I2C_Master_Receive>

    reading = (lux[0] << 8 | lux[1]);
 8006752:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <ADC_do_conversion+0xbc>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	b21a      	sxth	r2, r3
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <ADC_do_conversion+0xbc>)
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	b21b      	sxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b21b      	sxth	r3, r3
 8006764:	b29a      	uxth	r2, r3
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <ADC_do_conversion+0xc0>)
 8006768:	801a      	strh	r2, [r3, #0]
    voltage = (float)reading*((gains[ADC_PRG_GAIN_AMP_BIT-1])/(32768.0));
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <ADC_do_conversion+0xc0>)
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	ee17 0a90 	vmov	r0, s15
 800677a:	f7f9 fefd 	bl	8000578 <__aeabi_f2d>
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <ADC_do_conversion+0xc4>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	f7f9 fef6 	bl	8000578 <__aeabi_f2d>
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <ADC_do_conversion+0xc8>)
 8006792:	f7fa f873 	bl	800087c <__aeabi_ddiv>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f7f9 ff43 	bl	8000628 <__aeabi_dmul>
 80067a2:	4603      	mov	r3, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	4618      	mov	r0, r3
 80067a8:	4621      	mov	r1, r4
 80067aa:	f7fa f94f 	bl	8000a4c <__aeabi_d2f>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <ADC_do_conversion+0xcc>)
 80067b2:	601a      	str	r2, [r3, #0]

    return voltage;
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <ADC_do_conversion+0xcc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	ee07 3a90 	vmov	s15, r3
}
 80067bc:	eeb0 0a67 	vmov.f32	s0, s15
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bdb0      	pop	{r4, r5, r7, pc}
 80067c4:	200000c8 	.word	0x200000c8
 80067c8:	20000008 	.word	0x20000008
 80067cc:	200000cc 	.word	0x200000cc
 80067d0:	200000ce 	.word	0x200000ce
 80067d4:	20000014 	.word	0x20000014
 80067d8:	40e00000 	.word	0x40e00000
 80067dc:	200000d0 	.word	0x200000d0

080067e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	f5ad 3d96 	sub.w	sp, sp, #76800	; 0x12c00
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  float measure=0.0;
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	f507 3296 	add.w	r2, r7, #76800	; 0x12c00
 80067f2:	6013      	str	r3, [r2, #0]
  uint32_t i = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f507 3296 	add.w	r2, r7, #76800	; 0x12c00
 80067fa:	f102 0204 	add.w	r2, r2, #4
 80067fe:	6013      	str	r3, [r2, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006800:	f7fa fbbc 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006804:	f000 f890 	bl	8006928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006808:	f000 fa46 	bl	8006c98 <MX_GPIO_Init>
  MX_DMA_Init();
 800680c:	f000 fa24 	bl	8006c58 <MX_DMA_Init>
  MX_I2C1_Init();
 8006810:	f000 f926 	bl	8006a60 <MX_I2C1_Init>
  MX_DCMI_Init();
 8006814:	f000 f8f0 	bl	80069f8 <MX_DCMI_Init>
  MX_I2C2_Init();
 8006818:	f000 f950 	bl	8006abc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800681c:	f000 f9f2 	bl	8006c04 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8006820:	f000 f97a 	bl	8006b18 <MX_TIM14_Init>
  MX_UART4_Init();
 8006824:	f000 f9c4 	bl	8006bb0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  ADC_init(&hi2c1);
 8006828:	4837      	ldr	r0, [pc, #220]	; (8006908 <main+0x128>)
 800682a:	f7ff ff03 	bl	8006634 <ADC_init>



  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 800682e:	4a37      	ldr	r2, [pc, #220]	; (800690c <main+0x12c>)
 8006830:	4937      	ldr	r1, [pc, #220]	; (8006910 <main+0x130>)
 8006832:	4838      	ldr	r0, [pc, #224]	; (8006914 <main+0x134>)
 8006834:	f7fa fada 	bl	8000dec <ov7670_init>
  ov7670_config(0);
 8006838:	2000      	movs	r0, #0
 800683a:	f7fa fb21 	bl	8000e80 <ov7670_config>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800683e:	2100      	movs	r1, #0
 8006840:	4835      	ldr	r0, [pc, #212]	; (8006918 <main+0x138>)
 8006842:	f7fe fd05 	bl	8005250 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart4, &buffer_uart, 1);
 8006846:	2201      	movs	r2, #1
 8006848:	4934      	ldr	r1, [pc, #208]	; (800691c <main+0x13c>)
 800684a:	4835      	ldr	r0, [pc, #212]	; (8006920 <main+0x140>)
 800684c:	f7ff fa0c 	bl	8005c68 <HAL_UART_Receive_IT>


    measure = ADC_do_conversion();
 8006850:	f7ff ff5e 	bl	8006710 <ADC_do_conversion>
 8006854:	f507 3396 	add.w	r3, r7, #76800	; 0x12c00
 8006858:	ed83 0a00 	vstr	s0, [r3]
    HAL_Delay(500);
 800685c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006860:	f7fa fbfe 	bl	8001060 <HAL_Delay>

    if(measure <LUX_THRESHOLD)
 8006864:	f507 3396 	add.w	r3, r7, #76800	; 0x12c00
 8006868:	edd3 7a00 	vldr	s15, [r3]
 800686c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006878:	d504      	bpl.n	8006884 <main+0xa4>
    {
    	//HAL_GPIO_WritePin(Buck_Vin_GPIO_Port, Buck_Vin_Pin, GPIO_PIN_SET);
    	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800687a:	2100      	movs	r1, #0
 800687c:	4826      	ldr	r0, [pc, #152]	; (8006918 <main+0x138>)
 800687e:	f7fe fce7 	bl	8005250 <HAL_TIM_PWM_Start>
 8006882:	e003      	b.n	800688c <main+0xac>
    }
    else
    {
    //	HAL_GPIO_WritePin(Buck_Vin_GPIO_Port, Buck_Vin_Pin, GPIO_PIN_RESET);
    	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8006884:	2100      	movs	r1, #0
 8006886:	4824      	ldr	r0, [pc, #144]	; (8006918 <main+0x138>)
 8006888:	f7fe fd20 	bl	80052cc <HAL_TIM_PWM_Stop>
    }

    if(buffer_uart == 1)
 800688c:	4b23      	ldr	r3, [pc, #140]	; (800691c <main+0x13c>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d1d8      	bne.n	8006846 <main+0x66>
    {
    	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, lcdBuffer, 19200);
 8006894:	f107 0208 	add.w	r2, r7, #8
 8006898:	3a08      	subs	r2, #8
 800689a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800689e:	2102      	movs	r1, #2
 80068a0:	481c      	ldr	r0, [pc, #112]	; (8006914 <main+0x134>)
 80068a2:	f7fa fd11 	bl	80012c8 <HAL_DCMI_Start_DMA>
    	HAL_Delay(1000);
 80068a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068aa:	f7fa fbd9 	bl	8001060 <HAL_Delay>
    	ov7670_stopCap();
 80068ae:	f7fa fb15 	bl	8000edc <ov7670_stopCap>
    	for(i=0; i<19200; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	f507 3296 	add.w	r2, r7, #76800	; 0x12c00
 80068b8:	f102 0204 	add.w	r2, r2, #4
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e01a      	b.n	80068f6 <main+0x116>
    	{
    		HAL_UART_Transmit(&huart3, &lcdBuffer[i], 4, 300);
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	3b08      	subs	r3, #8
 80068c6:	f507 3296 	add.w	r2, r7, #76800	; 0x12c00
 80068ca:	f102 0204 	add.w	r2, r2, #4
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	0092      	lsls	r2, r2, #2
 80068d2:	1899      	adds	r1, r3, r2
 80068d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80068d8:	2204      	movs	r2, #4
 80068da:	4812      	ldr	r0, [pc, #72]	; (8006924 <main+0x144>)
 80068dc:	f7ff f92b 	bl	8005b36 <HAL_UART_Transmit>
    	for(i=0; i<19200; i++)
 80068e0:	f507 3396 	add.w	r3, r7, #76800	; 0x12c00
 80068e4:	f103 0304 	add.w	r3, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	f507 3296 	add.w	r2, r7, #76800	; 0x12c00
 80068f0:	f102 0204 	add.w	r2, r2, #4
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f507 3396 	add.w	r3, r7, #76800	; 0x12c00
 80068fa:	f103 0304 	add.w	r3, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8006904:	d3dc      	bcc.n	80068c0 <main+0xe0>
	HAL_UART_Receive_IT(&huart4, &buffer_uart, 1);
 8006906:	e79e      	b.n	8006846 <main+0x66>
 8006908:	20000128 	.word	0x20000128
 800690c:	2000017c 	.word	0x2000017c
 8006910:	200001d0 	.word	0x200001d0
 8006914:	20000230 	.word	0x20000230
 8006918:	200002c4 	.word	0x200002c4
 800691c:	20000280 	.word	0x20000280
 8006920:	20000284 	.word	0x20000284
 8006924:	200000e8 	.word	0x200000e8

08006928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b094      	sub	sp, #80	; 0x50
 800692c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800692e:	f107 031c 	add.w	r3, r7, #28
 8006932:	2234      	movs	r2, #52	; 0x34
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f000 feb2 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800694c:	2300      	movs	r3, #0
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <SystemClock_Config+0xc8>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	4a26      	ldr	r2, [pc, #152]	; (80069f0 <SystemClock_Config+0xc8>)
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	6413      	str	r3, [r2, #64]	; 0x40
 800695c:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <SystemClock_Config+0xc8>)
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006968:	2300      	movs	r3, #0
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <SystemClock_Config+0xcc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006974:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <SystemClock_Config+0xcc>)
 8006976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <SystemClock_Config+0xcc>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006988:	2303      	movs	r3, #3
 800698a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800698c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006992:	2301      	movs	r3, #1
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006996:	2310      	movs	r3, #16
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800699e:	f107 031c 	add.w	r3, r7, #28
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe f99a 	bl	8004cdc <HAL_RCC_OscConfig>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80069ae:	f000 fa55 	bl	8006e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069b2:	230f      	movs	r3, #15
 80069b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069ba:	2300      	movs	r3, #0
 80069bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fd feb5 	bl	800473c <HAL_RCC_ClockConfig>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80069d8:	f000 fa40 	bl	8006e5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e2:	2000      	movs	r0, #0
 80069e4:	f7fd ff8c 	bl	8004900 <HAL_RCC_MCOConfig>
}
 80069e8:	bf00      	nop
 80069ea:	3750      	adds	r7, #80	; 0x50
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40023800 	.word	0x40023800
 80069f4:	40007000 	.word	0x40007000

080069f8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <MX_DCMI_Init+0x60>)
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <MX_DCMI_Init+0x64>)
 8006a00:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8006a08:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a10:	2280      	movs	r2, #128	; 0x80
 8006a12:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8006a14:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8006a44:	4804      	ldr	r0, [pc, #16]	; (8006a58 <MX_DCMI_Init+0x60>)
 8006a46:	f7fa fdf1 	bl	800162c <HAL_DCMI_Init>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8006a50:	f000 fa04 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8006a54:	bf00      	nop
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000230 	.word	0x20000230
 8006a5c:	50050000 	.word	0x50050000

08006a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006a64:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a66:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <MX_I2C1_Init+0x54>)
 8006a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a6c:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <MX_I2C1_Init+0x58>)
 8006a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006a76:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a7c:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006a9c:	4804      	ldr	r0, [pc, #16]	; (8006ab0 <MX_I2C1_Init+0x50>)
 8006a9e:	f7fc fd73 	bl	8003588 <HAL_I2C_Init>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006aa8:	f000 f9d8 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006aac:	bf00      	nop
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000128 	.word	0x20000128
 8006ab4:	40005400 	.word	0x40005400
 8006ab8:	000186a0 	.word	0x000186a0

08006abc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006ac0:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ac2:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <MX_I2C2_Init+0x54>)
 8006ac4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ac8:	4a12      	ldr	r2, [pc, #72]	; (8006b14 <MX_I2C2_Init+0x58>)
 8006aca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ade:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006af8:	4804      	ldr	r0, [pc, #16]	; (8006b0c <MX_I2C2_Init+0x50>)
 8006afa:	f7fc fd45 	bl	8003588 <HAL_I2C_Init>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006b04:	f000 f9aa 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000017c 	.word	0x2000017c
 8006b10:	40005800 	.word	0x40005800
 8006b14:	000186a0 	.word	0x000186a0

08006b18 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	609a      	str	r2, [r3, #8]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	611a      	str	r2, [r3, #16]
 8006b2c:	615a      	str	r2, [r3, #20]
 8006b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006b30:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <MX_TIM14_Init+0x94>)
 8006b34:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 160;
 8006b36:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b38:	22a0      	movs	r2, #160	; 0xa0
 8006b3a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8006b42:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b44:	2264      	movs	r2, #100	; 0x64
 8006b46:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b48:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006b54:	4814      	ldr	r0, [pc, #80]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b56:	f7fe fb1b 	bl	8005190 <HAL_TIM_Base_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8006b60:	f000 f97c 	bl	8006e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8006b64:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b66:	f7fe fb3e 	bl	80051e6 <HAL_TIM_PWM_Init>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8006b70:	f000 f974 	bl	8006e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b74:	2360      	movs	r3, #96	; 0x60
 8006b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 75;
 8006b78:	234b      	movs	r3, #75	; 0x4b
 8006b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	2200      	movs	r2, #0
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4807      	ldr	r0, [pc, #28]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b8c:	f7fe fbf6 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8006b96:	f000 f961 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8006b9a:	4803      	ldr	r0, [pc, #12]	; (8006ba8 <MX_TIM14_Init+0x90>)
 8006b9c:	f000 fb38 	bl	8007210 <HAL_TIM_MspPostInit>

}
 8006ba0:	bf00      	nop
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	200002c4 	.word	0x200002c4
 8006bac:	40002000 	.word	0x40002000

08006bb0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bb6:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <MX_UART4_Init+0x50>)
 8006bb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_ODD;
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bd0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006bd4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bd8:	2204      	movs	r2, #4
 8006bda:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bdc:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8006be8:	4804      	ldr	r0, [pc, #16]	; (8006bfc <MX_UART4_Init+0x4c>)
 8006bea:	f7fe ff4f 	bl	8005a8c <HAL_HalfDuplex_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8006bf4:	f000 f932 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006bf8:	bf00      	nop
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000284 	.word	0x20000284
 8006c00:	40004c00 	.word	0x40004c00

08006c04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <MX_USART3_UART_Init+0x50>)
 8006c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006c3a:	4805      	ldr	r0, [pc, #20]	; (8006c50 <MX_USART3_UART_Init+0x4c>)
 8006c3c:	f7fe fed9 	bl	80059f2 <HAL_UART_Init>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006c46:	f000 f909 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200000e8 	.word	0x200000e8
 8006c54:	40004800 	.word	0x40004800

08006c58 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	607b      	str	r3, [r7, #4]
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <MX_DMA_Init+0x3c>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	4a0b      	ldr	r2, [pc, #44]	; (8006c94 <MX_DMA_Init+0x3c>)
 8006c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <MX_DMA_Init+0x3c>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c76:	607b      	str	r3, [r7, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	2039      	movs	r0, #57	; 0x39
 8006c80:	f7fa faeb 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006c84:	2039      	movs	r0, #57	; 0x39
 8006c86:	f7fa fb04 	bl	8001292 <HAL_NVIC_EnableIRQ>

}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800

08006c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	609a      	str	r2, [r3, #8]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	623b      	str	r3, [r7, #32]
 8006cb2:	4b64      	ldr	r3, [pc, #400]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a63      	ldr	r2, [pc, #396]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cb8:	f043 0310 	orr.w	r3, r3, #16
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b61      	ldr	r3, [pc, #388]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	623b      	str	r3, [r7, #32]
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	4a5c      	ldr	r2, [pc, #368]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cda:	4b5a      	ldr	r3, [pc, #360]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	4a55      	ldr	r2, [pc, #340]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf6:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	4a4e      	ldr	r2, [pc, #312]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6313      	str	r3, [r2, #48]	; 0x30
 8006d12:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	4b48      	ldr	r3, [pc, #288]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a47      	ldr	r2, [pc, #284]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d28:	f043 0304 	orr.w	r3, r3, #4
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b45      	ldr	r3, [pc, #276]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	4a40      	ldr	r2, [pc, #256]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
 8006d4a:	4b3e      	ldr	r3, [pc, #248]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	4b3a      	ldr	r3, [pc, #232]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	4a39      	ldr	r2, [pc, #228]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d60:	f043 0302 	orr.w	r3, r3, #2
 8006d64:	6313      	str	r3, [r2, #48]	; 0x30
 8006d66:	4b37      	ldr	r3, [pc, #220]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	4b33      	ldr	r3, [pc, #204]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	4a32      	ldr	r2, [pc, #200]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d7c:	f043 0308 	orr.w	r3, r3, #8
 8006d80:	6313      	str	r3, [r2, #48]	; 0x30
 8006d82:	4b30      	ldr	r3, [pc, #192]	; (8006e44 <MX_GPIO_Init+0x1ac>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ResetCamera_Pin|Buck_Vin_Pin, GPIO_PIN_RESET);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2103      	movs	r1, #3
 8006d92:	482d      	ldr	r0, [pc, #180]	; (8006e48 <MX_GPIO_Init+0x1b0>)
 8006d94:	f7fc fbde 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_LED_GPIO_Port, ADC_LED_Pin, GPIO_PIN_RESET);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d9e:	482b      	ldr	r0, [pc, #172]	; (8006e4c <MX_GPIO_Init+0x1b4>)
 8006da0:	f7fc fbd8 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006daa:	4b29      	ldr	r3, [pc, #164]	; (8006e50 <MX_GPIO_Init+0x1b8>)
 8006dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db6:	4619      	mov	r1, r3
 8006db8:	4826      	ldr	r0, [pc, #152]	; (8006e54 <MX_GPIO_Init+0x1bc>)
 8006dba:	f7fc fa39 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ResetCamera_Pin Buck_Vin_Pin */
  GPIO_InitStruct.Pin = ResetCamera_Pin|Buck_Vin_Pin;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	481c      	ldr	r0, [pc, #112]	; (8006e48 <MX_GPIO_Init+0x1b0>)
 8006dd6:	f7fc fa2b 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_LED_Pin */
  GPIO_InitStruct.Pin = ADC_LED_Pin;
 8006dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006de0:	2301      	movs	r3, #1
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006de8:	2300      	movs	r3, #0
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_LED_GPIO_Port, &GPIO_InitStruct);
 8006dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df0:	4619      	mov	r1, r3
 8006df2:	4816      	ldr	r0, [pc, #88]	; (8006e4c <MX_GPIO_Init+0x1b4>)
 8006df4:	f7fc fa1c 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e06:	2300      	movs	r3, #0
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e12:	4619      	mov	r1, r3
 8006e14:	4810      	ldr	r0, [pc, #64]	; (8006e58 <MX_GPIO_Init+0x1c0>)
 8006e16:	f7fc fa0b 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e20:	2302      	movs	r3, #2
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e2c:	230a      	movs	r3, #10
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e34:	4619      	mov	r1, r3
 8006e36:	4808      	ldr	r0, [pc, #32]	; (8006e58 <MX_GPIO_Init+0x1c0>)
 8006e38:	f7fc f9fa 	bl	8003230 <HAL_GPIO_Init>

}
 8006e3c:	bf00      	nop
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40023800 	.word	0x40023800
 8006e48:	40021800 	.word	0x40021800
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	10110000 	.word	0x10110000
 8006e54:	40021400 	.word	0x40021400
 8006e58:	40020000 	.word	0x40020000

08006e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006e60:	bf00      	nop
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7a:	4a0f      	ldr	r2, [pc, #60]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e80:	6453      	str	r3, [r2, #68]	; 0x44
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8a:	607b      	str	r3, [r7, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e8e:	2300      	movs	r3, #0
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <HAL_MspInit+0x4c>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800

08006ebc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	609a      	str	r2, [r3, #8]
 8006ed0:	60da      	str	r2, [r3, #12]
 8006ed2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a74      	ldr	r2, [pc, #464]	; (80070ac <HAL_DCMI_MspInit+0x1f0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	f040 80e1 	bne.w	80070a2 <HAL_DCMI_MspInit+0x1e6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	4b72      	ldr	r3, [pc, #456]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	4a71      	ldr	r2, [pc, #452]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006eea:	f043 0301 	orr.w	r3, r3, #1
 8006eee:	6353      	str	r3, [r2, #52]	; 0x34
 8006ef0:	4b6f      	ldr	r3, [pc, #444]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	623b      	str	r3, [r7, #32]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	4b6b      	ldr	r3, [pc, #428]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4a6a      	ldr	r2, [pc, #424]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f06:	f043 0310 	orr.w	r3, r3, #16
 8006f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0c:	4b68      	ldr	r3, [pc, #416]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	4b64      	ldr	r3, [pc, #400]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	4a63      	ldr	r2, [pc, #396]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6313      	str	r3, [r2, #48]	; 0x30
 8006f28:	4b61      	ldr	r3, [pc, #388]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	4b5d      	ldr	r3, [pc, #372]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	4a5c      	ldr	r2, [pc, #368]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f3e:	f043 0304 	orr.w	r3, r3, #4
 8006f42:	6313      	str	r3, [r2, #48]	; 0x30
 8006f44:	4b5a      	ldr	r3, [pc, #360]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	4b56      	ldr	r3, [pc, #344]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	4a55      	ldr	r2, [pc, #340]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f5a:	f043 0308 	orr.w	r3, r3, #8
 8006f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f60:	4b53      	ldr	r3, [pc, #332]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4b4f      	ldr	r3, [pc, #316]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	4a4e      	ldr	r2, [pc, #312]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7c:	4b4c      	ldr	r3, [pc, #304]	; (80070b0 <HAL_DCMI_MspInit+0x1f4>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006f88:	2370      	movs	r3, #112	; 0x70
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f94:	2300      	movs	r3, #0
 8006f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006f98:	230d      	movs	r3, #13
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4844      	ldr	r0, [pc, #272]	; (80070b4 <HAL_DCMI_MspInit+0x1f8>)
 8006fa4:	f7fc f944 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8006fa8:	2350      	movs	r3, #80	; 0x50
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fac:	2302      	movs	r3, #2
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006fb8:	230d      	movs	r3, #13
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	483d      	ldr	r0, [pc, #244]	; (80070b8 <HAL_DCMI_MspInit+0x1fc>)
 8006fc4:	f7fc f934 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006fc8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006fda:	230d      	movs	r3, #13
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4835      	ldr	r0, [pc, #212]	; (80070bc <HAL_DCMI_MspInit+0x200>)
 8006fe6:	f7fc f923 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006fea:	2308      	movs	r3, #8
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006ffa:	230d      	movs	r3, #13
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007002:	4619      	mov	r1, r3
 8007004:	482e      	ldr	r0, [pc, #184]	; (80070c0 <HAL_DCMI_MspInit+0x204>)
 8007006:	f7fc f913 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800700a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007010:	2302      	movs	r3, #2
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007014:	2300      	movs	r3, #0
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007018:	2303      	movs	r3, #3
 800701a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800701c:	230d      	movs	r3, #13
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007024:	4619      	mov	r1, r3
 8007026:	4827      	ldr	r0, [pc, #156]	; (80070c4 <HAL_DCMI_MspInit+0x208>)
 8007028:	f7fc f902 	bl	8003230 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800702c:	4b26      	ldr	r3, [pc, #152]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800702e:	4a27      	ldr	r2, [pc, #156]	; (80070cc <HAL_DCMI_MspInit+0x210>)
 8007030:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007038:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800703c:	2200      	movs	r2, #0
 800703e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007042:	2200      	movs	r2, #0
 8007044:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8007046:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800704c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800704e:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007054:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007056:	4b1c      	ldr	r3, [pc, #112]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007058:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800705c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800705e:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007064:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8007066:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007068:	2200      	movs	r2, #0
 800706a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800706e:	2204      	movs	r2, #4
 8007070:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007074:	2203      	movs	r2, #3
 8007076:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8007078:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800707a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800707e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8007086:	4810      	ldr	r0, [pc, #64]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 8007088:	f7fa fb42 	bl	8001710 <HAL_DMA_Init>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8007092:	f7ff fee3 	bl	8006e5c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a0b      	ldr	r2, [pc, #44]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800709a:	649a      	str	r2, [r3, #72]	; 0x48
 800709c:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <HAL_DCMI_MspInit+0x20c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80070a2:	bf00      	nop
 80070a4:	3738      	adds	r7, #56	; 0x38
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	50050000 	.word	0x50050000
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40020000 	.word	0x40020000
 80070bc:	40020800 	.word	0x40020800
 80070c0:	40020c00 	.word	0x40020c00
 80070c4:	40021800 	.word	0x40021800
 80070c8:	200001d0 	.word	0x200001d0
 80070cc:	40026428 	.word	0x40026428

080070d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d8:	f107 031c 	add.w	r3, r7, #28
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a32      	ldr	r2, [pc, #200]	; (80071b8 <HAL_I2C_MspInit+0xe8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d12d      	bne.n	800714e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	4b31      	ldr	r3, [pc, #196]	; (80071bc <HAL_I2C_MspInit+0xec>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	4a30      	ldr	r2, [pc, #192]	; (80071bc <HAL_I2C_MspInit+0xec>)
 80070fc:	f043 0302 	orr.w	r3, r3, #2
 8007100:	6313      	str	r3, [r2, #48]	; 0x30
 8007102:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <HAL_I2C_MspInit+0xec>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800710e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007114:	2312      	movs	r3, #18
 8007116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007118:	2301      	movs	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711c:	2303      	movs	r3, #3
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007120:	2304      	movs	r3, #4
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007124:	f107 031c 	add.w	r3, r7, #28
 8007128:	4619      	mov	r1, r3
 800712a:	4825      	ldr	r0, [pc, #148]	; (80071c0 <HAL_I2C_MspInit+0xf0>)
 800712c:	f7fc f880 	bl	8003230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	4b21      	ldr	r3, [pc, #132]	; (80071bc <HAL_I2C_MspInit+0xec>)
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	4a20      	ldr	r2, [pc, #128]	; (80071bc <HAL_I2C_MspInit+0xec>)
 800713a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800713e:	6413      	str	r3, [r2, #64]	; 0x40
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <HAL_I2C_MspInit+0xec>)
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800714c:	e030      	b.n	80071b0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <HAL_I2C_MspInit+0xf4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d12b      	bne.n	80071b0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	4b17      	ldr	r3, [pc, #92]	; (80071bc <HAL_I2C_MspInit+0xec>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <HAL_I2C_MspInit+0xec>)
 8007162:	f043 0320 	orr.w	r3, r3, #32
 8007166:	6313      	str	r3, [r2, #48]	; 0x30
 8007168:	4b14      	ldr	r3, [pc, #80]	; (80071bc <HAL_I2C_MspInit+0xec>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007174:	2303      	movs	r3, #3
 8007176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007178:	2312      	movs	r3, #18
 800717a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800717c:	2301      	movs	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007180:	2303      	movs	r3, #3
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007184:	2304      	movs	r3, #4
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007188:	f107 031c 	add.w	r3, r7, #28
 800718c:	4619      	mov	r1, r3
 800718e:	480e      	ldr	r0, [pc, #56]	; (80071c8 <HAL_I2C_MspInit+0xf8>)
 8007190:	f7fc f84e 	bl	8003230 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	4b08      	ldr	r3, [pc, #32]	; (80071bc <HAL_I2C_MspInit+0xec>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	4a07      	ldr	r2, [pc, #28]	; (80071bc <HAL_I2C_MspInit+0xec>)
 800719e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071a2:	6413      	str	r3, [r2, #64]	; 0x40
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_I2C_MspInit+0xec>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
}
 80071b0:	bf00      	nop
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40005400 	.word	0x40005400
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40020400 	.word	0x40020400
 80071c4:	40005800 	.word	0x40005800
 80071c8:	40021400 	.word	0x40021400

080071cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a0b      	ldr	r2, [pc, #44]	; (8007208 <HAL_TIM_Base_MspInit+0x3c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d10d      	bne.n	80071fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <HAL_TIM_Base_MspInit+0x40>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a09      	ldr	r2, [pc, #36]	; (800720c <HAL_TIM_Base_MspInit+0x40>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <HAL_TIM_Base_MspInit+0x40>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40002000 	.word	0x40002000
 800720c:	40023800 	.word	0x40023800

08007210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a12      	ldr	r2, [pc, #72]	; (8007278 <HAL_TIM_MspPostInit+0x68>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d11e      	bne.n	8007270 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <HAL_TIM_MspPostInit+0x6c>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	4a10      	ldr	r2, [pc, #64]	; (800727c <HAL_TIM_MspPostInit+0x6c>)
 800723c:	f043 0320 	orr.w	r3, r3, #32
 8007240:	6313      	str	r3, [r2, #48]	; 0x30
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <HAL_TIM_MspPostInit+0x6c>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration    
    PF9     ------> TIM14_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800724e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007254:	2302      	movs	r3, #2
 8007256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8007260:	2309      	movs	r3, #9
 8007262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007264:	f107 030c 	add.w	r3, r7, #12
 8007268:	4619      	mov	r1, r3
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <HAL_TIM_MspPostInit+0x70>)
 800726c:	f7fb ffe0 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8007270:	bf00      	nop
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40002000 	.word	0x40002000
 800727c:	40023800 	.word	0x40023800
 8007280:	40021400 	.word	0x40021400

08007284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	609a      	str	r2, [r3, #8]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a45      	ldr	r2, [pc, #276]	; (80073b8 <HAL_UART_MspInit+0x134>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d134      	bne.n	8007310 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	4b44      	ldr	r3, [pc, #272]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	4a43      	ldr	r2, [pc, #268]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b4:	6413      	str	r3, [r2, #64]	; 0x40
 80072b6:	4b41      	ldr	r3, [pc, #260]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a3c      	ldr	r2, [pc, #240]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b3a      	ldr	r3, [pc, #232]	; (80073bc <HAL_UART_MspInit+0x138>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = DataFromFPGA_Pin;
 80072de:	2301      	movs	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072e2:	2312      	movs	r3, #18
 80072e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072e6:	2301      	movs	r3, #1
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ea:	2303      	movs	r3, #3
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80072ee:	2308      	movs	r3, #8
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DataFromFPGA_GPIO_Port, &GPIO_InitStruct);
 80072f2:	f107 031c 	add.w	r3, r7, #28
 80072f6:	4619      	mov	r1, r3
 80072f8:	4831      	ldr	r0, [pc, #196]	; (80073c0 <HAL_UART_MspInit+0x13c>)
 80072fa:	f7fb ff99 	bl	8003230 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	2034      	movs	r0, #52	; 0x34
 8007304:	f7f9 ffa9 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007308:	2034      	movs	r0, #52	; 0x34
 800730a:	f7f9 ffc2 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800730e:	e04f      	b.n	80073b0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a2b      	ldr	r2, [pc, #172]	; (80073c4 <HAL_UART_MspInit+0x140>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d14a      	bne.n	80073b0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	4b27      	ldr	r3, [pc, #156]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	4a26      	ldr	r2, [pc, #152]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007328:	6413      	str	r3, [r2, #64]	; 0x40
 800732a:	4b24      	ldr	r3, [pc, #144]	; (80073bc <HAL_UART_MspInit+0x138>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <HAL_UART_MspInit+0x138>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007340:	f043 0304 	orr.w	r3, r3, #4
 8007344:	6313      	str	r3, [r2, #48]	; 0x30
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	4b19      	ldr	r3, [pc, #100]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	4a18      	ldr	r2, [pc, #96]	; (80073bc <HAL_UART_MspInit+0x138>)
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6313      	str	r3, [r2, #48]	; 0x30
 8007362:	4b16      	ldr	r3, [pc, #88]	; (80073bc <HAL_UART_MspInit+0x138>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800736e:	2320      	movs	r3, #32
 8007370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007372:	2302      	movs	r3, #2
 8007374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007376:	2301      	movs	r3, #1
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800737a:	2303      	movs	r3, #3
 800737c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800737e:	2307      	movs	r3, #7
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007382:	f107 031c 	add.w	r3, r7, #28
 8007386:	4619      	mov	r1, r3
 8007388:	480f      	ldr	r0, [pc, #60]	; (80073c8 <HAL_UART_MspInit+0x144>)
 800738a:	f7fb ff51 	bl	8003230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800738e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007398:	2301      	movs	r3, #1
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739c:	2303      	movs	r3, #3
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80073a0:	2307      	movs	r3, #7
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a4:	f107 031c 	add.w	r3, r7, #28
 80073a8:	4619      	mov	r1, r3
 80073aa:	4808      	ldr	r0, [pc, #32]	; (80073cc <HAL_UART_MspInit+0x148>)
 80073ac:	f7fb ff40 	bl	8003230 <HAL_GPIO_Init>
}
 80073b0:	bf00      	nop
 80073b2:	3730      	adds	r7, #48	; 0x30
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40004c00 	.word	0x40004c00
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40020000 	.word	0x40020000
 80073c4:	40004800 	.word	0x40004800
 80073c8:	40020800 	.word	0x40020800
 80073cc:	40020400 	.word	0x40020400

080073d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073e2:	e7fe      	b.n	80073e2 <HardFault_Handler+0x4>

080073e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073e8:	e7fe      	b.n	80073e8 <MemManage_Handler+0x4>

080073ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073ea:	b480      	push	{r7}
 80073ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073ee:	e7fe      	b.n	80073ee <BusFault_Handler+0x4>

080073f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073f4:	e7fe      	b.n	80073f4 <UsageFault_Handler+0x4>

080073f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073f6:	b480      	push	{r7}
 80073f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007412:	b480      	push	{r7}
 8007414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007416:	bf00      	nop
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007424:	f7f9 fdfc 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007428:	bf00      	nop
 800742a:	bd80      	pop	{r7, pc}

0800742c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007430:	4802      	ldr	r0, [pc, #8]	; (800743c <UART4_IRQHandler+0x10>)
 8007432:	f7fe fc6f 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000284 	.word	0x20000284

08007440 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8007444:	4803      	ldr	r0, [pc, #12]	; (8007454 <DMA2_Stream1_IRQHandler+0x14>)
 8007446:	f7fa fb03 	bl	8001a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  ov7670_stopCap();
 800744a:	f7f9 fd47 	bl	8000edc <ov7670_stopCap>
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	200001d0 	.word	0x200001d0

08007458 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e00a      	b.n	8007480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800746a:	f3af 8000 	nop.w
 800746e:	4601      	mov	r1, r0
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	60ba      	str	r2, [r7, #8]
 8007476:	b2ca      	uxtb	r2, r1
 8007478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	3301      	adds	r3, #1
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	dbf0      	blt.n	800746a <_read+0x12>
	}

return len;
 8007488:	687b      	ldr	r3, [r7, #4]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e009      	b.n	80074b8 <_write+0x26>
	{
		//ITM_SendChar(ptr[DataIdx]);
		__io_putchar(*ptr++);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	60ba      	str	r2, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3301      	adds	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	429a      	cmp	r2, r3
 80074be:	dbf1      	blt.n	80074a4 <_write+0x12>
	}
	return len;
 80074c0:	687b      	ldr	r3, [r7, #4]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <_close>:

int _close(int file)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
	return -1;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074f2:	605a      	str	r2, [r3, #4]
	return 0;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <_isatty>:

int _isatty(int file)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
	return 1;
 800750a:	2301      	movs	r3, #1
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
	return 0;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800753c:	4b11      	ldr	r3, [pc, #68]	; (8007584 <_sbrk+0x50>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <_sbrk+0x16>
		heap_end = &end;
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <_sbrk+0x50>)
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <_sbrk+0x54>)
 8007548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800754a:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <_sbrk+0x50>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <_sbrk+0x50>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4413      	add	r3, r2
 8007558:	466a      	mov	r2, sp
 800755a:	4293      	cmp	r3, r2
 800755c:	d907      	bls.n	800756e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800755e:	f000 f875 	bl	800764c <__errno>
 8007562:	4602      	mov	r2, r0
 8007564:	230c      	movs	r3, #12
 8007566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007568:	f04f 33ff 	mov.w	r3, #4294967295
 800756c:	e006      	b.n	800757c <_sbrk+0x48>
	}

	heap_end += incr;
 800756e:	4b05      	ldr	r3, [pc, #20]	; (8007584 <_sbrk+0x50>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	4a03      	ldr	r2, [pc, #12]	; (8007584 <_sbrk+0x50>)
 8007578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800757a:	68fb      	ldr	r3, [r7, #12]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	200000d8 	.word	0x200000d8
 8007588:	20000308 	.word	0x20000308

0800758c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007590:	4b16      	ldr	r3, [pc, #88]	; (80075ec <SystemInit+0x60>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <SystemInit+0x60>)
 8007598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800759c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <SystemInit+0x64>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a12      	ldr	r2, [pc, #72]	; (80075f0 <SystemInit+0x64>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80075ac:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <SystemInit+0x64>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80075b2:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <SystemInit+0x64>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a0e      	ldr	r2, [pc, #56]	; (80075f0 <SystemInit+0x64>)
 80075b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80075bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <SystemInit+0x64>)
 80075c4:	4a0b      	ldr	r2, [pc, #44]	; (80075f4 <SystemInit+0x68>)
 80075c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80075c8:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <SystemInit+0x64>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <SystemInit+0x64>)
 80075ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <SystemInit+0x64>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <SystemInit+0x60>)
 80075dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075e0:	609a      	str	r2, [r3, #8]
#endif
}
 80075e2:	bf00      	nop
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	e000ed00 	.word	0xe000ed00
 80075f0:	40023800 	.word	0x40023800
 80075f4:	24003010 	.word	0x24003010

080075f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075fe:	e003      	b.n	8007608 <LoopCopyDataInit>

08007600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007606:	3104      	adds	r1, #4

08007608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007608:	480b      	ldr	r0, [pc, #44]	; (8007638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800760c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800760e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007610:	d3f6      	bcc.n	8007600 <CopyDataInit>
  ldr  r2, =_sbss
 8007612:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007614:	e002      	b.n	800761c <LoopFillZerobss>

08007616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007618:	f842 3b04 	str.w	r3, [r2], #4

0800761c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800761c:	4b09      	ldr	r3, [pc, #36]	; (8007644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800761e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007620:	d3f9      	bcc.n	8007616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007622:	f7ff ffb3 	bl	800758c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007626:	f000 f817 	bl	8007658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800762a:	f7ff f8d9 	bl	80067e0 <main>
  bx  lr    
 800762e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007634:	080085d8 	.word	0x080085d8
  ldr  r0, =_sdata
 8007638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800763c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8007640:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8007644:	20000308 	.word	0x20000308

08007648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007648:	e7fe      	b.n	8007648 <ADC_IRQHandler>
	...

0800764c <__errno>:
 800764c:	4b01      	ldr	r3, [pc, #4]	; (8007654 <__errno+0x8>)
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000038 	.word	0x20000038

08007658 <__libc_init_array>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4e0d      	ldr	r6, [pc, #52]	; (8007690 <__libc_init_array+0x38>)
 800765c:	4c0d      	ldr	r4, [pc, #52]	; (8007694 <__libc_init_array+0x3c>)
 800765e:	1ba4      	subs	r4, r4, r6
 8007660:	10a4      	asrs	r4, r4, #2
 8007662:	2500      	movs	r5, #0
 8007664:	42a5      	cmp	r5, r4
 8007666:	d109      	bne.n	800767c <__libc_init_array+0x24>
 8007668:	4e0b      	ldr	r6, [pc, #44]	; (8007698 <__libc_init_array+0x40>)
 800766a:	4c0c      	ldr	r4, [pc, #48]	; (800769c <__libc_init_array+0x44>)
 800766c:	f000 ff04 	bl	8008478 <_init>
 8007670:	1ba4      	subs	r4, r4, r6
 8007672:	10a4      	asrs	r4, r4, #2
 8007674:	2500      	movs	r5, #0
 8007676:	42a5      	cmp	r5, r4
 8007678:	d105      	bne.n	8007686 <__libc_init_array+0x2e>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007680:	4798      	blx	r3
 8007682:	3501      	adds	r5, #1
 8007684:	e7ee      	b.n	8007664 <__libc_init_array+0xc>
 8007686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800768a:	4798      	blx	r3
 800768c:	3501      	adds	r5, #1
 800768e:	e7f2      	b.n	8007676 <__libc_init_array+0x1e>
 8007690:	080085d0 	.word	0x080085d0
 8007694:	080085d0 	.word	0x080085d0
 8007698:	080085d0 	.word	0x080085d0
 800769c:	080085d4 	.word	0x080085d4

080076a0 <memset>:
 80076a0:	4402      	add	r2, r0
 80076a2:	4603      	mov	r3, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <iprintf>:
 80076b0:	b40f      	push	{r0, r1, r2, r3}
 80076b2:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <iprintf+0x2c>)
 80076b4:	b513      	push	{r0, r1, r4, lr}
 80076b6:	681c      	ldr	r4, [r3, #0]
 80076b8:	b124      	cbz	r4, 80076c4 <iprintf+0x14>
 80076ba:	69a3      	ldr	r3, [r4, #24]
 80076bc:	b913      	cbnz	r3, 80076c4 <iprintf+0x14>
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 f84e 	bl	8007760 <__sinit>
 80076c4:	ab05      	add	r3, sp, #20
 80076c6:	9a04      	ldr	r2, [sp, #16]
 80076c8:	68a1      	ldr	r1, [r4, #8]
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 f955 	bl	800797c <_vfiprintf_r>
 80076d2:	b002      	add	sp, #8
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d8:	b004      	add	sp, #16
 80076da:	4770      	bx	lr
 80076dc:	20000038 	.word	0x20000038

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	6083      	str	r3, [r0, #8]
 80076ec:	8181      	strh	r1, [r0, #12]
 80076ee:	6643      	str	r3, [r0, #100]	; 0x64
 80076f0:	81c2      	strh	r2, [r0, #14]
 80076f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	; 0x5c
 80076fe:	f7ff ffcf 	bl	80076a0 <memset>
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <std+0x38>)
 8007704:	6263      	str	r3, [r4, #36]	; 0x24
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <std+0x3c>)
 8007708:	62a3      	str	r3, [r4, #40]	; 0x28
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <std+0x40>)
 800770c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <std+0x44>)
 8007710:	6224      	str	r4, [r4, #32]
 8007712:	6323      	str	r3, [r4, #48]	; 0x30
 8007714:	bd10      	pop	{r4, pc}
 8007716:	bf00      	nop
 8007718:	08007ed9 	.word	0x08007ed9
 800771c:	08007efb 	.word	0x08007efb
 8007720:	08007f33 	.word	0x08007f33
 8007724:	08007f57 	.word	0x08007f57

08007728 <_cleanup_r>:
 8007728:	4901      	ldr	r1, [pc, #4]	; (8007730 <_cleanup_r+0x8>)
 800772a:	f000 b885 	b.w	8007838 <_fwalk_reent>
 800772e:	bf00      	nop
 8007730:	08008231 	.word	0x08008231

08007734 <__sfmoreglue>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	1e4a      	subs	r2, r1, #1
 8007738:	2568      	movs	r5, #104	; 0x68
 800773a:	4355      	muls	r5, r2
 800773c:	460e      	mov	r6, r1
 800773e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007742:	f000 f897 	bl	8007874 <_malloc_r>
 8007746:	4604      	mov	r4, r0
 8007748:	b140      	cbz	r0, 800775c <__sfmoreglue+0x28>
 800774a:	2100      	movs	r1, #0
 800774c:	e9c0 1600 	strd	r1, r6, [r0]
 8007750:	300c      	adds	r0, #12
 8007752:	60a0      	str	r0, [r4, #8]
 8007754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007758:	f7ff ffa2 	bl	80076a0 <memset>
 800775c:	4620      	mov	r0, r4
 800775e:	bd70      	pop	{r4, r5, r6, pc}

08007760 <__sinit>:
 8007760:	6983      	ldr	r3, [r0, #24]
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	bb33      	cbnz	r3, 80077b6 <__sinit+0x56>
 8007768:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800776c:	6503      	str	r3, [r0, #80]	; 0x50
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <__sinit+0x58>)
 8007770:	4a12      	ldr	r2, [pc, #72]	; (80077bc <__sinit+0x5c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6282      	str	r2, [r0, #40]	; 0x28
 8007776:	4298      	cmp	r0, r3
 8007778:	bf04      	itt	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	6183      	streq	r3, [r0, #24]
 800777e:	f000 f81f 	bl	80077c0 <__sfp>
 8007782:	6060      	str	r0, [r4, #4]
 8007784:	4620      	mov	r0, r4
 8007786:	f000 f81b 	bl	80077c0 <__sfp>
 800778a:	60a0      	str	r0, [r4, #8]
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f817 	bl	80077c0 <__sfp>
 8007792:	2200      	movs	r2, #0
 8007794:	60e0      	str	r0, [r4, #12]
 8007796:	2104      	movs	r1, #4
 8007798:	6860      	ldr	r0, [r4, #4]
 800779a:	f7ff ffa1 	bl	80076e0 <std>
 800779e:	2201      	movs	r2, #1
 80077a0:	2109      	movs	r1, #9
 80077a2:	68a0      	ldr	r0, [r4, #8]
 80077a4:	f7ff ff9c 	bl	80076e0 <std>
 80077a8:	2202      	movs	r2, #2
 80077aa:	2112      	movs	r1, #18
 80077ac:	68e0      	ldr	r0, [r4, #12]
 80077ae:	f7ff ff97 	bl	80076e0 <std>
 80077b2:	2301      	movs	r3, #1
 80077b4:	61a3      	str	r3, [r4, #24]
 80077b6:	bd10      	pop	{r4, pc}
 80077b8:	08008530 	.word	0x08008530
 80077bc:	08007729 	.word	0x08007729

080077c0 <__sfp>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	4b1b      	ldr	r3, [pc, #108]	; (8007830 <__sfp+0x70>)
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	69b3      	ldr	r3, [r6, #24]
 80077c8:	4607      	mov	r7, r0
 80077ca:	b913      	cbnz	r3, 80077d2 <__sfp+0x12>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff ffc7 	bl	8007760 <__sinit>
 80077d2:	3648      	adds	r6, #72	; 0x48
 80077d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077d8:	3b01      	subs	r3, #1
 80077da:	d503      	bpl.n	80077e4 <__sfp+0x24>
 80077dc:	6833      	ldr	r3, [r6, #0]
 80077de:	b133      	cbz	r3, 80077ee <__sfp+0x2e>
 80077e0:	6836      	ldr	r6, [r6, #0]
 80077e2:	e7f7      	b.n	80077d4 <__sfp+0x14>
 80077e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077e8:	b16d      	cbz	r5, 8007806 <__sfp+0x46>
 80077ea:	3468      	adds	r4, #104	; 0x68
 80077ec:	e7f4      	b.n	80077d8 <__sfp+0x18>
 80077ee:	2104      	movs	r1, #4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ff9f 	bl	8007734 <__sfmoreglue>
 80077f6:	6030      	str	r0, [r6, #0]
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d1f1      	bne.n	80077e0 <__sfp+0x20>
 80077fc:	230c      	movs	r3, #12
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4604      	mov	r4, r0
 8007802:	4620      	mov	r0, r4
 8007804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <__sfp+0x74>)
 8007808:	6665      	str	r5, [r4, #100]	; 0x64
 800780a:	e9c4 5500 	strd	r5, r5, [r4]
 800780e:	60a5      	str	r5, [r4, #8]
 8007810:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007814:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007818:	2208      	movs	r2, #8
 800781a:	4629      	mov	r1, r5
 800781c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007820:	f7ff ff3e 	bl	80076a0 <memset>
 8007824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800782c:	e7e9      	b.n	8007802 <__sfp+0x42>
 800782e:	bf00      	nop
 8007830:	08008530 	.word	0x08008530
 8007834:	ffff0001 	.word	0xffff0001

08007838 <_fwalk_reent>:
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007844:	2600      	movs	r6, #0
 8007846:	b914      	cbnz	r4, 800784e <_fwalk_reent+0x16>
 8007848:	4630      	mov	r0, r6
 800784a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007852:	3f01      	subs	r7, #1
 8007854:	d501      	bpl.n	800785a <_fwalk_reent+0x22>
 8007856:	6824      	ldr	r4, [r4, #0]
 8007858:	e7f5      	b.n	8007846 <_fwalk_reent+0xe>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d907      	bls.n	8007870 <_fwalk_reent+0x38>
 8007860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007864:	3301      	adds	r3, #1
 8007866:	d003      	beq.n	8007870 <_fwalk_reent+0x38>
 8007868:	4629      	mov	r1, r5
 800786a:	4640      	mov	r0, r8
 800786c:	47c8      	blx	r9
 800786e:	4306      	orrs	r6, r0
 8007870:	3568      	adds	r5, #104	; 0x68
 8007872:	e7ee      	b.n	8007852 <_fwalk_reent+0x1a>

08007874 <_malloc_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	1ccd      	adds	r5, r1, #3
 8007878:	f025 0503 	bic.w	r5, r5, #3
 800787c:	3508      	adds	r5, #8
 800787e:	2d0c      	cmp	r5, #12
 8007880:	bf38      	it	cc
 8007882:	250c      	movcc	r5, #12
 8007884:	2d00      	cmp	r5, #0
 8007886:	4606      	mov	r6, r0
 8007888:	db01      	blt.n	800788e <_malloc_r+0x1a>
 800788a:	42a9      	cmp	r1, r5
 800788c:	d903      	bls.n	8007896 <_malloc_r+0x22>
 800788e:	230c      	movs	r3, #12
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	2000      	movs	r0, #0
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	f000 fd6b 	bl	8008370 <__malloc_lock>
 800789a:	4a21      	ldr	r2, [pc, #132]	; (8007920 <_malloc_r+0xac>)
 800789c:	6814      	ldr	r4, [r2, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	b991      	cbnz	r1, 80078c8 <_malloc_r+0x54>
 80078a2:	4c20      	ldr	r4, [pc, #128]	; (8007924 <_malloc_r+0xb0>)
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	b91b      	cbnz	r3, 80078b0 <_malloc_r+0x3c>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 fb05 	bl	8007eb8 <_sbrk_r>
 80078ae:	6020      	str	r0, [r4, #0]
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 fb00 	bl	8007eb8 <_sbrk_r>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d124      	bne.n	8007906 <_malloc_r+0x92>
 80078bc:	230c      	movs	r3, #12
 80078be:	6033      	str	r3, [r6, #0]
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 fd56 	bl	8008372 <__malloc_unlock>
 80078c6:	e7e4      	b.n	8007892 <_malloc_r+0x1e>
 80078c8:	680b      	ldr	r3, [r1, #0]
 80078ca:	1b5b      	subs	r3, r3, r5
 80078cc:	d418      	bmi.n	8007900 <_malloc_r+0x8c>
 80078ce:	2b0b      	cmp	r3, #11
 80078d0:	d90f      	bls.n	80078f2 <_malloc_r+0x7e>
 80078d2:	600b      	str	r3, [r1, #0]
 80078d4:	50cd      	str	r5, [r1, r3]
 80078d6:	18cc      	adds	r4, r1, r3
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 fd4a 	bl	8008372 <__malloc_unlock>
 80078de:	f104 000b 	add.w	r0, r4, #11
 80078e2:	1d23      	adds	r3, r4, #4
 80078e4:	f020 0007 	bic.w	r0, r0, #7
 80078e8:	1ac3      	subs	r3, r0, r3
 80078ea:	d0d3      	beq.n	8007894 <_malloc_r+0x20>
 80078ec:	425a      	negs	r2, r3
 80078ee:	50e2      	str	r2, [r4, r3]
 80078f0:	e7d0      	b.n	8007894 <_malloc_r+0x20>
 80078f2:	428c      	cmp	r4, r1
 80078f4:	684b      	ldr	r3, [r1, #4]
 80078f6:	bf16      	itet	ne
 80078f8:	6063      	strne	r3, [r4, #4]
 80078fa:	6013      	streq	r3, [r2, #0]
 80078fc:	460c      	movne	r4, r1
 80078fe:	e7eb      	b.n	80078d8 <_malloc_r+0x64>
 8007900:	460c      	mov	r4, r1
 8007902:	6849      	ldr	r1, [r1, #4]
 8007904:	e7cc      	b.n	80078a0 <_malloc_r+0x2c>
 8007906:	1cc4      	adds	r4, r0, #3
 8007908:	f024 0403 	bic.w	r4, r4, #3
 800790c:	42a0      	cmp	r0, r4
 800790e:	d005      	beq.n	800791c <_malloc_r+0xa8>
 8007910:	1a21      	subs	r1, r4, r0
 8007912:	4630      	mov	r0, r6
 8007914:	f000 fad0 	bl	8007eb8 <_sbrk_r>
 8007918:	3001      	adds	r0, #1
 800791a:	d0cf      	beq.n	80078bc <_malloc_r+0x48>
 800791c:	6025      	str	r5, [r4, #0]
 800791e:	e7db      	b.n	80078d8 <_malloc_r+0x64>
 8007920:	200000dc 	.word	0x200000dc
 8007924:	200000e0 	.word	0x200000e0

08007928 <__sfputc_r>:
 8007928:	6893      	ldr	r3, [r2, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	b410      	push	{r4}
 8007930:	6093      	str	r3, [r2, #8]
 8007932:	da08      	bge.n	8007946 <__sfputc_r+0x1e>
 8007934:	6994      	ldr	r4, [r2, #24]
 8007936:	42a3      	cmp	r3, r4
 8007938:	db01      	blt.n	800793e <__sfputc_r+0x16>
 800793a:	290a      	cmp	r1, #10
 800793c:	d103      	bne.n	8007946 <__sfputc_r+0x1e>
 800793e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007942:	f000 bb0d 	b.w	8007f60 <__swbuf_r>
 8007946:	6813      	ldr	r3, [r2, #0]
 8007948:	1c58      	adds	r0, r3, #1
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	7019      	strb	r1, [r3, #0]
 800794e:	4608      	mov	r0, r1
 8007950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007954:	4770      	bx	lr

08007956 <__sfputs_r>:
 8007956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007958:	4606      	mov	r6, r0
 800795a:	460f      	mov	r7, r1
 800795c:	4614      	mov	r4, r2
 800795e:	18d5      	adds	r5, r2, r3
 8007960:	42ac      	cmp	r4, r5
 8007962:	d101      	bne.n	8007968 <__sfputs_r+0x12>
 8007964:	2000      	movs	r0, #0
 8007966:	e007      	b.n	8007978 <__sfputs_r+0x22>
 8007968:	463a      	mov	r2, r7
 800796a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff ffda 	bl	8007928 <__sfputc_r>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d1f3      	bne.n	8007960 <__sfputs_r+0xa>
 8007978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800797c <_vfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	460c      	mov	r4, r1
 8007982:	b09d      	sub	sp, #116	; 0x74
 8007984:	4617      	mov	r7, r2
 8007986:	461d      	mov	r5, r3
 8007988:	4606      	mov	r6, r0
 800798a:	b118      	cbz	r0, 8007994 <_vfiprintf_r+0x18>
 800798c:	6983      	ldr	r3, [r0, #24]
 800798e:	b90b      	cbnz	r3, 8007994 <_vfiprintf_r+0x18>
 8007990:	f7ff fee6 	bl	8007760 <__sinit>
 8007994:	4b7c      	ldr	r3, [pc, #496]	; (8007b88 <_vfiprintf_r+0x20c>)
 8007996:	429c      	cmp	r4, r3
 8007998:	d158      	bne.n	8007a4c <_vfiprintf_r+0xd0>
 800799a:	6874      	ldr	r4, [r6, #4]
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	0718      	lsls	r0, r3, #28
 80079a0:	d55e      	bpl.n	8007a60 <_vfiprintf_r+0xe4>
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05b      	beq.n	8007a60 <_vfiprintf_r+0xe4>
 80079a8:	2300      	movs	r3, #0
 80079aa:	9309      	str	r3, [sp, #36]	; 0x24
 80079ac:	2320      	movs	r3, #32
 80079ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b2:	2330      	movs	r3, #48	; 0x30
 80079b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079b8:	9503      	str	r5, [sp, #12]
 80079ba:	f04f 0b01 	mov.w	fp, #1
 80079be:	46b8      	mov	r8, r7
 80079c0:	4645      	mov	r5, r8
 80079c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079c6:	b10b      	cbz	r3, 80079cc <_vfiprintf_r+0x50>
 80079c8:	2b25      	cmp	r3, #37	; 0x25
 80079ca:	d154      	bne.n	8007a76 <_vfiprintf_r+0xfa>
 80079cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80079d0:	d00b      	beq.n	80079ea <_vfiprintf_r+0x6e>
 80079d2:	4653      	mov	r3, sl
 80079d4:	463a      	mov	r2, r7
 80079d6:	4621      	mov	r1, r4
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff ffbc 	bl	8007956 <__sfputs_r>
 80079de:	3001      	adds	r0, #1
 80079e0:	f000 80c2 	beq.w	8007b68 <_vfiprintf_r+0x1ec>
 80079e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e6:	4453      	add	r3, sl
 80079e8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ea:	f898 3000 	ldrb.w	r3, [r8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80ba 	beq.w	8007b68 <_vfiprintf_r+0x1ec>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295
 80079fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	9307      	str	r3, [sp, #28]
 8007a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a06:	931a      	str	r3, [sp, #104]	; 0x68
 8007a08:	46a8      	mov	r8, r5
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007a10:	485e      	ldr	r0, [pc, #376]	; (8007b8c <_vfiprintf_r+0x210>)
 8007a12:	f7f8 fbfd 	bl	8000210 <memchr>
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	bb78      	cbnz	r0, 8007a7a <_vfiprintf_r+0xfe>
 8007a1a:	06d9      	lsls	r1, r3, #27
 8007a1c:	bf44      	itt	mi
 8007a1e:	2220      	movmi	r2, #32
 8007a20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a24:	071a      	lsls	r2, r3, #28
 8007a26:	bf44      	itt	mi
 8007a28:	222b      	movmi	r2, #43	; 0x2b
 8007a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a2e:	782a      	ldrb	r2, [r5, #0]
 8007a30:	2a2a      	cmp	r2, #42	; 0x2a
 8007a32:	d02a      	beq.n	8007a8a <_vfiprintf_r+0x10e>
 8007a34:	9a07      	ldr	r2, [sp, #28]
 8007a36:	46a8      	mov	r8, r5
 8007a38:	2000      	movs	r0, #0
 8007a3a:	250a      	movs	r5, #10
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a42:	3b30      	subs	r3, #48	; 0x30
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d969      	bls.n	8007b1c <_vfiprintf_r+0x1a0>
 8007a48:	b360      	cbz	r0, 8007aa4 <_vfiprintf_r+0x128>
 8007a4a:	e024      	b.n	8007a96 <_vfiprintf_r+0x11a>
 8007a4c:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <_vfiprintf_r+0x214>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_vfiprintf_r+0xda>
 8007a52:	68b4      	ldr	r4, [r6, #8]
 8007a54:	e7a2      	b.n	800799c <_vfiprintf_r+0x20>
 8007a56:	4b4f      	ldr	r3, [pc, #316]	; (8007b94 <_vfiprintf_r+0x218>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68f4      	ldreq	r4, [r6, #12]
 8007a5e:	e79d      	b.n	800799c <_vfiprintf_r+0x20>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 fae0 	bl	8008028 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d09d      	beq.n	80079a8 <_vfiprintf_r+0x2c>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b01d      	add	sp, #116	; 0x74
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	46a8      	mov	r8, r5
 8007a78:	e7a2      	b.n	80079c0 <_vfiprintf_r+0x44>
 8007a7a:	4a44      	ldr	r2, [pc, #272]	; (8007b8c <_vfiprintf_r+0x210>)
 8007a7c:	1a80      	subs	r0, r0, r2
 8007a7e:	fa0b f000 	lsl.w	r0, fp, r0
 8007a82:	4318      	orrs	r0, r3
 8007a84:	9004      	str	r0, [sp, #16]
 8007a86:	4645      	mov	r5, r8
 8007a88:	e7be      	b.n	8007a08 <_vfiprintf_r+0x8c>
 8007a8a:	9a03      	ldr	r2, [sp, #12]
 8007a8c:	1d11      	adds	r1, r2, #4
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	9103      	str	r1, [sp, #12]
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	db01      	blt.n	8007a9a <_vfiprintf_r+0x11e>
 8007a96:	9207      	str	r2, [sp, #28]
 8007a98:	e004      	b.n	8007aa4 <_vfiprintf_r+0x128>
 8007a9a:	4252      	negs	r2, r2
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	9207      	str	r2, [sp, #28]
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f898 3000 	ldrb.w	r3, [r8]
 8007aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aaa:	d10e      	bne.n	8007aca <_vfiprintf_r+0x14e>
 8007aac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab2:	d138      	bne.n	8007b26 <_vfiprintf_r+0x1aa>
 8007ab4:	9b03      	ldr	r3, [sp, #12]
 8007ab6:	1d1a      	adds	r2, r3, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	9203      	str	r2, [sp, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bfb8      	it	lt
 8007ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ac4:	f108 0802 	add.w	r8, r8, #2
 8007ac8:	9305      	str	r3, [sp, #20]
 8007aca:	4d33      	ldr	r5, [pc, #204]	; (8007b98 <_vfiprintf_r+0x21c>)
 8007acc:	f898 1000 	ldrb.w	r1, [r8]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7f8 fb9c 	bl	8000210 <memchr>
 8007ad8:	b140      	cbz	r0, 8007aec <_vfiprintf_r+0x170>
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	1b40      	subs	r0, r0, r5
 8007ade:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	4303      	orrs	r3, r0
 8007ae6:	f108 0801 	add.w	r8, r8, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	f898 1000 	ldrb.w	r1, [r8]
 8007af0:	482a      	ldr	r0, [pc, #168]	; (8007b9c <_vfiprintf_r+0x220>)
 8007af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007af6:	2206      	movs	r2, #6
 8007af8:	f108 0701 	add.w	r7, r8, #1
 8007afc:	f7f8 fb88 	bl	8000210 <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d037      	beq.n	8007b74 <_vfiprintf_r+0x1f8>
 8007b04:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <_vfiprintf_r+0x224>)
 8007b06:	bb1b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x1d4>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3307      	adds	r3, #7
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	444b      	add	r3, r9
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	e750      	b.n	80079be <_vfiprintf_r+0x42>
 8007b1c:	fb05 3202 	mla	r2, r5, r2, r3
 8007b20:	2001      	movs	r0, #1
 8007b22:	4688      	mov	r8, r1
 8007b24:	e78a      	b.n	8007a3c <_vfiprintf_r+0xc0>
 8007b26:	2300      	movs	r3, #0
 8007b28:	f108 0801 	add.w	r8, r8, #1
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	250a      	movs	r5, #10
 8007b32:	4640      	mov	r0, r8
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d903      	bls.n	8007b46 <_vfiprintf_r+0x1ca>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c3      	beq.n	8007aca <_vfiprintf_r+0x14e>
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	e7c1      	b.n	8007aca <_vfiprintf_r+0x14e>
 8007b46:	fb05 2101 	mla	r1, r5, r1, r2
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	e7f0      	b.n	8007b32 <_vfiprintf_r+0x1b6>
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4622      	mov	r2, r4
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <_vfiprintf_r+0x228>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f3af 8000 	nop.w
 8007b60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b64:	4681      	mov	r9, r0
 8007b66:	d1d5      	bne.n	8007b14 <_vfiprintf_r+0x198>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	065b      	lsls	r3, r3, #25
 8007b6c:	f53f af7e 	bmi.w	8007a6c <_vfiprintf_r+0xf0>
 8007b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b72:	e77d      	b.n	8007a70 <_vfiprintf_r+0xf4>
 8007b74:	ab03      	add	r3, sp, #12
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <_vfiprintf_r+0x228>)
 8007b7c:	a904      	add	r1, sp, #16
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 f888 	bl	8007c94 <_printf_i>
 8007b84:	e7ec      	b.n	8007b60 <_vfiprintf_r+0x1e4>
 8007b86:	bf00      	nop
 8007b88:	08008554 	.word	0x08008554
 8007b8c:	08008594 	.word	0x08008594
 8007b90:	08008574 	.word	0x08008574
 8007b94:	08008534 	.word	0x08008534
 8007b98:	0800859a 	.word	0x0800859a
 8007b9c:	0800859e 	.word	0x0800859e
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	08007957 	.word	0x08007957

08007ba8 <_printf_common>:
 8007ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bac:	4691      	mov	r9, r2
 8007bae:	461f      	mov	r7, r3
 8007bb0:	688a      	ldr	r2, [r1, #8]
 8007bb2:	690b      	ldr	r3, [r1, #16]
 8007bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bfb8      	it	lt
 8007bbc:	4613      	movlt	r3, r2
 8007bbe:	f8c9 3000 	str.w	r3, [r9]
 8007bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	b112      	cbz	r2, 8007bd2 <_printf_common+0x2a>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	f8c9 3000 	str.w	r3, [r9]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	0699      	lsls	r1, r3, #26
 8007bd6:	bf42      	ittt	mi
 8007bd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bdc:	3302      	addmi	r3, #2
 8007bde:	f8c9 3000 	strmi.w	r3, [r9]
 8007be2:	6825      	ldr	r5, [r4, #0]
 8007be4:	f015 0506 	ands.w	r5, r5, #6
 8007be8:	d107      	bne.n	8007bfa <_printf_common+0x52>
 8007bea:	f104 0a19 	add.w	sl, r4, #25
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	42ab      	cmp	r3, r5
 8007bf8:	dc28      	bgt.n	8007c4c <_printf_common+0xa4>
 8007bfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	3300      	adds	r3, #0
 8007c02:	bf18      	it	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	0692      	lsls	r2, r2, #26
 8007c08:	d42d      	bmi.n	8007c66 <_printf_common+0xbe>
 8007c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4630      	mov	r0, r6
 8007c12:	47c0      	blx	r8
 8007c14:	3001      	adds	r0, #1
 8007c16:	d020      	beq.n	8007c5a <_printf_common+0xb2>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	68e5      	ldr	r5, [r4, #12]
 8007c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c20:	f003 0306 	and.w	r3, r3, #6
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	bf08      	it	eq
 8007c28:	1aad      	subeq	r5, r5, r2
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	bf0c      	ite	eq
 8007c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c34:	2500      	movne	r5, #0
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bfc4      	itt	gt
 8007c3a:	1a9b      	subgt	r3, r3, r2
 8007c3c:	18ed      	addgt	r5, r5, r3
 8007c3e:	f04f 0900 	mov.w	r9, #0
 8007c42:	341a      	adds	r4, #26
 8007c44:	454d      	cmp	r5, r9
 8007c46:	d11a      	bne.n	8007c7e <_printf_common+0xd6>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e008      	b.n	8007c5e <_printf_common+0xb6>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4639      	mov	r1, r7
 8007c52:	4630      	mov	r0, r6
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d103      	bne.n	8007c62 <_printf_common+0xba>
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c62:	3501      	adds	r5, #1
 8007c64:	e7c3      	b.n	8007bee <_printf_common+0x46>
 8007c66:	18e1      	adds	r1, r4, r3
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	2030      	movs	r0, #48	; 0x30
 8007c6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c70:	4422      	add	r2, r4
 8007c72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	e7c5      	b.n	8007c0a <_printf_common+0x62>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4622      	mov	r2, r4
 8007c82:	4639      	mov	r1, r7
 8007c84:	4630      	mov	r0, r6
 8007c86:	47c0      	blx	r8
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d0e6      	beq.n	8007c5a <_printf_common+0xb2>
 8007c8c:	f109 0901 	add.w	r9, r9, #1
 8007c90:	e7d8      	b.n	8007c44 <_printf_common+0x9c>
	...

08007c94 <_printf_i>:
 8007c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	7e09      	ldrb	r1, [r1, #24]
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	296e      	cmp	r1, #110	; 0x6e
 8007ca4:	4617      	mov	r7, r2
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	4698      	mov	r8, r3
 8007caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cac:	f000 80b3 	beq.w	8007e16 <_printf_i+0x182>
 8007cb0:	d822      	bhi.n	8007cf8 <_printf_i+0x64>
 8007cb2:	2963      	cmp	r1, #99	; 0x63
 8007cb4:	d036      	beq.n	8007d24 <_printf_i+0x90>
 8007cb6:	d80a      	bhi.n	8007cce <_printf_i+0x3a>
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	f000 80b9 	beq.w	8007e30 <_printf_i+0x19c>
 8007cbe:	2958      	cmp	r1, #88	; 0x58
 8007cc0:	f000 8083 	beq.w	8007dca <_printf_i+0x136>
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ccc:	e032      	b.n	8007d34 <_printf_i+0xa0>
 8007cce:	2964      	cmp	r1, #100	; 0x64
 8007cd0:	d001      	beq.n	8007cd6 <_printf_i+0x42>
 8007cd2:	2969      	cmp	r1, #105	; 0x69
 8007cd4:	d1f6      	bne.n	8007cc4 <_printf_i+0x30>
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	0605      	lsls	r5, r0, #24
 8007cdc:	f103 0104 	add.w	r1, r3, #4
 8007ce0:	d52a      	bpl.n	8007d38 <_printf_i+0xa4>
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	da03      	bge.n	8007cf2 <_printf_i+0x5e>
 8007cea:	222d      	movs	r2, #45	; 0x2d
 8007cec:	425b      	negs	r3, r3
 8007cee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007cf2:	486f      	ldr	r0, [pc, #444]	; (8007eb0 <_printf_i+0x21c>)
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	e039      	b.n	8007d6c <_printf_i+0xd8>
 8007cf8:	2973      	cmp	r1, #115	; 0x73
 8007cfa:	f000 809d 	beq.w	8007e38 <_printf_i+0x1a4>
 8007cfe:	d808      	bhi.n	8007d12 <_printf_i+0x7e>
 8007d00:	296f      	cmp	r1, #111	; 0x6f
 8007d02:	d020      	beq.n	8007d46 <_printf_i+0xb2>
 8007d04:	2970      	cmp	r1, #112	; 0x70
 8007d06:	d1dd      	bne.n	8007cc4 <_printf_i+0x30>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	f043 0320 	orr.w	r3, r3, #32
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	e003      	b.n	8007d1a <_printf_i+0x86>
 8007d12:	2975      	cmp	r1, #117	; 0x75
 8007d14:	d017      	beq.n	8007d46 <_printf_i+0xb2>
 8007d16:	2978      	cmp	r1, #120	; 0x78
 8007d18:	d1d4      	bne.n	8007cc4 <_printf_i+0x30>
 8007d1a:	2378      	movs	r3, #120	; 0x78
 8007d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d20:	4864      	ldr	r0, [pc, #400]	; (8007eb4 <_printf_i+0x220>)
 8007d22:	e055      	b.n	8007dd0 <_printf_i+0x13c>
 8007d24:	6813      	ldr	r3, [r2, #0]
 8007d26:	1d19      	adds	r1, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6011      	str	r1, [r2, #0]
 8007d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d34:	2301      	movs	r3, #1
 8007d36:	e08c      	b.n	8007e52 <_printf_i+0x1be>
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6011      	str	r1, [r2, #0]
 8007d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d40:	bf18      	it	ne
 8007d42:	b21b      	sxthne	r3, r3
 8007d44:	e7cf      	b.n	8007ce6 <_printf_i+0x52>
 8007d46:	6813      	ldr	r3, [r2, #0]
 8007d48:	6825      	ldr	r5, [r4, #0]
 8007d4a:	1d18      	adds	r0, r3, #4
 8007d4c:	6010      	str	r0, [r2, #0]
 8007d4e:	0628      	lsls	r0, r5, #24
 8007d50:	d501      	bpl.n	8007d56 <_printf_i+0xc2>
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	e002      	b.n	8007d5c <_printf_i+0xc8>
 8007d56:	0668      	lsls	r0, r5, #25
 8007d58:	d5fb      	bpl.n	8007d52 <_printf_i+0xbe>
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	4854      	ldr	r0, [pc, #336]	; (8007eb0 <_printf_i+0x21c>)
 8007d5e:	296f      	cmp	r1, #111	; 0x6f
 8007d60:	bf14      	ite	ne
 8007d62:	220a      	movne	r2, #10
 8007d64:	2208      	moveq	r2, #8
 8007d66:	2100      	movs	r1, #0
 8007d68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d6c:	6865      	ldr	r5, [r4, #4]
 8007d6e:	60a5      	str	r5, [r4, #8]
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	f2c0 8095 	blt.w	8007ea0 <_printf_i+0x20c>
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	f021 0104 	bic.w	r1, r1, #4
 8007d7c:	6021      	str	r1, [r4, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d13d      	bne.n	8007dfe <_printf_i+0x16a>
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	f040 808e 	bne.w	8007ea4 <_printf_i+0x210>
 8007d88:	4665      	mov	r5, ip
 8007d8a:	2a08      	cmp	r2, #8
 8007d8c:	d10b      	bne.n	8007da6 <_printf_i+0x112>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	07db      	lsls	r3, r3, #31
 8007d92:	d508      	bpl.n	8007da6 <_printf_i+0x112>
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	6862      	ldr	r2, [r4, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	bfde      	ittt	le
 8007d9c:	2330      	movle	r3, #48	; 0x30
 8007d9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007da2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007da6:	ebac 0305 	sub.w	r3, ip, r5
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	f8cd 8000 	str.w	r8, [sp]
 8007db0:	463b      	mov	r3, r7
 8007db2:	aa03      	add	r2, sp, #12
 8007db4:	4621      	mov	r1, r4
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff fef6 	bl	8007ba8 <_printf_common>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d14d      	bne.n	8007e5c <_printf_i+0x1c8>
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	b005      	add	sp, #20
 8007dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dca:	4839      	ldr	r0, [pc, #228]	; (8007eb0 <_printf_i+0x21c>)
 8007dcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007dd0:	6813      	ldr	r3, [r2, #0]
 8007dd2:	6821      	ldr	r1, [r4, #0]
 8007dd4:	1d1d      	adds	r5, r3, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6015      	str	r5, [r2, #0]
 8007dda:	060a      	lsls	r2, r1, #24
 8007ddc:	d50b      	bpl.n	8007df6 <_printf_i+0x162>
 8007dde:	07ca      	lsls	r2, r1, #31
 8007de0:	bf44      	itt	mi
 8007de2:	f041 0120 	orrmi.w	r1, r1, #32
 8007de6:	6021      	strmi	r1, [r4, #0]
 8007de8:	b91b      	cbnz	r3, 8007df2 <_printf_i+0x15e>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	f022 0220 	bic.w	r2, r2, #32
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	2210      	movs	r2, #16
 8007df4:	e7b7      	b.n	8007d66 <_printf_i+0xd2>
 8007df6:	064d      	lsls	r5, r1, #25
 8007df8:	bf48      	it	mi
 8007dfa:	b29b      	uxthmi	r3, r3
 8007dfc:	e7ef      	b.n	8007dde <_printf_i+0x14a>
 8007dfe:	4665      	mov	r5, ip
 8007e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e04:	fb02 3311 	mls	r3, r2, r1, r3
 8007e08:	5cc3      	ldrb	r3, [r0, r3]
 8007e0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e0e:	460b      	mov	r3, r1
 8007e10:	2900      	cmp	r1, #0
 8007e12:	d1f5      	bne.n	8007e00 <_printf_i+0x16c>
 8007e14:	e7b9      	b.n	8007d8a <_printf_i+0xf6>
 8007e16:	6813      	ldr	r3, [r2, #0]
 8007e18:	6825      	ldr	r5, [r4, #0]
 8007e1a:	6961      	ldr	r1, [r4, #20]
 8007e1c:	1d18      	adds	r0, r3, #4
 8007e1e:	6010      	str	r0, [r2, #0]
 8007e20:	0628      	lsls	r0, r5, #24
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	d501      	bpl.n	8007e2a <_printf_i+0x196>
 8007e26:	6019      	str	r1, [r3, #0]
 8007e28:	e002      	b.n	8007e30 <_printf_i+0x19c>
 8007e2a:	066a      	lsls	r2, r5, #25
 8007e2c:	d5fb      	bpl.n	8007e26 <_printf_i+0x192>
 8007e2e:	8019      	strh	r1, [r3, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	4665      	mov	r5, ip
 8007e36:	e7b9      	b.n	8007dac <_printf_i+0x118>
 8007e38:	6813      	ldr	r3, [r2, #0]
 8007e3a:	1d19      	adds	r1, r3, #4
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	681d      	ldr	r5, [r3, #0]
 8007e40:	6862      	ldr	r2, [r4, #4]
 8007e42:	2100      	movs	r1, #0
 8007e44:	4628      	mov	r0, r5
 8007e46:	f7f8 f9e3 	bl	8000210 <memchr>
 8007e4a:	b108      	cbz	r0, 8007e50 <_printf_i+0x1bc>
 8007e4c:	1b40      	subs	r0, r0, r5
 8007e4e:	6060      	str	r0, [r4, #4]
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	2300      	movs	r3, #0
 8007e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5a:	e7a7      	b.n	8007dac <_printf_i+0x118>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4639      	mov	r1, r7
 8007e62:	4630      	mov	r0, r6
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d0aa      	beq.n	8007dc0 <_printf_i+0x12c>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	079b      	lsls	r3, r3, #30
 8007e6e:	d413      	bmi.n	8007e98 <_printf_i+0x204>
 8007e70:	68e0      	ldr	r0, [r4, #12]
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	4298      	cmp	r0, r3
 8007e76:	bfb8      	it	lt
 8007e78:	4618      	movlt	r0, r3
 8007e7a:	e7a3      	b.n	8007dc4 <_printf_i+0x130>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	464a      	mov	r2, r9
 8007e80:	4639      	mov	r1, r7
 8007e82:	4630      	mov	r0, r6
 8007e84:	47c0      	blx	r8
 8007e86:	3001      	adds	r0, #1
 8007e88:	d09a      	beq.n	8007dc0 <_printf_i+0x12c>
 8007e8a:	3501      	adds	r5, #1
 8007e8c:	68e3      	ldr	r3, [r4, #12]
 8007e8e:	9a03      	ldr	r2, [sp, #12]
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	42ab      	cmp	r3, r5
 8007e94:	dcf2      	bgt.n	8007e7c <_printf_i+0x1e8>
 8007e96:	e7eb      	b.n	8007e70 <_printf_i+0x1dc>
 8007e98:	2500      	movs	r5, #0
 8007e9a:	f104 0919 	add.w	r9, r4, #25
 8007e9e:	e7f5      	b.n	8007e8c <_printf_i+0x1f8>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1ac      	bne.n	8007dfe <_printf_i+0x16a>
 8007ea4:	7803      	ldrb	r3, [r0, #0]
 8007ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eae:	e76c      	b.n	8007d8a <_printf_i+0xf6>
 8007eb0:	080085a5 	.word	0x080085a5
 8007eb4:	080085b6 	.word	0x080085b6

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4c06      	ldr	r4, [pc, #24]	; (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	f7ff fb36 	bl	8007534 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000304 	.word	0x20000304

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 fa96 	bl	8008410 <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	05db      	lsls	r3, r3, #23
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	f000 f9b6 	bl	8008284 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b869 	b.w	8008004 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f000 f9a3 	bl	8008284 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b8d3 	b.w	8008104 <_close_r>
	...

08007f60 <__swbuf_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	460e      	mov	r6, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	4605      	mov	r5, r0
 8007f68:	b118      	cbz	r0, 8007f72 <__swbuf_r+0x12>
 8007f6a:	6983      	ldr	r3, [r0, #24]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <__swbuf_r+0x12>
 8007f6e:	f7ff fbf7 	bl	8007760 <__sinit>
 8007f72:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <__swbuf_r+0x98>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	d12a      	bne.n	8007fce <__swbuf_r+0x6e>
 8007f78:	686c      	ldr	r4, [r5, #4]
 8007f7a:	69a3      	ldr	r3, [r4, #24]
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	071a      	lsls	r2, r3, #28
 8007f82:	d52e      	bpl.n	8007fe2 <__swbuf_r+0x82>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	b363      	cbz	r3, 8007fe2 <__swbuf_r+0x82>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	6820      	ldr	r0, [r4, #0]
 8007f8c:	1ac0      	subs	r0, r0, r3
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc04      	bgt.n	8007fa2 <__swbuf_r+0x42>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 f948 	bl	8008230 <_fflush_r>
 8007fa0:	bb28      	cbnz	r0, 8007fee <__swbuf_r+0x8e>
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	60a3      	str	r3, [r4, #8]
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	6022      	str	r2, [r4, #0]
 8007fae:	701e      	strb	r6, [r3, #0]
 8007fb0:	6963      	ldr	r3, [r4, #20]
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	4283      	cmp	r3, r0
 8007fb6:	d004      	beq.n	8007fc2 <__swbuf_r+0x62>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	07db      	lsls	r3, r3, #31
 8007fbc:	d519      	bpl.n	8007ff2 <__swbuf_r+0x92>
 8007fbe:	2e0a      	cmp	r6, #10
 8007fc0:	d117      	bne.n	8007ff2 <__swbuf_r+0x92>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f000 f933 	bl	8008230 <_fflush_r>
 8007fca:	b190      	cbz	r0, 8007ff2 <__swbuf_r+0x92>
 8007fcc:	e00f      	b.n	8007fee <__swbuf_r+0x8e>
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <__swbuf_r+0x9c>)
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d101      	bne.n	8007fd8 <__swbuf_r+0x78>
 8007fd4:	68ac      	ldr	r4, [r5, #8]
 8007fd6:	e7d0      	b.n	8007f7a <__swbuf_r+0x1a>
 8007fd8:	4b09      	ldr	r3, [pc, #36]	; (8008000 <__swbuf_r+0xa0>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	bf08      	it	eq
 8007fde:	68ec      	ldreq	r4, [r5, #12]
 8007fe0:	e7cb      	b.n	8007f7a <__swbuf_r+0x1a>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f000 f81f 	bl	8008028 <__swsetup_r>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0cc      	beq.n	8007f88 <__swbuf_r+0x28>
 8007fee:	f04f 37ff 	mov.w	r7, #4294967295
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08008554 	.word	0x08008554
 8007ffc:	08008574 	.word	0x08008574
 8008000:	08008534 	.word	0x08008534

08008004 <_write_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4c07      	ldr	r4, [pc, #28]	; (8008024 <_write_r+0x20>)
 8008008:	4605      	mov	r5, r0
 800800a:	4608      	mov	r0, r1
 800800c:	4611      	mov	r1, r2
 800800e:	2200      	movs	r2, #0
 8008010:	6022      	str	r2, [r4, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	f7ff fa3d 	bl	8007492 <_write>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_write_r+0x1e>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	b103      	cbz	r3, 8008022 <_write_r+0x1e>
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	20000304 	.word	0x20000304

08008028 <__swsetup_r>:
 8008028:	4b32      	ldr	r3, [pc, #200]	; (80080f4 <__swsetup_r+0xcc>)
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	681d      	ldr	r5, [r3, #0]
 800802e:	4606      	mov	r6, r0
 8008030:	460c      	mov	r4, r1
 8008032:	b125      	cbz	r5, 800803e <__swsetup_r+0x16>
 8008034:	69ab      	ldr	r3, [r5, #24]
 8008036:	b913      	cbnz	r3, 800803e <__swsetup_r+0x16>
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff fb91 	bl	8007760 <__sinit>
 800803e:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <__swsetup_r+0xd0>)
 8008040:	429c      	cmp	r4, r3
 8008042:	d10f      	bne.n	8008064 <__swsetup_r+0x3c>
 8008044:	686c      	ldr	r4, [r5, #4]
 8008046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800804a:	b29a      	uxth	r2, r3
 800804c:	0715      	lsls	r5, r2, #28
 800804e:	d42c      	bmi.n	80080aa <__swsetup_r+0x82>
 8008050:	06d0      	lsls	r0, r2, #27
 8008052:	d411      	bmi.n	8008078 <__swsetup_r+0x50>
 8008054:	2209      	movs	r2, #9
 8008056:	6032      	str	r2, [r6, #0]
 8008058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	e03e      	b.n	80080e2 <__swsetup_r+0xba>
 8008064:	4b25      	ldr	r3, [pc, #148]	; (80080fc <__swsetup_r+0xd4>)
 8008066:	429c      	cmp	r4, r3
 8008068:	d101      	bne.n	800806e <__swsetup_r+0x46>
 800806a:	68ac      	ldr	r4, [r5, #8]
 800806c:	e7eb      	b.n	8008046 <__swsetup_r+0x1e>
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <__swsetup_r+0xd8>)
 8008070:	429c      	cmp	r4, r3
 8008072:	bf08      	it	eq
 8008074:	68ec      	ldreq	r4, [r5, #12]
 8008076:	e7e6      	b.n	8008046 <__swsetup_r+0x1e>
 8008078:	0751      	lsls	r1, r2, #29
 800807a:	d512      	bpl.n	80080a2 <__swsetup_r+0x7a>
 800807c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807e:	b141      	cbz	r1, 8008092 <__swsetup_r+0x6a>
 8008080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008084:	4299      	cmp	r1, r3
 8008086:	d002      	beq.n	800808e <__swsetup_r+0x66>
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f973 	bl	8008374 <_free_r>
 800808e:	2300      	movs	r3, #0
 8008090:	6363      	str	r3, [r4, #52]	; 0x34
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	2300      	movs	r3, #0
 800809c:	6063      	str	r3, [r4, #4]
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f043 0308 	orr.w	r3, r3, #8
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	b94b      	cbnz	r3, 80080c2 <__swsetup_r+0x9a>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d003      	beq.n	80080c2 <__swsetup_r+0x9a>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 f917 	bl	80082f0 <__smakebuf_r>
 80080c2:	89a2      	ldrh	r2, [r4, #12]
 80080c4:	f012 0301 	ands.w	r3, r2, #1
 80080c8:	d00c      	beq.n	80080e4 <__swsetup_r+0xbc>
 80080ca:	2300      	movs	r3, #0
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	6963      	ldr	r3, [r4, #20]
 80080d0:	425b      	negs	r3, r3
 80080d2:	61a3      	str	r3, [r4, #24]
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	b953      	cbnz	r3, 80080ee <__swsetup_r+0xc6>
 80080d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80080e0:	d1ba      	bne.n	8008058 <__swsetup_r+0x30>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	0792      	lsls	r2, r2, #30
 80080e6:	bf58      	it	pl
 80080e8:	6963      	ldrpl	r3, [r4, #20]
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	e7f2      	b.n	80080d4 <__swsetup_r+0xac>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7f7      	b.n	80080e2 <__swsetup_r+0xba>
 80080f2:	bf00      	nop
 80080f4:	20000038 	.word	0x20000038
 80080f8:	08008554 	.word	0x08008554
 80080fc:	08008574 	.word	0x08008574
 8008100:	08008534 	.word	0x08008534

08008104 <_close_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4c06      	ldr	r4, [pc, #24]	; (8008120 <_close_r+0x1c>)
 8008108:	2300      	movs	r3, #0
 800810a:	4605      	mov	r5, r0
 800810c:	4608      	mov	r0, r1
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	f7ff f9db 	bl	80074ca <_close>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_close_r+0x1a>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	b103      	cbz	r3, 800811e <_close_r+0x1a>
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20000304 	.word	0x20000304

08008124 <__sflush_r>:
 8008124:	898a      	ldrh	r2, [r1, #12]
 8008126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812a:	4605      	mov	r5, r0
 800812c:	0710      	lsls	r0, r2, #28
 800812e:	460c      	mov	r4, r1
 8008130:	d458      	bmi.n	80081e4 <__sflush_r+0xc0>
 8008132:	684b      	ldr	r3, [r1, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dc05      	bgt.n	8008144 <__sflush_r+0x20>
 8008138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc02      	bgt.n	8008144 <__sflush_r+0x20>
 800813e:	2000      	movs	r0, #0
 8008140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008146:	2e00      	cmp	r6, #0
 8008148:	d0f9      	beq.n	800813e <__sflush_r+0x1a>
 800814a:	2300      	movs	r3, #0
 800814c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008150:	682f      	ldr	r7, [r5, #0]
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	d032      	beq.n	80081be <__sflush_r+0x9a>
 8008158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	075a      	lsls	r2, r3, #29
 800815e:	d505      	bpl.n	800816c <__sflush_r+0x48>
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008166:	b10b      	cbz	r3, 800816c <__sflush_r+0x48>
 8008168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816a:	1ac0      	subs	r0, r0, r3
 800816c:	2300      	movs	r3, #0
 800816e:	4602      	mov	r2, r0
 8008170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008172:	6a21      	ldr	r1, [r4, #32]
 8008174:	4628      	mov	r0, r5
 8008176:	47b0      	blx	r6
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	d106      	bne.n	800818c <__sflush_r+0x68>
 800817e:	6829      	ldr	r1, [r5, #0]
 8008180:	291d      	cmp	r1, #29
 8008182:	d848      	bhi.n	8008216 <__sflush_r+0xf2>
 8008184:	4a29      	ldr	r2, [pc, #164]	; (800822c <__sflush_r+0x108>)
 8008186:	40ca      	lsrs	r2, r1
 8008188:	07d6      	lsls	r6, r2, #31
 800818a:	d544      	bpl.n	8008216 <__sflush_r+0xf2>
 800818c:	2200      	movs	r2, #0
 800818e:	6062      	str	r2, [r4, #4]
 8008190:	04d9      	lsls	r1, r3, #19
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	6022      	str	r2, [r4, #0]
 8008196:	d504      	bpl.n	80081a2 <__sflush_r+0x7e>
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	d101      	bne.n	80081a0 <__sflush_r+0x7c>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b903      	cbnz	r3, 80081a2 <__sflush_r+0x7e>
 80081a0:	6560      	str	r0, [r4, #84]	; 0x54
 80081a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a4:	602f      	str	r7, [r5, #0]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d0c9      	beq.n	800813e <__sflush_r+0x1a>
 80081aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d002      	beq.n	80081b8 <__sflush_r+0x94>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 f8de 	bl	8008374 <_free_r>
 80081b8:	2000      	movs	r0, #0
 80081ba:	6360      	str	r0, [r4, #52]	; 0x34
 80081bc:	e7c0      	b.n	8008140 <__sflush_r+0x1c>
 80081be:	2301      	movs	r3, #1
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b0      	blx	r6
 80081c4:	1c41      	adds	r1, r0, #1
 80081c6:	d1c8      	bne.n	800815a <__sflush_r+0x36>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0c5      	beq.n	800815a <__sflush_r+0x36>
 80081ce:	2b1d      	cmp	r3, #29
 80081d0:	d001      	beq.n	80081d6 <__sflush_r+0xb2>
 80081d2:	2b16      	cmp	r3, #22
 80081d4:	d101      	bne.n	80081da <__sflush_r+0xb6>
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	e7b1      	b.n	800813e <__sflush_r+0x1a>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	e7ad      	b.n	8008140 <__sflush_r+0x1c>
 80081e4:	690f      	ldr	r7, [r1, #16]
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	d0a9      	beq.n	800813e <__sflush_r+0x1a>
 80081ea:	0793      	lsls	r3, r2, #30
 80081ec:	680e      	ldr	r6, [r1, #0]
 80081ee:	bf08      	it	eq
 80081f0:	694b      	ldreq	r3, [r1, #20]
 80081f2:	600f      	str	r7, [r1, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2300      	movne	r3, #0
 80081f8:	eba6 0807 	sub.w	r8, r6, r7
 80081fc:	608b      	str	r3, [r1, #8]
 80081fe:	f1b8 0f00 	cmp.w	r8, #0
 8008202:	dd9c      	ble.n	800813e <__sflush_r+0x1a>
 8008204:	4643      	mov	r3, r8
 8008206:	463a      	mov	r2, r7
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800820c:	4628      	mov	r0, r5
 800820e:	47b0      	blx	r6
 8008210:	2800      	cmp	r0, #0
 8008212:	dc06      	bgt.n	8008222 <__sflush_r+0xfe>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e78e      	b.n	8008140 <__sflush_r+0x1c>
 8008222:	4407      	add	r7, r0
 8008224:	eba8 0800 	sub.w	r8, r8, r0
 8008228:	e7e9      	b.n	80081fe <__sflush_r+0xda>
 800822a:	bf00      	nop
 800822c:	20400001 	.word	0x20400001

08008230 <_fflush_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b1db      	cbz	r3, 8008272 <_fflush_r+0x42>
 800823a:	b118      	cbz	r0, 8008244 <_fflush_r+0x14>
 800823c:	6983      	ldr	r3, [r0, #24]
 800823e:	b90b      	cbnz	r3, 8008244 <_fflush_r+0x14>
 8008240:	f7ff fa8e 	bl	8007760 <__sinit>
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <_fflush_r+0x48>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d109      	bne.n	800825e <_fflush_r+0x2e>
 800824a:	686c      	ldr	r4, [r5, #4]
 800824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008250:	b17b      	cbz	r3, 8008272 <_fflush_r+0x42>
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825a:	f7ff bf63 	b.w	8008124 <__sflush_r>
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <_fflush_r+0x4c>)
 8008260:	429c      	cmp	r4, r3
 8008262:	d101      	bne.n	8008268 <_fflush_r+0x38>
 8008264:	68ac      	ldr	r4, [r5, #8]
 8008266:	e7f1      	b.n	800824c <_fflush_r+0x1c>
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <_fflush_r+0x50>)
 800826a:	429c      	cmp	r4, r3
 800826c:	bf08      	it	eq
 800826e:	68ec      	ldreq	r4, [r5, #12]
 8008270:	e7ec      	b.n	800824c <_fflush_r+0x1c>
 8008272:	2000      	movs	r0, #0
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	bf00      	nop
 8008278:	08008554 	.word	0x08008554
 800827c:	08008574 	.word	0x08008574
 8008280:	08008534 	.word	0x08008534

08008284 <_lseek_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4c07      	ldr	r4, [pc, #28]	; (80082a4 <_lseek_r+0x20>)
 8008288:	4605      	mov	r5, r0
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	2200      	movs	r2, #0
 8008290:	6022      	str	r2, [r4, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7ff f940 	bl	8007518 <_lseek>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_lseek_r+0x1e>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_lseek_r+0x1e>
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000304 	.word	0x20000304

080082a8 <__swhatbuf_r>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	460e      	mov	r6, r1
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	2900      	cmp	r1, #0
 80082b2:	b096      	sub	sp, #88	; 0x58
 80082b4:	4614      	mov	r4, r2
 80082b6:	461d      	mov	r5, r3
 80082b8:	da07      	bge.n	80082ca <__swhatbuf_r+0x22>
 80082ba:	2300      	movs	r3, #0
 80082bc:	602b      	str	r3, [r5, #0]
 80082be:	89b3      	ldrh	r3, [r6, #12]
 80082c0:	061a      	lsls	r2, r3, #24
 80082c2:	d410      	bmi.n	80082e6 <__swhatbuf_r+0x3e>
 80082c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c8:	e00e      	b.n	80082e8 <__swhatbuf_r+0x40>
 80082ca:	466a      	mov	r2, sp
 80082cc:	f000 f8b2 	bl	8008434 <_fstat_r>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dbf2      	blt.n	80082ba <__swhatbuf_r+0x12>
 80082d4:	9a01      	ldr	r2, [sp, #4]
 80082d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082de:	425a      	negs	r2, r3
 80082e0:	415a      	adcs	r2, r3
 80082e2:	602a      	str	r2, [r5, #0]
 80082e4:	e7ee      	b.n	80082c4 <__swhatbuf_r+0x1c>
 80082e6:	2340      	movs	r3, #64	; 0x40
 80082e8:	2000      	movs	r0, #0
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	b016      	add	sp, #88	; 0x58
 80082ee:	bd70      	pop	{r4, r5, r6, pc}

080082f0 <__smakebuf_r>:
 80082f0:	898b      	ldrh	r3, [r1, #12]
 80082f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082f4:	079d      	lsls	r5, r3, #30
 80082f6:	4606      	mov	r6, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	d507      	bpl.n	800830c <__smakebuf_r+0x1c>
 80082fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	2301      	movs	r3, #1
 8008306:	6163      	str	r3, [r4, #20]
 8008308:	b002      	add	sp, #8
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	ab01      	add	r3, sp, #4
 800830e:	466a      	mov	r2, sp
 8008310:	f7ff ffca 	bl	80082a8 <__swhatbuf_r>
 8008314:	9900      	ldr	r1, [sp, #0]
 8008316:	4605      	mov	r5, r0
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff faab 	bl	8007874 <_malloc_r>
 800831e:	b948      	cbnz	r0, 8008334 <__smakebuf_r+0x44>
 8008320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008324:	059a      	lsls	r2, r3, #22
 8008326:	d4ef      	bmi.n	8008308 <__smakebuf_r+0x18>
 8008328:	f023 0303 	bic.w	r3, r3, #3
 800832c:	f043 0302 	orr.w	r3, r3, #2
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	e7e3      	b.n	80082fc <__smakebuf_r+0xc>
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <__smakebuf_r+0x7c>)
 8008336:	62b3      	str	r3, [r6, #40]	; 0x28
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	9b00      	ldr	r3, [sp, #0]
 8008344:	6163      	str	r3, [r4, #20]
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	6120      	str	r0, [r4, #16]
 800834a:	b15b      	cbz	r3, 8008364 <__smakebuf_r+0x74>
 800834c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f881 	bl	8008458 <_isatty_r>
 8008356:	b128      	cbz	r0, 8008364 <__smakebuf_r+0x74>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	431d      	orrs	r5, r3
 8008368:	81a5      	strh	r5, [r4, #12]
 800836a:	e7cd      	b.n	8008308 <__smakebuf_r+0x18>
 800836c:	08007729 	.word	0x08007729

08008370 <__malloc_lock>:
 8008370:	4770      	bx	lr

08008372 <__malloc_unlock>:
 8008372:	4770      	bx	lr

08008374 <_free_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4605      	mov	r5, r0
 8008378:	2900      	cmp	r1, #0
 800837a:	d045      	beq.n	8008408 <_free_r+0x94>
 800837c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008380:	1f0c      	subs	r4, r1, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	bfb8      	it	lt
 8008386:	18e4      	addlt	r4, r4, r3
 8008388:	f7ff fff2 	bl	8008370 <__malloc_lock>
 800838c:	4a1f      	ldr	r2, [pc, #124]	; (800840c <_free_r+0x98>)
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	4610      	mov	r0, r2
 8008392:	b933      	cbnz	r3, 80083a2 <_free_r+0x2e>
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6014      	str	r4, [r2, #0]
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839e:	f7ff bfe8 	b.w	8008372 <__malloc_unlock>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d90c      	bls.n	80083c0 <_free_r+0x4c>
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	1862      	adds	r2, r4, r1
 80083aa:	4293      	cmp	r3, r2
 80083ac:	bf04      	itt	eq
 80083ae:	681a      	ldreq	r2, [r3, #0]
 80083b0:	685b      	ldreq	r3, [r3, #4]
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	bf04      	itt	eq
 80083b6:	1852      	addeq	r2, r2, r1
 80083b8:	6022      	streq	r2, [r4, #0]
 80083ba:	6004      	str	r4, [r0, #0]
 80083bc:	e7ec      	b.n	8008398 <_free_r+0x24>
 80083be:	4613      	mov	r3, r2
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	b10a      	cbz	r2, 80083c8 <_free_r+0x54>
 80083c4:	42a2      	cmp	r2, r4
 80083c6:	d9fa      	bls.n	80083be <_free_r+0x4a>
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	1858      	adds	r0, r3, r1
 80083cc:	42a0      	cmp	r0, r4
 80083ce:	d10b      	bne.n	80083e8 <_free_r+0x74>
 80083d0:	6820      	ldr	r0, [r4, #0]
 80083d2:	4401      	add	r1, r0
 80083d4:	1858      	adds	r0, r3, r1
 80083d6:	4282      	cmp	r2, r0
 80083d8:	6019      	str	r1, [r3, #0]
 80083da:	d1dd      	bne.n	8008398 <_free_r+0x24>
 80083dc:	6810      	ldr	r0, [r2, #0]
 80083de:	6852      	ldr	r2, [r2, #4]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	4401      	add	r1, r0
 80083e4:	6019      	str	r1, [r3, #0]
 80083e6:	e7d7      	b.n	8008398 <_free_r+0x24>
 80083e8:	d902      	bls.n	80083f0 <_free_r+0x7c>
 80083ea:	230c      	movs	r3, #12
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	e7d3      	b.n	8008398 <_free_r+0x24>
 80083f0:	6820      	ldr	r0, [r4, #0]
 80083f2:	1821      	adds	r1, r4, r0
 80083f4:	428a      	cmp	r2, r1
 80083f6:	bf04      	itt	eq
 80083f8:	6811      	ldreq	r1, [r2, #0]
 80083fa:	6852      	ldreq	r2, [r2, #4]
 80083fc:	6062      	str	r2, [r4, #4]
 80083fe:	bf04      	itt	eq
 8008400:	1809      	addeq	r1, r1, r0
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	605c      	str	r4, [r3, #4]
 8008406:	e7c7      	b.n	8008398 <_free_r+0x24>
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	bf00      	nop
 800840c:	200000dc 	.word	0x200000dc

08008410 <_read_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4c07      	ldr	r4, [pc, #28]	; (8008430 <_read_r+0x20>)
 8008414:	4605      	mov	r5, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7ff f81a 	bl	8007458 <_read>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_read_r+0x1e>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	b103      	cbz	r3, 800842e <_read_r+0x1e>
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20000304 	.word	0x20000304

08008434 <_fstat_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4c07      	ldr	r4, [pc, #28]	; (8008454 <_fstat_r+0x20>)
 8008438:	2300      	movs	r3, #0
 800843a:	4605      	mov	r5, r0
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	f7ff f84e 	bl	80074e2 <_fstat>
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	d102      	bne.n	8008450 <_fstat_r+0x1c>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	b103      	cbz	r3, 8008450 <_fstat_r+0x1c>
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	bf00      	nop
 8008454:	20000304 	.word	0x20000304

08008458 <_isatty_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4c06      	ldr	r4, [pc, #24]	; (8008474 <_isatty_r+0x1c>)
 800845c:	2300      	movs	r3, #0
 800845e:	4605      	mov	r5, r0
 8008460:	4608      	mov	r0, r1
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	f7ff f84d 	bl	8007502 <_isatty>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_isatty_r+0x1a>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	b103      	cbz	r3, 8008472 <_isatty_r+0x1a>
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20000304 	.word	0x20000304

08008478 <_init>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr

08008484 <_fini>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr
